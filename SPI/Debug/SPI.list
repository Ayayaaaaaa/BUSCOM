
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000430c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080044dc  080044dc  000144dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004594  08004594  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800459c  0800459c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800459c  0800459c  0001459c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045a0  080045a0  000145a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08004614  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08004614  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b72a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d96  00000000  00000000  0002b7ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009e8  00000000  00000000  0002d560  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f0  00000000  00000000  0002df48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002249b  00000000  00000000  0002e838  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a80  00000000  00000000  00050cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cacbb  00000000  00000000  00059753  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012440e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e6c  00000000  00000000  0012448c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080044c4 	.word	0x080044c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080044c4 	.word	0x080044c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//! @last_edit : 10/07/2020
//! @details : PRINTF TO UART handling
int __io_putchar(int ch)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USARTx and Loop until the end of transmission */
	while (HAL_OK != HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, HAL_MAX_DELAY))
 80005b8:	bf00      	nop
 80005ba:	1d39      	adds	r1, r7, #4
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	2201      	movs	r2, #1
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <__io_putchar+0x28>)
 80005c4:	f002 fafd 	bl	8002bc2 <HAL_UART_Transmit>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1f5      	bne.n	80005ba <__io_putchar+0xa>
	{
		;
	}
	return ch;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000f0 	.word	0x200000f0

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08e      	sub	sp, #56	; 0x38
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fb97 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f845 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f911 	bl	8000810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 f8e5 	bl	80007bc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005f2:	f000 f8ad 	bl	8000750 <MX_SPI1_Init>
  int ret;
  char buffer[64];
  int message;
  int message_length;*/

  uint8_t conf = 0, iqr = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80005fc:	2300      	movs	r3, #0
 80005fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 8000602:	2201      	movs	r2, #1
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	4818      	ldr	r0, [pc, #96]	; (8000668 <main+0x8c>)
 8000608:	f000 fede 	bl	80013c8 <HAL_GPIO_WritePin>

  SX1272_Init();
 800060c:	f002 ff38 	bl	8003480 <SX1272_Init>
  else ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t u8RCVLen = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  uint8_t PUTTY_BUFFER[50] = "V";
 8000616:	2356      	movs	r3, #86	; 0x56
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	222e      	movs	r2, #46	; 0x2e
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f003 f863 	bl	80036ec <memset>
  printf("Test");
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <main+0x90>)
 8000628:	f003 f868 	bl	80036fc <iprintf>

  HAL_UART_Transmit(&huart2, PUTTY_BUFFER, 9, HAL_MAX_DELAY);
 800062c:	4639      	mov	r1, r7
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
 8000632:	2209      	movs	r2, #9
 8000634:	480e      	ldr	r0, [pc, #56]	; (8000670 <main+0x94>)
 8000636:	f002 fac4 	bl	8002bc2 <HAL_UART_Transmit>

	  //SX1272_Transmit(0x42);
	  /*conf = SPI_Read_Register(0x01);
	  HAL_Delay(15);
	  iqr = SPI_Read_Register(0x12);*/
	  u8RCVLen = SX1272_Receive(PUTTY_BUFFER);
 800063a:	463b      	mov	r3, r7
 800063c:	4618      	mov	r0, r3
 800063e:	f002 ffd3 	bl	80035e8 <SX1272_Receive>
 8000642:	4603      	mov	r3, r0
 8000644:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	  if(PUTTY_BUFFER[0] != 0) {
 8000648:	783b      	ldrb	r3, [r7, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0f5      	beq.n	800063a <main+0x5e>
		  HAL_UART_Transmit(&huart2, PUTTY_BUFFER, u8RCVLen, HAL_MAX_DELAY);
 800064e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000652:	b29a      	uxth	r2, r3
 8000654:	4639      	mov	r1, r7
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <main+0x94>)
 800065c:	f002 fab1 	bl	8002bc2 <HAL_UART_Transmit>
		  PUTTY_BUFFER[0] = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	703b      	strb	r3, [r7, #0]
  {
 8000664:	e7e9      	b.n	800063a <main+0x5e>
 8000666:	bf00      	nop
 8000668:	40020400 	.word	0x40020400
 800066c:	080044dc 	.word	0x080044dc
 8000670:	200000f0 	.word	0x200000f0

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2234      	movs	r2, #52	; 0x34
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f003 f832 	bl	80036ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <SystemClock_Config+0xd4>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a29      	ldr	r2, [pc, #164]	; (8000748 <SystemClock_Config+0xd4>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b27      	ldr	r3, [pc, #156]	; (8000748 <SystemClock_Config+0xd4>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b4:	2300      	movs	r3, #0
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <SystemClock_Config+0xd8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c0:	4a22      	ldr	r2, [pc, #136]	; (800074c <SystemClock_Config+0xd8>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b20      	ldr	r3, [pc, #128]	; (800074c <SystemClock_Config+0xd8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2310      	movs	r3, #16
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006e8:	2310      	movs	r3, #16
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 308;
 80006ec:	f44f 739a 	mov.w	r3, #308	; 0x134
 80006f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f2:	2304      	movs	r3, #4
 80006f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f934 	bl	8001970 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800070e:	f000 f91d 	bl	800094c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2102      	movs	r1, #2
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fe64 	bl	80013fc <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800073a:	f000 f907 	bl	800094c <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <MX_SPI1_Init+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_SPI1_Init+0x64>)
 800075c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_SPI1_Init+0x64>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000784:	2210      	movs	r2, #16
 8000786:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_SPI1_Init+0x64>)
 800079c:	220a      	movs	r2, #10
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_SPI1_Init+0x64>)
 80007a2:	f001 fb3f 	bl	8001e24 <HAL_SPI_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007ac:	f000 f8ce 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000098 	.word	0x20000098
 80007b8:	40013000 	.word	0x40013000

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART2_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f002 f998 	bl	8002b28 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f8a5 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000f0 	.word	0x200000f0
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b43      	ldr	r3, [pc, #268]	; (8000938 <MX_GPIO_Init+0x128>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a42      	ldr	r2, [pc, #264]	; (8000938 <MX_GPIO_Init+0x128>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b40      	ldr	r3, [pc, #256]	; (8000938 <MX_GPIO_Init+0x128>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_GPIO_Init+0x128>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a3b      	ldr	r2, [pc, #236]	; (8000938 <MX_GPIO_Init+0x128>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_GPIO_Init+0x128>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b35      	ldr	r3, [pc, #212]	; (8000938 <MX_GPIO_Init+0x128>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a34      	ldr	r2, [pc, #208]	; (8000938 <MX_GPIO_Init+0x128>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b32      	ldr	r3, [pc, #200]	; (8000938 <MX_GPIO_Init+0x128>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_GPIO_Init+0x128>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a2d      	ldr	r2, [pc, #180]	; (8000938 <MX_GPIO_Init+0x128>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_GPIO_Init+0x128>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2101      	movs	r1, #1
 800089a:	4828      	ldr	r0, [pc, #160]	; (800093c <MX_GPIO_Init+0x12c>)
 800089c:	f000 fd94 	bl	80013c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2140      	movs	r1, #64	; 0x40
 80008a4:	4826      	ldr	r0, [pc, #152]	; (8000940 <MX_GPIO_Init+0x130>)
 80008a6:	f000 fd8f 	bl	80013c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <MX_GPIO_Init+0x134>)
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4822      	ldr	r0, [pc, #136]	; (8000948 <MX_GPIO_Init+0x138>)
 80008c0:	f000 fbf0 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80008c4:	2301      	movs	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4818      	ldr	r0, [pc, #96]	; (800093c <MX_GPIO_Init+0x12c>)
 80008dc:	f000 fbe2 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80008e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_GPIO_Init+0x12c>)
 80008f6:	f000 fbd5 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO1_Pin DIO3_Pin DIO2_Pin */
  GPIO_InitStruct.Pin = DIO1_Pin|DIO3_Pin|DIO2_Pin;
 80008fa:	2338      	movs	r3, #56	; 0x38
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <MX_GPIO_Init+0x130>)
 800090e:	f000 fbc9 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000912:	2340      	movs	r3, #64	; 0x40
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_GPIO_Init+0x130>)
 800092a:	f000 fbbb 	bl	80010a4 <HAL_GPIO_Init>

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40020000 	.word	0x40020000
 8000940:	40020400 	.word	0x40020400
 8000944:	10210000 	.word	0x10210000
 8000948:	40020800 	.word	0x40020800

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <HAL_MspInit+0x4c>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_MspInit+0x4c>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800099a:	2007      	movs	r0, #7
 800099c:	f000 fb1e 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1d      	ldr	r2, [pc, #116]	; (8000a40 <HAL_SPI_MspInit+0x94>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d133      	bne.n	8000a36 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <HAL_SPI_MspInit+0x98>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <HAL_SPI_MspInit+0x98>)
 80009d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009dc:	6453      	str	r3, [r2, #68]	; 0x44
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <HAL_SPI_MspInit+0x98>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_SPI_MspInit+0x98>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <HAL_SPI_MspInit+0x98>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_SPI_MspInit+0x98>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8000a06:	23e0      	movs	r3, #224	; 0xe0
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a16:	2305      	movs	r3, #5
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <HAL_SPI_MspInit+0x9c>)
 8000a22:	f000 fb3f 	bl	80010a4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2023      	movs	r0, #35	; 0x23
 8000a2c:	f000 fae1 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a30:	2023      	movs	r0, #35	; 0x23
 8000a32:	f000 fafa 	bl	800102a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40013000 	.word	0x40013000
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a19      	ldr	r2, [pc, #100]	; (8000ad0 <HAL_UART_MspInit+0x84>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d12b      	bne.n	8000ac6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <HAL_UART_MspInit+0x8c>)
 8000ac2:	f000 faef 	bl	80010a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40004400 	.word	0x40004400
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b30:	f000 f942 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <SPI1_IRQHandler+0x10>)
 8000b3e:	f001 fdb5 	bl	80026ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000098 	.word	0x20000098

08000b4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	e00a      	b.n	8000b74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b5e:	f3af 8000 	nop.w
 8000b62:	4601      	mov	r1, r0
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	60ba      	str	r2, [r7, #8]
 8000b6a:	b2ca      	uxtb	r2, r1
 8000b6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dbf0      	blt.n	8000b5e <_read+0x12>
	}

return len;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e009      	b.n	8000bac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	60ba      	str	r2, [r7, #8]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fd05 	bl	80005b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbf1      	blt.n	8000b98 <_write+0x12>
	}
	return len;
 8000bb4:	687b      	ldr	r3, [r7, #4]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_close>:

int _close(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be6:	605a      	str	r2, [r3, #4]
	return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_isatty>:

int _isatty(int file)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
	return 1;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	return 0;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c30:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <_sbrk+0x5c>)
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <_sbrk+0x60>)
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <_sbrk+0x64>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <_sbrk+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c58:	f002 fd1e 	bl	8003698 <__errno>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	230c      	movs	r3, #12
 8000c60:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	e009      	b.n	8000c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <_sbrk+0x64>)
 8000c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20020000 	.word	0x20020000
 8000c88:	00000400 	.word	0x00000400
 8000c8c:	2000008c 	.word	0x2000008c
 8000c90:	20000138 	.word	0x20000138

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <SystemInit+0x28>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <SystemInit+0x28>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SystemInit+0x28>)
 8000caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cae:	609a      	str	r2, [r3, #8]
#endif
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cc6:	e003      	b.n	8000cd0 <LoopCopyDataInit>

08000cc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ccc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cce:	3104      	adds	r1, #4

08000cd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cd0:	480b      	ldr	r0, [pc, #44]	; (8000d00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cd8:	d3f6      	bcc.n	8000cc8 <CopyDataInit>
  ldr  r2, =_sbss
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cdc:	e002      	b.n	8000ce4 <LoopFillZerobss>

08000cde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ce0:	f842 3b04 	str.w	r3, [r2], #4

08000ce4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ce6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ce8:	d3f9      	bcc.n	8000cde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cea:	f7ff ffd3 	bl	8000c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f002 fcd9 	bl	80036a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fc73 	bl	80005dc <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cfc:	080045a4 	.word	0x080045a4
  ldr  r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d04:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000d08:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000d0c:	20000138 	.word	0x20000138

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f94d 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fe08 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f965 	bl	8001046 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f92d 	bl	8000ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000130 	.word	0x20000130

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000130 	.word	0x20000130

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_Delay+0x40>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000008 	.word	0x20000008

08000e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <__NVIC_GetPriorityGrouping+0x18>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0307 	and.w	r3, r3, #7
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db0b      	blt.n	8000eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	4907      	ldr	r1, [pc, #28]	; (8000ed8 <__NVIC_EnableIRQ+0x38>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	; 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa8:	d301      	bcc.n	8000fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00f      	b.n	8000fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <SysTick_Config+0x40>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f7ff ff8e 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff29 	bl	8000e3c <__NVIC_SetPriorityGrouping>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001004:	f7ff ff3e 	bl	8000e84 <__NVIC_GetPriorityGrouping>
 8001008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff ff8e 	bl	8000f30 <NVIC_EncodePriority>
 8001014:	4602      	mov	r2, r0
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff5d 	bl	8000edc <__NVIC_SetPriority>
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff31 	bl	8000ea0 <__NVIC_EnableIRQ>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffa2 	bl	8000f98 <SysTick_Config>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d004      	beq.n	800107c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e00c      	b.n	8001096 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2205      	movs	r2, #5
 8001080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	e165      	b.n	800138c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c0:	2201      	movs	r2, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f040 8154 	bne.w	8001386 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d00b      	beq.n	80010fe <HAL_GPIO_Init+0x5a>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f2:	2b11      	cmp	r3, #17
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b12      	cmp	r3, #18
 80010fc:	d130      	bne.n	8001160 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	f003 0201 	and.w	r2, r3, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0xfc>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b12      	cmp	r3, #18
 800119e:	d123      	bne.n	80011e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3208      	adds	r2, #8
 80011e2:	69b9      	ldr	r1, [r7, #24]
 80011e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0203 	and.w	r2, r3, #3
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80ae 	beq.w	8001386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b5c      	ldr	r3, [pc, #368]	; (80013a0 <HAL_GPIO_Init+0x2fc>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a5b      	ldr	r2, [pc, #364]	; (80013a0 <HAL_GPIO_Init+0x2fc>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b59      	ldr	r3, [pc, #356]	; (80013a0 <HAL_GPIO_Init+0x2fc>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001246:	4a57      	ldr	r2, [pc, #348]	; (80013a4 <HAL_GPIO_Init+0x300>)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4e      	ldr	r2, [pc, #312]	; (80013a8 <HAL_GPIO_Init+0x304>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d025      	beq.n	80012be <HAL_GPIO_Init+0x21a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4d      	ldr	r2, [pc, #308]	; (80013ac <HAL_GPIO_Init+0x308>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d01f      	beq.n	80012ba <HAL_GPIO_Init+0x216>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4c      	ldr	r2, [pc, #304]	; (80013b0 <HAL_GPIO_Init+0x30c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d019      	beq.n	80012b6 <HAL_GPIO_Init+0x212>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4b      	ldr	r2, [pc, #300]	; (80013b4 <HAL_GPIO_Init+0x310>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d013      	beq.n	80012b2 <HAL_GPIO_Init+0x20e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4a      	ldr	r2, [pc, #296]	; (80013b8 <HAL_GPIO_Init+0x314>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d00d      	beq.n	80012ae <HAL_GPIO_Init+0x20a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a49      	ldr	r2, [pc, #292]	; (80013bc <HAL_GPIO_Init+0x318>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d007      	beq.n	80012aa <HAL_GPIO_Init+0x206>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a48      	ldr	r2, [pc, #288]	; (80013c0 <HAL_GPIO_Init+0x31c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d101      	bne.n	80012a6 <HAL_GPIO_Init+0x202>
 80012a2:	2306      	movs	r3, #6
 80012a4:	e00c      	b.n	80012c0 <HAL_GPIO_Init+0x21c>
 80012a6:	2307      	movs	r3, #7
 80012a8:	e00a      	b.n	80012c0 <HAL_GPIO_Init+0x21c>
 80012aa:	2305      	movs	r3, #5
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x21c>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x21c>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x21c>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x21c>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x21c>
 80012be:	2300      	movs	r3, #0
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d0:	4934      	ldr	r1, [pc, #208]	; (80013a4 <HAL_GPIO_Init+0x300>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012de:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <HAL_GPIO_Init+0x320>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001302:	4a30      	ldr	r2, [pc, #192]	; (80013c4 <HAL_GPIO_Init+0x320>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001308:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <HAL_GPIO_Init+0x320>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132c:	4a25      	ldr	r2, [pc, #148]	; (80013c4 <HAL_GPIO_Init+0x320>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <HAL_GPIO_Init+0x320>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001356:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <HAL_GPIO_Init+0x320>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <HAL_GPIO_Init+0x320>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001380:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <HAL_GPIO_Init+0x320>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	f67f ae96 	bls.w	80010c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001394:	bf00      	nop
 8001396:	3724      	adds	r7, #36	; 0x24
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40021400 	.word	0x40021400
 80013c0:	40021800 	.word	0x40021800
 80013c4:	40013c00 	.word	0x40013c00

080013c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
 80013d4:	4613      	mov	r3, r2
 80013d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d8:	787b      	ldrb	r3, [r7, #1]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013de:	887a      	ldrh	r2, [r7, #2]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e4:	e003      	b.n	80013ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	041a      	lsls	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	619a      	str	r2, [r3, #24]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0cc      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001410:	4b68      	ldr	r3, [pc, #416]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d90c      	bls.n	8001438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141e:	4b65      	ldr	r3, [pc, #404]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001426:	4b63      	ldr	r3, [pc, #396]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d001      	beq.n	8001438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0b8      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d020      	beq.n	8001486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001450:	4b59      	ldr	r3, [pc, #356]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	4a58      	ldr	r2, [pc, #352]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800145a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001468:	4b53      	ldr	r3, [pc, #332]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	4a52      	ldr	r2, [pc, #328]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001474:	4b50      	ldr	r3, [pc, #320]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	494d      	ldr	r1, [pc, #308]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	4313      	orrs	r3, r2
 8001484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d044      	beq.n	800151c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d107      	bne.n	80014aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149a:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d119      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e07f      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d003      	beq.n	80014ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d107      	bne.n	80014ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ba:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e06f      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e067      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014da:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f023 0203 	bic.w	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4934      	ldr	r1, [pc, #208]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014ec:	f7ff fc78 	bl	8000de0 <HAL_GetTick>
 80014f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f2:	e00a      	b.n	800150a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f4:	f7ff fc74 	bl	8000de0 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e04f      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150a:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 020c 	and.w	r2, r3, #12
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	429a      	cmp	r2, r3
 800151a:	d1eb      	bne.n	80014f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 030f 	and.w	r3, r3, #15
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d20c      	bcs.n	8001544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d001      	beq.n	8001544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e032      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	4916      	ldr	r1, [pc, #88]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	4313      	orrs	r3, r2
 8001560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d009      	beq.n	8001582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	490e      	ldr	r1, [pc, #56]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001582:	f000 f855 	bl	8001630 <HAL_RCC_GetSysClockFreq>
 8001586:	4601      	mov	r1, r0
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	fa21 f303 	lsr.w	r3, r1, r3
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fbd8 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023c00 	.word	0x40023c00
 80015b8:	40023800 	.word	0x40023800
 80015bc:	080044e4 	.word	0x080044e4
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000004 	.word	0x20000004

080015c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <HAL_RCC_GetHCLKFreq+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000000 	.word	0x20000000

080015e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015e4:	f7ff fff0 	bl	80015c8 <HAL_RCC_GetHCLKFreq>
 80015e8:	4601      	mov	r1, r0
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	0a9b      	lsrs	r3, r3, #10
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	4a03      	ldr	r2, [pc, #12]	; (8001604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015f6:	5cd3      	ldrb	r3, [r2, r3]
 80015f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	080044f4 	.word	0x080044f4

08001608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800160c:	f7ff ffdc 	bl	80015c8 <HAL_RCC_GetHCLKFreq>
 8001610:	4601      	mov	r1, r0
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	0b5b      	lsrs	r3, r3, #13
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	4a03      	ldr	r2, [pc, #12]	; (800162c <HAL_RCC_GetPCLK2Freq+0x24>)
 800161e:	5cd3      	ldrb	r3, [r2, r3]
 8001620:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001624:	4618      	mov	r0, r3
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	080044f4 	.word	0x080044f4

08001630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800164a:	4bc6      	ldr	r3, [pc, #792]	; (8001964 <HAL_RCC_GetSysClockFreq+0x334>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b0c      	cmp	r3, #12
 8001654:	f200 817e 	bhi.w	8001954 <HAL_RCC_GetSysClockFreq+0x324>
 8001658:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <HAL_RCC_GetSysClockFreq+0x30>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	08001695 	.word	0x08001695
 8001664:	08001955 	.word	0x08001955
 8001668:	08001955 	.word	0x08001955
 800166c:	08001955 	.word	0x08001955
 8001670:	0800169b 	.word	0x0800169b
 8001674:	08001955 	.word	0x08001955
 8001678:	08001955 	.word	0x08001955
 800167c:	08001955 	.word	0x08001955
 8001680:	080016a1 	.word	0x080016a1
 8001684:	08001955 	.word	0x08001955
 8001688:	08001955 	.word	0x08001955
 800168c:	08001955 	.word	0x08001955
 8001690:	080017fd 	.word	0x080017fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001694:	4bb4      	ldr	r3, [pc, #720]	; (8001968 <HAL_RCC_GetSysClockFreq+0x338>)
 8001696:	613b      	str	r3, [r7, #16]
       break;
 8001698:	e15f      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800169a:	4bb4      	ldr	r3, [pc, #720]	; (800196c <HAL_RCC_GetSysClockFreq+0x33c>)
 800169c:	613b      	str	r3, [r7, #16]
      break;
 800169e:	e15c      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016a0:	4bb0      	ldr	r3, [pc, #704]	; (8001964 <HAL_RCC_GetSysClockFreq+0x334>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016a8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016aa:	4bae      	ldr	r3, [pc, #696]	; (8001964 <HAL_RCC_GetSysClockFreq+0x334>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d04a      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b6:	4bab      	ldr	r3, [pc, #684]	; (8001964 <HAL_RCC_GetSysClockFreq+0x334>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	099b      	lsrs	r3, r3, #6
 80016bc:	f04f 0400 	mov.w	r4, #0
 80016c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	ea03 0501 	and.w	r5, r3, r1
 80016cc:	ea04 0602 	and.w	r6, r4, r2
 80016d0:	4629      	mov	r1, r5
 80016d2:	4632      	mov	r2, r6
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	f04f 0400 	mov.w	r4, #0
 80016dc:	0154      	lsls	r4, r2, #5
 80016de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016e2:	014b      	lsls	r3, r1, #5
 80016e4:	4619      	mov	r1, r3
 80016e6:	4622      	mov	r2, r4
 80016e8:	1b49      	subs	r1, r1, r5
 80016ea:	eb62 0206 	sbc.w	r2, r2, r6
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	f04f 0400 	mov.w	r4, #0
 80016f6:	0194      	lsls	r4, r2, #6
 80016f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016fc:	018b      	lsls	r3, r1, #6
 80016fe:	1a5b      	subs	r3, r3, r1
 8001700:	eb64 0402 	sbc.w	r4, r4, r2
 8001704:	f04f 0100 	mov.w	r1, #0
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	00e2      	lsls	r2, r4, #3
 800170e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001712:	00d9      	lsls	r1, r3, #3
 8001714:	460b      	mov	r3, r1
 8001716:	4614      	mov	r4, r2
 8001718:	195b      	adds	r3, r3, r5
 800171a:	eb44 0406 	adc.w	r4, r4, r6
 800171e:	f04f 0100 	mov.w	r1, #0
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	0262      	lsls	r2, r4, #9
 8001728:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800172c:	0259      	lsls	r1, r3, #9
 800172e:	460b      	mov	r3, r1
 8001730:	4614      	mov	r4, r2
 8001732:	4618      	mov	r0, r3
 8001734:	4621      	mov	r1, r4
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f04f 0400 	mov.w	r4, #0
 800173c:	461a      	mov	r2, r3
 800173e:	4623      	mov	r3, r4
 8001740:	f7fe fdb6 	bl	80002b0 <__aeabi_uldivmod>
 8001744:	4603      	mov	r3, r0
 8001746:	460c      	mov	r4, r1
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e049      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174c:	4b85      	ldr	r3, [pc, #532]	; (8001964 <HAL_RCC_GetSysClockFreq+0x334>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	099b      	lsrs	r3, r3, #6
 8001752:	f04f 0400 	mov.w	r4, #0
 8001756:	f240 11ff 	movw	r1, #511	; 0x1ff
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	ea03 0501 	and.w	r5, r3, r1
 8001762:	ea04 0602 	and.w	r6, r4, r2
 8001766:	4629      	mov	r1, r5
 8001768:	4632      	mov	r2, r6
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	f04f 0400 	mov.w	r4, #0
 8001772:	0154      	lsls	r4, r2, #5
 8001774:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001778:	014b      	lsls	r3, r1, #5
 800177a:	4619      	mov	r1, r3
 800177c:	4622      	mov	r2, r4
 800177e:	1b49      	subs	r1, r1, r5
 8001780:	eb62 0206 	sbc.w	r2, r2, r6
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	f04f 0400 	mov.w	r4, #0
 800178c:	0194      	lsls	r4, r2, #6
 800178e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001792:	018b      	lsls	r3, r1, #6
 8001794:	1a5b      	subs	r3, r3, r1
 8001796:	eb64 0402 	sbc.w	r4, r4, r2
 800179a:	f04f 0100 	mov.w	r1, #0
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	00e2      	lsls	r2, r4, #3
 80017a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017a8:	00d9      	lsls	r1, r3, #3
 80017aa:	460b      	mov	r3, r1
 80017ac:	4614      	mov	r4, r2
 80017ae:	195b      	adds	r3, r3, r5
 80017b0:	eb44 0406 	adc.w	r4, r4, r6
 80017b4:	f04f 0100 	mov.w	r1, #0
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	02a2      	lsls	r2, r4, #10
 80017be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017c2:	0299      	lsls	r1, r3, #10
 80017c4:	460b      	mov	r3, r1
 80017c6:	4614      	mov	r4, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	4621      	mov	r1, r4
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f04f 0400 	mov.w	r4, #0
 80017d2:	461a      	mov	r2, r3
 80017d4:	4623      	mov	r3, r4
 80017d6:	f7fe fd6b 	bl	80002b0 <__aeabi_uldivmod>
 80017da:	4603      	mov	r3, r0
 80017dc:	460c      	mov	r4, r1
 80017de:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017e0:	4b60      	ldr	r3, [pc, #384]	; (8001964 <HAL_RCC_GetSysClockFreq+0x334>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	0c1b      	lsrs	r3, r3, #16
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	3301      	adds	r3, #1
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f8:	613b      	str	r3, [r7, #16]
      break;
 80017fa:	e0ae      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017fc:	4b59      	ldr	r3, [pc, #356]	; (8001964 <HAL_RCC_GetSysClockFreq+0x334>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001804:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001806:	4b57      	ldr	r3, [pc, #348]	; (8001964 <HAL_RCC_GetSysClockFreq+0x334>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d04a      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001812:	4b54      	ldr	r3, [pc, #336]	; (8001964 <HAL_RCC_GetSysClockFreq+0x334>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	099b      	lsrs	r3, r3, #6
 8001818:	f04f 0400 	mov.w	r4, #0
 800181c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	ea03 0501 	and.w	r5, r3, r1
 8001828:	ea04 0602 	and.w	r6, r4, r2
 800182c:	4629      	mov	r1, r5
 800182e:	4632      	mov	r2, r6
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	f04f 0400 	mov.w	r4, #0
 8001838:	0154      	lsls	r4, r2, #5
 800183a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800183e:	014b      	lsls	r3, r1, #5
 8001840:	4619      	mov	r1, r3
 8001842:	4622      	mov	r2, r4
 8001844:	1b49      	subs	r1, r1, r5
 8001846:	eb62 0206 	sbc.w	r2, r2, r6
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	f04f 0400 	mov.w	r4, #0
 8001852:	0194      	lsls	r4, r2, #6
 8001854:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001858:	018b      	lsls	r3, r1, #6
 800185a:	1a5b      	subs	r3, r3, r1
 800185c:	eb64 0402 	sbc.w	r4, r4, r2
 8001860:	f04f 0100 	mov.w	r1, #0
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	00e2      	lsls	r2, r4, #3
 800186a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800186e:	00d9      	lsls	r1, r3, #3
 8001870:	460b      	mov	r3, r1
 8001872:	4614      	mov	r4, r2
 8001874:	195b      	adds	r3, r3, r5
 8001876:	eb44 0406 	adc.w	r4, r4, r6
 800187a:	f04f 0100 	mov.w	r1, #0
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	0262      	lsls	r2, r4, #9
 8001884:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001888:	0259      	lsls	r1, r3, #9
 800188a:	460b      	mov	r3, r1
 800188c:	4614      	mov	r4, r2
 800188e:	4618      	mov	r0, r3
 8001890:	4621      	mov	r1, r4
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f04f 0400 	mov.w	r4, #0
 8001898:	461a      	mov	r2, r3
 800189a:	4623      	mov	r3, r4
 800189c:	f7fe fd08 	bl	80002b0 <__aeabi_uldivmod>
 80018a0:	4603      	mov	r3, r0
 80018a2:	460c      	mov	r4, r1
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	e049      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a8:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <HAL_RCC_GetSysClockFreq+0x334>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	099b      	lsrs	r3, r3, #6
 80018ae:	f04f 0400 	mov.w	r4, #0
 80018b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	ea03 0501 	and.w	r5, r3, r1
 80018be:	ea04 0602 	and.w	r6, r4, r2
 80018c2:	4629      	mov	r1, r5
 80018c4:	4632      	mov	r2, r6
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	f04f 0400 	mov.w	r4, #0
 80018ce:	0154      	lsls	r4, r2, #5
 80018d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018d4:	014b      	lsls	r3, r1, #5
 80018d6:	4619      	mov	r1, r3
 80018d8:	4622      	mov	r2, r4
 80018da:	1b49      	subs	r1, r1, r5
 80018dc:	eb62 0206 	sbc.w	r2, r2, r6
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	f04f 0400 	mov.w	r4, #0
 80018e8:	0194      	lsls	r4, r2, #6
 80018ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018ee:	018b      	lsls	r3, r1, #6
 80018f0:	1a5b      	subs	r3, r3, r1
 80018f2:	eb64 0402 	sbc.w	r4, r4, r2
 80018f6:	f04f 0100 	mov.w	r1, #0
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	00e2      	lsls	r2, r4, #3
 8001900:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001904:	00d9      	lsls	r1, r3, #3
 8001906:	460b      	mov	r3, r1
 8001908:	4614      	mov	r4, r2
 800190a:	195b      	adds	r3, r3, r5
 800190c:	eb44 0406 	adc.w	r4, r4, r6
 8001910:	f04f 0100 	mov.w	r1, #0
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	02a2      	lsls	r2, r4, #10
 800191a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800191e:	0299      	lsls	r1, r3, #10
 8001920:	460b      	mov	r3, r1
 8001922:	4614      	mov	r4, r2
 8001924:	4618      	mov	r0, r3
 8001926:	4621      	mov	r1, r4
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f04f 0400 	mov.w	r4, #0
 800192e:	461a      	mov	r2, r3
 8001930:	4623      	mov	r3, r4
 8001932:	f7fe fcbd 	bl	80002b0 <__aeabi_uldivmod>
 8001936:	4603      	mov	r3, r0
 8001938:	460c      	mov	r4, r1
 800193a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_RCC_GetSysClockFreq+0x334>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	0f1b      	lsrs	r3, r3, #28
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001950:	613b      	str	r3, [r7, #16]
      break;
 8001952:	e002      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <HAL_RCC_GetSysClockFreq+0x338>)
 8001956:	613b      	str	r3, [r7, #16]
      break;
 8001958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195a:	693b      	ldr	r3, [r7, #16]
}
 800195c:	4618      	mov	r0, r3
 800195e:	371c      	adds	r7, #28
 8001960:	46bd      	mov	sp, r7
 8001962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001964:	40023800 	.word	0x40023800
 8001968:	00f42400 	.word	0x00f42400
 800196c:	007a1200 	.word	0x007a1200

08001970 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 8083 	beq.w	8001a90 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800198a:	4b95      	ldr	r3, [pc, #596]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b04      	cmp	r3, #4
 8001994:	d019      	beq.n	80019ca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001996:	4b92      	ldr	r3, [pc, #584]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d106      	bne.n	80019b0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019a2:	4b8f      	ldr	r3, [pc, #572]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ae:	d00c      	beq.n	80019ca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b0:	4b8b      	ldr	r3, [pc, #556]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019b8:	2b0c      	cmp	r3, #12
 80019ba:	d112      	bne.n	80019e2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019bc:	4b88      	ldr	r3, [pc, #544]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019c8:	d10b      	bne.n	80019e2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ca:	4b85      	ldr	r3, [pc, #532]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d05b      	beq.n	8001a8e <HAL_RCC_OscConfig+0x11e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d157      	bne.n	8001a8e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e216      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x8a>
 80019ec:	4b7c      	ldr	r3, [pc, #496]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a7b      	ldr	r2, [pc, #492]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	e01d      	b.n	8001a36 <HAL_RCC_OscConfig+0xc6>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a02:	d10c      	bne.n	8001a1e <HAL_RCC_OscConfig+0xae>
 8001a04:	4b76      	ldr	r3, [pc, #472]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a75      	ldr	r2, [pc, #468]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	4b73      	ldr	r3, [pc, #460]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a72      	ldr	r2, [pc, #456]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	e00b      	b.n	8001a36 <HAL_RCC_OscConfig+0xc6>
 8001a1e:	4b70      	ldr	r3, [pc, #448]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a6f      	ldr	r2, [pc, #444]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b6d      	ldr	r3, [pc, #436]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a6c      	ldr	r2, [pc, #432]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d013      	beq.n	8001a66 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f9cf 	bl	8000de0 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a46:	f7ff f9cb 	bl	8000de0 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b64      	cmp	r3, #100	; 0x64
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e1db      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a58:	4b61      	ldr	r3, [pc, #388]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0xd6>
 8001a64:	e014      	b.n	8001a90 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a66:	f7ff f9bb 	bl	8000de0 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a6e:	f7ff f9b7 	bl	8000de0 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b64      	cmp	r3, #100	; 0x64
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e1c7      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a80:	4b57      	ldr	r3, [pc, #348]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f0      	bne.n	8001a6e <HAL_RCC_OscConfig+0xfe>
 8001a8c:	e000      	b.n	8001a90 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d06f      	beq.n	8001b7c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a9c:	4b50      	ldr	r3, [pc, #320]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d017      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aa8:	4b4d      	ldr	r3, [pc, #308]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d105      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ab4:	4b4a      	ldr	r3, [pc, #296]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00b      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac0:	4b47      	ldr	r3, [pc, #284]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	d11c      	bne.n	8001b06 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001acc:	4b44      	ldr	r3, [pc, #272]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d116      	bne.n	8001b06 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad8:	4b41      	ldr	r3, [pc, #260]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_OscConfig+0x180>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e18f      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af0:	4b3b      	ldr	r3, [pc, #236]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4938      	ldr	r1, [pc, #224]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b04:	e03a      	b.n	8001b7c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d020      	beq.n	8001b50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b0e:	4b35      	ldr	r3, [pc, #212]	; (8001be4 <HAL_RCC_OscConfig+0x274>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff f964 	bl	8000de0 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b1c:	f7ff f960 	bl	8000de0 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e170      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4925      	ldr	r1, [pc, #148]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
 8001b4e:	e015      	b.n	8001b7c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b50:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_RCC_OscConfig+0x274>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b56:	f7ff f943 	bl	8000de0 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5e:	f7ff f93f 	bl	8000de0 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e14f      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f0      	bne.n	8001b5e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d037      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d016      	beq.n	8001bbe <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b90:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_RCC_OscConfig+0x278>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b96:	f7ff f923 	bl	8000de0 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9e:	f7ff f91f 	bl	8000de0 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e12f      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x22e>
 8001bbc:	e01c      	b.n	8001bf8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_RCC_OscConfig+0x278>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff f90c 	bl	8000de0 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bca:	e00f      	b.n	8001bec <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bcc:	f7ff f908 	bl	8000de0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d908      	bls.n	8001bec <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e118      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	42470000 	.word	0x42470000
 8001be8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bec:	4b8a      	ldr	r3, [pc, #552]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e9      	bne.n	8001bcc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 8097 	beq.w	8001d34 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0a:	4b83      	ldr	r3, [pc, #524]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10f      	bne.n	8001c36 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b7f      	ldr	r3, [pc, #508]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a7e      	ldr	r2, [pc, #504]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b7c      	ldr	r3, [pc, #496]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c32:	2301      	movs	r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c36:	4b79      	ldr	r3, [pc, #484]	; (8001e1c <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d118      	bne.n	8001c74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c42:	4b76      	ldr	r3, [pc, #472]	; (8001e1c <HAL_RCC_OscConfig+0x4ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a75      	ldr	r2, [pc, #468]	; (8001e1c <HAL_RCC_OscConfig+0x4ac>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f8c7 	bl	8000de0 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7ff f8c3 	bl	8000de0 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e0d3      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	4b6c      	ldr	r3, [pc, #432]	; (8001e1c <HAL_RCC_OscConfig+0x4ac>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x31a>
 8001c7c:	4b66      	ldr	r3, [pc, #408]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c80:	4a65      	ldr	r2, [pc, #404]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6713      	str	r3, [r2, #112]	; 0x70
 8001c88:	e01c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x354>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x33c>
 8001c92:	4b61      	ldr	r3, [pc, #388]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	4a60      	ldr	r2, [pc, #384]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9e:	4b5e      	ldr	r3, [pc, #376]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	4a5d      	ldr	r2, [pc, #372]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8001caa:	e00b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x354>
 8001cac:	4b5a      	ldr	r3, [pc, #360]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb0:	4a59      	ldr	r2, [pc, #356]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb8:	4b57      	ldr	r3, [pc, #348]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a56      	ldr	r2, [pc, #344]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001cbe:	f023 0304 	bic.w	r3, r3, #4
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d015      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f888 	bl	8000de0 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f884 	bl	8000de0 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e092      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cea:	4b4b      	ldr	r3, [pc, #300]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0ee      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x364>
 8001cf6:	e014      	b.n	8001d22 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff f872 	bl	8000de0 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d00:	f7ff f86e 	bl	8000de0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e07c      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d16:	4b40      	ldr	r3, [pc, #256]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1ee      	bne.n	8001d00 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d28:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	4a3a      	ldr	r2, [pc, #232]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d068      	beq.n	8001e0e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d3c:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d060      	beq.n	8001e0a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d145      	bne.n	8001ddc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d50:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <HAL_RCC_OscConfig+0x4b0>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d56:	f7ff f843 	bl	8000de0 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7ff f83f 	bl	8000de0 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e04f      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d70:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69da      	ldr	r2, [r3, #28]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	019b      	lsls	r3, r3, #6
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	085b      	lsrs	r3, r3, #1
 8001d94:	3b01      	subs	r3, #1
 8001d96:	041b      	lsls	r3, r3, #16
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	061b      	lsls	r3, r3, #24
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	071b      	lsls	r3, r3, #28
 8001da8:	491b      	ldr	r1, [pc, #108]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <HAL_RCC_OscConfig+0x4b0>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff f814 	bl	8000de0 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7ff f810 	bl	8000de0 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e020      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x44c>
 8001dda:	e018      	b.n	8001e0e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_RCC_OscConfig+0x4b0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7fe fffd 	bl	8000de0 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dea:	f7fe fff9 	bl	8000de0 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e009      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_RCC_OscConfig+0x4a8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f0      	bne.n	8001dea <HAL_RCC_OscConfig+0x47a>
 8001e08:	e001      	b.n	8001e0e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	42470060 	.word	0x42470060

08001e24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e056      	b.n	8001ee4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d106      	bne.n	8001e56 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7fe fdab 	bl	80009ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e6c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	ea42 0103 	orr.w	r1, r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	0c1b      	lsrs	r3, r3, #16
 8001eb4:	f003 0104 	and.w	r1, r3, #4
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	69da      	ldr	r2, [r3, #28]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ed2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_SPI_Transmit+0x22>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e11e      	b.n	800214c <HAL_SPI_Transmit+0x260>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f16:	f7fe ff63 	bl	8000de0 <HAL_GetTick>
 8001f1a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d002      	beq.n	8001f32 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f30:	e103      	b.n	800213a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_SPI_Transmit+0x52>
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f42:	e0fa      	b.n	800213a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2203      	movs	r2, #3
 8001f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	88fa      	ldrh	r2, [r7, #6]
 8001f5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	88fa      	ldrh	r2, [r7, #6]
 8001f62:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f8a:	d107      	bne.n	8001f9c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa6:	2b40      	cmp	r3, #64	; 0x40
 8001fa8:	d007      	beq.n	8001fba <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fc2:	d14b      	bne.n	800205c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <HAL_SPI_Transmit+0xe6>
 8001fcc:	8afb      	ldrh	r3, [r7, #22]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d13e      	bne.n	8002050 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	881a      	ldrh	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	1c9a      	adds	r2, r3, #2
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ff6:	e02b      	b.n	8002050 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b02      	cmp	r3, #2
 8002004:	d112      	bne.n	800202c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	881a      	ldrh	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	1c9a      	adds	r2, r3, #2
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002020:	b29b      	uxth	r3, r3
 8002022:	3b01      	subs	r3, #1
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	86da      	strh	r2, [r3, #54]	; 0x36
 800202a:	e011      	b.n	8002050 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800202c:	f7fe fed8 	bl	8000de0 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d803      	bhi.n	8002044 <HAL_SPI_Transmit+0x158>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002042:	d102      	bne.n	800204a <HAL_SPI_Transmit+0x15e>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800204e:	e074      	b.n	800213a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1ce      	bne.n	8001ff8 <HAL_SPI_Transmit+0x10c>
 800205a:	e04c      	b.n	80020f6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_SPI_Transmit+0x17e>
 8002064:	8afb      	ldrh	r3, [r7, #22]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d140      	bne.n	80020ec <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	330c      	adds	r3, #12
 8002074:	7812      	ldrb	r2, [r2, #0]
 8002076:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002090:	e02c      	b.n	80020ec <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b02      	cmp	r3, #2
 800209e:	d113      	bne.n	80020c8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	330c      	adds	r3, #12
 80020aa:	7812      	ldrb	r2, [r2, #0]
 80020ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80020c6:	e011      	b.n	80020ec <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020c8:	f7fe fe8a 	bl	8000de0 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d803      	bhi.n	80020e0 <HAL_SPI_Transmit+0x1f4>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020de:	d102      	bne.n	80020e6 <HAL_SPI_Transmit+0x1fa>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020ea:	e026      	b.n	800213a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1cd      	bne.n	8002092 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	6839      	ldr	r1, [r7, #0]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 fcd2 	bl	8002aa4 <SPI_EndRxTxTransaction>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2220      	movs	r2, #32
 800210a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10a      	bne.n	800212a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	77fb      	strb	r3, [r7, #31]
 8002136:	e000      	b.n	800213a <HAL_SPI_Transmit+0x24e>
  }

error:
 8002138:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800214a:	7ffb      	ldrb	r3, [r7, #31]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af02      	add	r7, sp, #8
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002170:	d112      	bne.n	8002198 <HAL_SPI_Receive+0x44>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10e      	bne.n	8002198 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2204      	movs	r2, #4
 800217e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002182:	88fa      	ldrh	r2, [r7, #6]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f8e9 	bl	8002366 <HAL_SPI_TransmitReceive>
 8002194:	4603      	mov	r3, r0
 8002196:	e0e2      	b.n	800235e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_SPI_Receive+0x52>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e0db      	b.n	800235e <HAL_SPI_Receive+0x20a>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021ae:	f7fe fe17 	bl	8000de0 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d002      	beq.n	80021c6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80021c0:	2302      	movs	r3, #2
 80021c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021c4:	e0c2      	b.n	800234c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <HAL_SPI_Receive+0x7e>
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d102      	bne.n	80021d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021d6:	e0b9      	b.n	800234c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2204      	movs	r2, #4
 80021dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	88fa      	ldrh	r2, [r7, #6]
 80021f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800221e:	d107      	bne.n	8002230 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800222e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223a:	2b40      	cmp	r3, #64	; 0x40
 800223c:	d007      	beq.n	800224e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800224c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d162      	bne.n	800231c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002256:	e02e      	b.n	80022b6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d115      	bne.n	8002292 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f103 020c 	add.w	r2, r3, #12
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	7812      	ldrb	r2, [r2, #0]
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002290:	e011      	b.n	80022b6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002292:	f7fe fda5 	bl	8000de0 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d803      	bhi.n	80022aa <HAL_SPI_Receive+0x156>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d102      	bne.n	80022b0 <HAL_SPI_Receive+0x15c>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80022b4:	e04a      	b.n	800234c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1cb      	bne.n	8002258 <HAL_SPI_Receive+0x104>
 80022c0:	e031      	b.n	8002326 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d113      	bne.n	80022f8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022da:	b292      	uxth	r2, r2
 80022dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e2:	1c9a      	adds	r2, r3, #2
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022f6:	e011      	b.n	800231c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022f8:	f7fe fd72 	bl	8000de0 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d803      	bhi.n	8002310 <HAL_SPI_Receive+0x1bc>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230e:	d102      	bne.n	8002316 <HAL_SPI_Receive+0x1c2>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d102      	bne.n	800231c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	75fb      	strb	r3, [r7, #23]
          goto error;
 800231a:	e017      	b.n	800234c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1cd      	bne.n	80022c2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	6839      	ldr	r1, [r7, #0]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 fb54 	bl	80029d8 <SPI_EndRxTransaction>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2220      	movs	r2, #32
 800233a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	75fb      	strb	r3, [r7, #23]
 8002348:	e000      	b.n	800234c <HAL_SPI_Receive+0x1f8>
  }

error :
 800234a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800235c:	7dfb      	ldrb	r3, [r7, #23]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b08c      	sub	sp, #48	; 0x30
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002374:	2301      	movs	r3, #1
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_SPI_TransmitReceive+0x26>
 8002388:	2302      	movs	r3, #2
 800238a:	e18a      	b.n	80026a2 <HAL_SPI_TransmitReceive+0x33c>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002394:	f7fe fd24 	bl	8000de0 <HAL_GetTick>
 8002398:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80023aa:	887b      	ldrh	r3, [r7, #2]
 80023ac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d00f      	beq.n	80023d6 <HAL_SPI_TransmitReceive+0x70>
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023bc:	d107      	bne.n	80023ce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d103      	bne.n	80023ce <HAL_SPI_TransmitReceive+0x68>
 80023c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d003      	beq.n	80023d6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80023ce:	2302      	movs	r3, #2
 80023d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023d4:	e15b      	b.n	800268e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_SPI_TransmitReceive+0x82>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <HAL_SPI_TransmitReceive+0x82>
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d103      	bne.n	80023f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023ee:	e14e      	b.n	800268e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d003      	beq.n	8002404 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2205      	movs	r2, #5
 8002400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	887a      	ldrh	r2, [r7, #2]
 800241a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	887a      	ldrh	r2, [r7, #2]
 8002426:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002444:	2b40      	cmp	r3, #64	; 0x40
 8002446:	d007      	beq.n	8002458 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002456:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002460:	d178      	bne.n	8002554 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <HAL_SPI_TransmitReceive+0x10a>
 800246a:	8b7b      	ldrh	r3, [r7, #26]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d166      	bne.n	800253e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	881a      	ldrh	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	1c9a      	adds	r2, r3, #2
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002494:	e053      	b.n	800253e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d11b      	bne.n	80024dc <HAL_SPI_TransmitReceive+0x176>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d016      	beq.n	80024dc <HAL_SPI_TransmitReceive+0x176>
 80024ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d113      	bne.n	80024dc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	881a      	ldrh	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	1c9a      	adds	r2, r3, #2
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d119      	bne.n	800251e <HAL_SPI_TransmitReceive+0x1b8>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d014      	beq.n	800251e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	b292      	uxth	r2, r2
 8002500:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	1c9a      	adds	r2, r3, #2
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002510:	b29b      	uxth	r3, r3
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800251a:	2301      	movs	r3, #1
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800251e:	f7fe fc5f 	bl	8000de0 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800252a:	429a      	cmp	r2, r3
 800252c:	d807      	bhi.n	800253e <HAL_SPI_TransmitReceive+0x1d8>
 800252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d003      	beq.n	800253e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800253c:	e0a7      	b.n	800268e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1a6      	bne.n	8002496 <HAL_SPI_TransmitReceive+0x130>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1a1      	bne.n	8002496 <HAL_SPI_TransmitReceive+0x130>
 8002552:	e07c      	b.n	800264e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HAL_SPI_TransmitReceive+0x1fc>
 800255c:	8b7b      	ldrh	r3, [r7, #26]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d16b      	bne.n	800263a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	330c      	adds	r3, #12
 800256c:	7812      	ldrb	r2, [r2, #0]
 800256e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002588:	e057      	b.n	800263a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b02      	cmp	r3, #2
 8002596:	d11c      	bne.n	80025d2 <HAL_SPI_TransmitReceive+0x26c>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d017      	beq.n	80025d2 <HAL_SPI_TransmitReceive+0x26c>
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d114      	bne.n	80025d2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	330c      	adds	r3, #12
 80025b2:	7812      	ldrb	r2, [r2, #0]
 80025b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d119      	bne.n	8002614 <HAL_SPI_TransmitReceive+0x2ae>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d014      	beq.n	8002614 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002610:	2301      	movs	r3, #1
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002614:	f7fe fbe4 	bl	8000de0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002620:	429a      	cmp	r2, r3
 8002622:	d803      	bhi.n	800262c <HAL_SPI_TransmitReceive+0x2c6>
 8002624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262a:	d102      	bne.n	8002632 <HAL_SPI_TransmitReceive+0x2cc>
 800262c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002638:	e029      	b.n	800268e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1a2      	bne.n	800258a <HAL_SPI_TransmitReceive+0x224>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d19d      	bne.n	800258a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800264e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002650:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fa26 	bl	8002aa4 <SPI_EndRxTxTransaction>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2220      	movs	r2, #32
 8002668:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800266a:	e010      	b.n	800268e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10b      	bne.n	800268c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	e000      	b.n	800268e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800268c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800269e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3730      	adds	r7, #48	; 0x30
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	099b      	lsrs	r3, r3, #6
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10f      	bne.n	80026f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	4798      	blx	r3
    return;
 80026ee:	e0d8      	b.n	80028a2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_SPI_IRQHandler+0x66>
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	09db      	lsrs	r3, r3, #7
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d004      	beq.n	8002712 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
    return;
 8002710:	e0c7      	b.n	80028a2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10c      	bne.n	8002738 <HAL_SPI_IRQHandler+0x8c>
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	099b      	lsrs	r3, r3, #6
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80b5 	beq.w	80028a2 <HAL_SPI_IRQHandler+0x1f6>
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80ae 	beq.w	80028a2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	099b      	lsrs	r3, r3, #6
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d023      	beq.n	800279a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b03      	cmp	r3, #3
 800275c:	d011      	beq.n	8002782 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	f043 0204 	orr.w	r2, r3, #4
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	e00b      	b.n	800279a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	693b      	ldr	r3, [r7, #16]
        return;
 8002798:	e083      	b.n	80028a2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d014      	beq.n	80027d0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00c      	beq.n	80027f6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	f043 0208 	orr.w	r2, r3, #8
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d050      	beq.n	80028a0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800280c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d104      	bne.n	800282a <HAL_SPI_IRQHandler+0x17e>
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d034      	beq.n	8002894 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0203 	bic.w	r2, r2, #3
 8002838:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d011      	beq.n	8002866 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002846:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <HAL_SPI_IRQHandler+0x1fc>)
 8002848:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fc05 	bl	800105e <HAL_DMA_Abort_IT>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286a:	2b00      	cmp	r3, #0
 800286c:	d016      	beq.n	800289c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002872:	4a0d      	ldr	r2, [pc, #52]	; (80028a8 <HAL_SPI_IRQHandler+0x1fc>)
 8002874:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fbef 	bl	800105e <HAL_DMA_Abort_IT>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002892:	e003      	b.n	800289c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f809 	bl	80028ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800289a:	e000      	b.n	800289e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800289c:	bf00      	nop
    return;
 800289e:	bf00      	nop
 80028a0:	bf00      	nop
  }
}
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	080028dd 	.word	0x080028dd

080028ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028ce:	b2db      	uxtb	r3, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f7ff ffd8 	bl	80028ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002914:	e04c      	b.n	80029b0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291c:	d048      	beq.n	80029b0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800291e:	f7fe fa5f 	bl	8000de0 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d902      	bls.n	8002934 <SPI_WaitFlagStateUntilTimeout+0x30>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d13d      	bne.n	80029b0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002942:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800294c:	d111      	bne.n	8002972 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002956:	d004      	beq.n	8002962 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002960:	d107      	bne.n	8002972 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002970:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297a:	d10f      	bne.n	800299c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800299a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e00f      	b.n	80029d0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4013      	ands	r3, r2
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	429a      	cmp	r2, r3
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d1a3      	bne.n	8002916 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ec:	d111      	bne.n	8002a12 <SPI_EndRxTransaction+0x3a>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029f6:	d004      	beq.n	8002a02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a00:	d107      	bne.n	8002a12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a10:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a1a:	d12a      	bne.n	8002a72 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a24:	d012      	beq.n	8002a4c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f7ff ff67 	bl	8002904 <SPI_WaitFlagStateUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d02d      	beq.n	8002a98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	f043 0220 	orr.w	r2, r3, #32
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e026      	b.n	8002a9a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2200      	movs	r2, #0
 8002a54:	2101      	movs	r1, #1
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f7ff ff54 	bl	8002904 <SPI_WaitFlagStateUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01a      	beq.n	8002a98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	f043 0220 	orr.w	r2, r3, #32
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e013      	b.n	8002a9a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7ff ff41 	bl	8002904 <SPI_WaitFlagStateUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8c:	f043 0220 	orr.w	r2, r3, #32
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e000      	b.n	8002a9a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <SPI_EndRxTxTransaction+0x7c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1b      	ldr	r2, [pc, #108]	; (8002b24 <SPI_EndRxTxTransaction+0x80>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0d5b      	lsrs	r3, r3, #21
 8002abc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ac0:	fb02 f303 	mul.w	r3, r2, r3
 8002ac4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ace:	d112      	bne.n	8002af6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f7ff ff12 	bl	8002904 <SPI_WaitFlagStateUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d016      	beq.n	8002b14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	f043 0220 	orr.w	r2, r3, #32
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e00f      	b.n	8002b16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0c:	2b80      	cmp	r3, #128	; 0x80
 8002b0e:	d0f2      	beq.n	8002af6 <SPI_EndRxTxTransaction+0x52>
 8002b10:	e000      	b.n	8002b14 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b12:	bf00      	nop
  }

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000000 	.word	0x20000000
 8002b24:	165e9f81 	.word	0x165e9f81

08002b28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e03f      	b.n	8002bba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fd ff7c 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2224      	movs	r2, #36	; 0x24
 8002b58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f90b 	bl	8002d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ba0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b088      	sub	sp, #32
 8002bc6:	af02      	add	r7, sp, #8
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	f040 8083 	bne.w	8002cea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_UART_Transmit+0x2e>
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e07b      	b.n	8002cec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_UART_Transmit+0x40>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e074      	b.n	8002cec <HAL_UART_Transmit+0x12a>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2221      	movs	r2, #33	; 0x21
 8002c14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002c18:	f7fe f8e2 	bl	8000de0 <HAL_GetTick>
 8002c1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	88fa      	ldrh	r2, [r7, #6]
 8002c28:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002c32:	e042      	b.n	8002cba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4a:	d122      	bne.n	8002c92 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2200      	movs	r2, #0
 8002c54:	2180      	movs	r1, #128	; 0x80
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f84c 	bl	8002cf4 <UART_WaitOnFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e042      	b.n	8002cec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c78:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d103      	bne.n	8002c8a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3302      	adds	r3, #2
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	e017      	b.n	8002cba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	e013      	b.n	8002cba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f829 	bl	8002cf4 <UART_WaitOnFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e01f      	b.n	8002cec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	60ba      	str	r2, [r7, #8]
 8002cb2:	781a      	ldrb	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1b7      	bne.n	8002c34 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2140      	movs	r1, #64	; 0x40
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f810 	bl	8002cf4 <UART_WaitOnFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e006      	b.n	8002cec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e000      	b.n	8002cec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002cea:	2302      	movs	r3, #2
  }
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d04:	e02c      	b.n	8002d60 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0c:	d028      	beq.n	8002d60 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d007      	beq.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d14:	f7fe f864 	bl	8000de0 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d21d      	bcs.n	8002d60 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d32:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e00f      	b.n	8002d80 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d0c3      	beq.n	8002d06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002dca:	f023 030c 	bic.w	r3, r3, #12
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	68f9      	ldr	r1, [r7, #12]
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df6:	f040 818b 	bne.w	8003110 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4ac1      	ldr	r2, [pc, #772]	; (8003104 <UART_SetConfig+0x37c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d005      	beq.n	8002e10 <UART_SetConfig+0x88>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4abf      	ldr	r2, [pc, #764]	; (8003108 <UART_SetConfig+0x380>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	f040 80bd 	bne.w	8002f8a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e10:	f7fe fbfa 	bl	8001608 <HAL_RCC_GetPCLK2Freq>
 8002e14:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	461d      	mov	r5, r3
 8002e1a:	f04f 0600 	mov.w	r6, #0
 8002e1e:	46a8      	mov	r8, r5
 8002e20:	46b1      	mov	r9, r6
 8002e22:	eb18 0308 	adds.w	r3, r8, r8
 8002e26:	eb49 0409 	adc.w	r4, r9, r9
 8002e2a:	4698      	mov	r8, r3
 8002e2c:	46a1      	mov	r9, r4
 8002e2e:	eb18 0805 	adds.w	r8, r8, r5
 8002e32:	eb49 0906 	adc.w	r9, r9, r6
 8002e36:	f04f 0100 	mov.w	r1, #0
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e4a:	4688      	mov	r8, r1
 8002e4c:	4691      	mov	r9, r2
 8002e4e:	eb18 0005 	adds.w	r0, r8, r5
 8002e52:	eb49 0106 	adc.w	r1, r9, r6
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	461d      	mov	r5, r3
 8002e5c:	f04f 0600 	mov.w	r6, #0
 8002e60:	196b      	adds	r3, r5, r5
 8002e62:	eb46 0406 	adc.w	r4, r6, r6
 8002e66:	461a      	mov	r2, r3
 8002e68:	4623      	mov	r3, r4
 8002e6a:	f7fd fa21 	bl	80002b0 <__aeabi_uldivmod>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	460c      	mov	r4, r1
 8002e72:	461a      	mov	r2, r3
 8002e74:	4ba5      	ldr	r3, [pc, #660]	; (800310c <UART_SetConfig+0x384>)
 8002e76:	fba3 2302 	umull	r2, r3, r3, r2
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	461d      	mov	r5, r3
 8002e84:	f04f 0600 	mov.w	r6, #0
 8002e88:	46a9      	mov	r9, r5
 8002e8a:	46b2      	mov	sl, r6
 8002e8c:	eb19 0309 	adds.w	r3, r9, r9
 8002e90:	eb4a 040a 	adc.w	r4, sl, sl
 8002e94:	4699      	mov	r9, r3
 8002e96:	46a2      	mov	sl, r4
 8002e98:	eb19 0905 	adds.w	r9, r9, r5
 8002e9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ea0:	f04f 0100 	mov.w	r1, #0
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002eb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002eb4:	4689      	mov	r9, r1
 8002eb6:	4692      	mov	sl, r2
 8002eb8:	eb19 0005 	adds.w	r0, r9, r5
 8002ebc:	eb4a 0106 	adc.w	r1, sl, r6
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	461d      	mov	r5, r3
 8002ec6:	f04f 0600 	mov.w	r6, #0
 8002eca:	196b      	adds	r3, r5, r5
 8002ecc:	eb46 0406 	adc.w	r4, r6, r6
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4623      	mov	r3, r4
 8002ed4:	f7fd f9ec 	bl	80002b0 <__aeabi_uldivmod>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	460c      	mov	r4, r1
 8002edc:	461a      	mov	r2, r3
 8002ede:	4b8b      	ldr	r3, [pc, #556]	; (800310c <UART_SetConfig+0x384>)
 8002ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	2164      	movs	r1, #100	; 0x64
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	3332      	adds	r3, #50	; 0x32
 8002ef2:	4a86      	ldr	r2, [pc, #536]	; (800310c <UART_SetConfig+0x384>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f00:	4498      	add	r8, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	461d      	mov	r5, r3
 8002f06:	f04f 0600 	mov.w	r6, #0
 8002f0a:	46a9      	mov	r9, r5
 8002f0c:	46b2      	mov	sl, r6
 8002f0e:	eb19 0309 	adds.w	r3, r9, r9
 8002f12:	eb4a 040a 	adc.w	r4, sl, sl
 8002f16:	4699      	mov	r9, r3
 8002f18:	46a2      	mov	sl, r4
 8002f1a:	eb19 0905 	adds.w	r9, r9, r5
 8002f1e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f22:	f04f 0100 	mov.w	r1, #0
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f36:	4689      	mov	r9, r1
 8002f38:	4692      	mov	sl, r2
 8002f3a:	eb19 0005 	adds.w	r0, r9, r5
 8002f3e:	eb4a 0106 	adc.w	r1, sl, r6
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	461d      	mov	r5, r3
 8002f48:	f04f 0600 	mov.w	r6, #0
 8002f4c:	196b      	adds	r3, r5, r5
 8002f4e:	eb46 0406 	adc.w	r4, r6, r6
 8002f52:	461a      	mov	r2, r3
 8002f54:	4623      	mov	r3, r4
 8002f56:	f7fd f9ab 	bl	80002b0 <__aeabi_uldivmod>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b6a      	ldr	r3, [pc, #424]	; (800310c <UART_SetConfig+0x384>)
 8002f62:	fba3 1302 	umull	r1, r3, r3, r2
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2164      	movs	r1, #100	; 0x64
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	3332      	adds	r3, #50	; 0x32
 8002f74:	4a65      	ldr	r2, [pc, #404]	; (800310c <UART_SetConfig+0x384>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	f003 0207 	and.w	r2, r3, #7
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4442      	add	r2, r8
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	e26f      	b.n	800346a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f8a:	f7fe fb29 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
 8002f8e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	461d      	mov	r5, r3
 8002f94:	f04f 0600 	mov.w	r6, #0
 8002f98:	46a8      	mov	r8, r5
 8002f9a:	46b1      	mov	r9, r6
 8002f9c:	eb18 0308 	adds.w	r3, r8, r8
 8002fa0:	eb49 0409 	adc.w	r4, r9, r9
 8002fa4:	4698      	mov	r8, r3
 8002fa6:	46a1      	mov	r9, r4
 8002fa8:	eb18 0805 	adds.w	r8, r8, r5
 8002fac:	eb49 0906 	adc.w	r9, r9, r6
 8002fb0:	f04f 0100 	mov.w	r1, #0
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fbc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fc0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fc4:	4688      	mov	r8, r1
 8002fc6:	4691      	mov	r9, r2
 8002fc8:	eb18 0005 	adds.w	r0, r8, r5
 8002fcc:	eb49 0106 	adc.w	r1, r9, r6
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	461d      	mov	r5, r3
 8002fd6:	f04f 0600 	mov.w	r6, #0
 8002fda:	196b      	adds	r3, r5, r5
 8002fdc:	eb46 0406 	adc.w	r4, r6, r6
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4623      	mov	r3, r4
 8002fe4:	f7fd f964 	bl	80002b0 <__aeabi_uldivmod>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	460c      	mov	r4, r1
 8002fec:	461a      	mov	r2, r3
 8002fee:	4b47      	ldr	r3, [pc, #284]	; (800310c <UART_SetConfig+0x384>)
 8002ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	461d      	mov	r5, r3
 8002ffe:	f04f 0600 	mov.w	r6, #0
 8003002:	46a9      	mov	r9, r5
 8003004:	46b2      	mov	sl, r6
 8003006:	eb19 0309 	adds.w	r3, r9, r9
 800300a:	eb4a 040a 	adc.w	r4, sl, sl
 800300e:	4699      	mov	r9, r3
 8003010:	46a2      	mov	sl, r4
 8003012:	eb19 0905 	adds.w	r9, r9, r5
 8003016:	eb4a 0a06 	adc.w	sl, sl, r6
 800301a:	f04f 0100 	mov.w	r1, #0
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003026:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800302a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800302e:	4689      	mov	r9, r1
 8003030:	4692      	mov	sl, r2
 8003032:	eb19 0005 	adds.w	r0, r9, r5
 8003036:	eb4a 0106 	adc.w	r1, sl, r6
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	461d      	mov	r5, r3
 8003040:	f04f 0600 	mov.w	r6, #0
 8003044:	196b      	adds	r3, r5, r5
 8003046:	eb46 0406 	adc.w	r4, r6, r6
 800304a:	461a      	mov	r2, r3
 800304c:	4623      	mov	r3, r4
 800304e:	f7fd f92f 	bl	80002b0 <__aeabi_uldivmod>
 8003052:	4603      	mov	r3, r0
 8003054:	460c      	mov	r4, r1
 8003056:	461a      	mov	r2, r3
 8003058:	4b2c      	ldr	r3, [pc, #176]	; (800310c <UART_SetConfig+0x384>)
 800305a:	fba3 1302 	umull	r1, r3, r3, r2
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	2164      	movs	r1, #100	; 0x64
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	3332      	adds	r3, #50	; 0x32
 800306c:	4a27      	ldr	r2, [pc, #156]	; (800310c <UART_SetConfig+0x384>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800307a:	4498      	add	r8, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	461d      	mov	r5, r3
 8003080:	f04f 0600 	mov.w	r6, #0
 8003084:	46a9      	mov	r9, r5
 8003086:	46b2      	mov	sl, r6
 8003088:	eb19 0309 	adds.w	r3, r9, r9
 800308c:	eb4a 040a 	adc.w	r4, sl, sl
 8003090:	4699      	mov	r9, r3
 8003092:	46a2      	mov	sl, r4
 8003094:	eb19 0905 	adds.w	r9, r9, r5
 8003098:	eb4a 0a06 	adc.w	sl, sl, r6
 800309c:	f04f 0100 	mov.w	r1, #0
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030b0:	4689      	mov	r9, r1
 80030b2:	4692      	mov	sl, r2
 80030b4:	eb19 0005 	adds.w	r0, r9, r5
 80030b8:	eb4a 0106 	adc.w	r1, sl, r6
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	461d      	mov	r5, r3
 80030c2:	f04f 0600 	mov.w	r6, #0
 80030c6:	196b      	adds	r3, r5, r5
 80030c8:	eb46 0406 	adc.w	r4, r6, r6
 80030cc:	461a      	mov	r2, r3
 80030ce:	4623      	mov	r3, r4
 80030d0:	f7fd f8ee 	bl	80002b0 <__aeabi_uldivmod>
 80030d4:	4603      	mov	r3, r0
 80030d6:	460c      	mov	r4, r1
 80030d8:	461a      	mov	r2, r3
 80030da:	4b0c      	ldr	r3, [pc, #48]	; (800310c <UART_SetConfig+0x384>)
 80030dc:	fba3 1302 	umull	r1, r3, r3, r2
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	2164      	movs	r1, #100	; 0x64
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	3332      	adds	r3, #50	; 0x32
 80030ee:	4a07      	ldr	r2, [pc, #28]	; (800310c <UART_SetConfig+0x384>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	f003 0207 	and.w	r2, r3, #7
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4442      	add	r2, r8
 8003100:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003102:	e1b2      	b.n	800346a <UART_SetConfig+0x6e2>
 8003104:	40011000 	.word	0x40011000
 8003108:	40011400 	.word	0x40011400
 800310c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4ad7      	ldr	r2, [pc, #860]	; (8003474 <UART_SetConfig+0x6ec>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d005      	beq.n	8003126 <UART_SetConfig+0x39e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4ad6      	ldr	r2, [pc, #856]	; (8003478 <UART_SetConfig+0x6f0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	f040 80d1 	bne.w	80032c8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003126:	f7fe fa6f 	bl	8001608 <HAL_RCC_GetPCLK2Freq>
 800312a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	469a      	mov	sl, r3
 8003130:	f04f 0b00 	mov.w	fp, #0
 8003134:	46d0      	mov	r8, sl
 8003136:	46d9      	mov	r9, fp
 8003138:	eb18 0308 	adds.w	r3, r8, r8
 800313c:	eb49 0409 	adc.w	r4, r9, r9
 8003140:	4698      	mov	r8, r3
 8003142:	46a1      	mov	r9, r4
 8003144:	eb18 080a 	adds.w	r8, r8, sl
 8003148:	eb49 090b 	adc.w	r9, r9, fp
 800314c:	f04f 0100 	mov.w	r1, #0
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003158:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800315c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003160:	4688      	mov	r8, r1
 8003162:	4691      	mov	r9, r2
 8003164:	eb1a 0508 	adds.w	r5, sl, r8
 8003168:	eb4b 0609 	adc.w	r6, fp, r9
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4619      	mov	r1, r3
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	f04f 0400 	mov.w	r4, #0
 800317e:	0094      	lsls	r4, r2, #2
 8003180:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003184:	008b      	lsls	r3, r1, #2
 8003186:	461a      	mov	r2, r3
 8003188:	4623      	mov	r3, r4
 800318a:	4628      	mov	r0, r5
 800318c:	4631      	mov	r1, r6
 800318e:	f7fd f88f 	bl	80002b0 <__aeabi_uldivmod>
 8003192:	4603      	mov	r3, r0
 8003194:	460c      	mov	r4, r1
 8003196:	461a      	mov	r2, r3
 8003198:	4bb8      	ldr	r3, [pc, #736]	; (800347c <UART_SetConfig+0x6f4>)
 800319a:	fba3 2302 	umull	r2, r3, r3, r2
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	469b      	mov	fp, r3
 80031a8:	f04f 0c00 	mov.w	ip, #0
 80031ac:	46d9      	mov	r9, fp
 80031ae:	46e2      	mov	sl, ip
 80031b0:	eb19 0309 	adds.w	r3, r9, r9
 80031b4:	eb4a 040a 	adc.w	r4, sl, sl
 80031b8:	4699      	mov	r9, r3
 80031ba:	46a2      	mov	sl, r4
 80031bc:	eb19 090b 	adds.w	r9, r9, fp
 80031c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031c4:	f04f 0100 	mov.w	r1, #0
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031d8:	4689      	mov	r9, r1
 80031da:	4692      	mov	sl, r2
 80031dc:	eb1b 0509 	adds.w	r5, fp, r9
 80031e0:	eb4c 060a 	adc.w	r6, ip, sl
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4619      	mov	r1, r3
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	f04f 0400 	mov.w	r4, #0
 80031f6:	0094      	lsls	r4, r2, #2
 80031f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031fc:	008b      	lsls	r3, r1, #2
 80031fe:	461a      	mov	r2, r3
 8003200:	4623      	mov	r3, r4
 8003202:	4628      	mov	r0, r5
 8003204:	4631      	mov	r1, r6
 8003206:	f7fd f853 	bl	80002b0 <__aeabi_uldivmod>
 800320a:	4603      	mov	r3, r0
 800320c:	460c      	mov	r4, r1
 800320e:	461a      	mov	r2, r3
 8003210:	4b9a      	ldr	r3, [pc, #616]	; (800347c <UART_SetConfig+0x6f4>)
 8003212:	fba3 1302 	umull	r1, r3, r3, r2
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	2164      	movs	r1, #100	; 0x64
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	3332      	adds	r3, #50	; 0x32
 8003224:	4a95      	ldr	r2, [pc, #596]	; (800347c <UART_SetConfig+0x6f4>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003230:	4498      	add	r8, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	469b      	mov	fp, r3
 8003236:	f04f 0c00 	mov.w	ip, #0
 800323a:	46d9      	mov	r9, fp
 800323c:	46e2      	mov	sl, ip
 800323e:	eb19 0309 	adds.w	r3, r9, r9
 8003242:	eb4a 040a 	adc.w	r4, sl, sl
 8003246:	4699      	mov	r9, r3
 8003248:	46a2      	mov	sl, r4
 800324a:	eb19 090b 	adds.w	r9, r9, fp
 800324e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003252:	f04f 0100 	mov.w	r1, #0
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800325e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003262:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003266:	4689      	mov	r9, r1
 8003268:	4692      	mov	sl, r2
 800326a:	eb1b 0509 	adds.w	r5, fp, r9
 800326e:	eb4c 060a 	adc.w	r6, ip, sl
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4619      	mov	r1, r3
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	f04f 0400 	mov.w	r4, #0
 8003284:	0094      	lsls	r4, r2, #2
 8003286:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800328a:	008b      	lsls	r3, r1, #2
 800328c:	461a      	mov	r2, r3
 800328e:	4623      	mov	r3, r4
 8003290:	4628      	mov	r0, r5
 8003292:	4631      	mov	r1, r6
 8003294:	f7fd f80c 	bl	80002b0 <__aeabi_uldivmod>
 8003298:	4603      	mov	r3, r0
 800329a:	460c      	mov	r4, r1
 800329c:	461a      	mov	r2, r3
 800329e:	4b77      	ldr	r3, [pc, #476]	; (800347c <UART_SetConfig+0x6f4>)
 80032a0:	fba3 1302 	umull	r1, r3, r3, r2
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	2164      	movs	r1, #100	; 0x64
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	3332      	adds	r3, #50	; 0x32
 80032b2:	4a72      	ldr	r2, [pc, #456]	; (800347c <UART_SetConfig+0x6f4>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	f003 020f 	and.w	r2, r3, #15
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4442      	add	r2, r8
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	e0d0      	b.n	800346a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80032c8:	f7fe f98a 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
 80032cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	469a      	mov	sl, r3
 80032d2:	f04f 0b00 	mov.w	fp, #0
 80032d6:	46d0      	mov	r8, sl
 80032d8:	46d9      	mov	r9, fp
 80032da:	eb18 0308 	adds.w	r3, r8, r8
 80032de:	eb49 0409 	adc.w	r4, r9, r9
 80032e2:	4698      	mov	r8, r3
 80032e4:	46a1      	mov	r9, r4
 80032e6:	eb18 080a 	adds.w	r8, r8, sl
 80032ea:	eb49 090b 	adc.w	r9, r9, fp
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003302:	4688      	mov	r8, r1
 8003304:	4691      	mov	r9, r2
 8003306:	eb1a 0508 	adds.w	r5, sl, r8
 800330a:	eb4b 0609 	adc.w	r6, fp, r9
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4619      	mov	r1, r3
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	f04f 0400 	mov.w	r4, #0
 8003320:	0094      	lsls	r4, r2, #2
 8003322:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003326:	008b      	lsls	r3, r1, #2
 8003328:	461a      	mov	r2, r3
 800332a:	4623      	mov	r3, r4
 800332c:	4628      	mov	r0, r5
 800332e:	4631      	mov	r1, r6
 8003330:	f7fc ffbe 	bl	80002b0 <__aeabi_uldivmod>
 8003334:	4603      	mov	r3, r0
 8003336:	460c      	mov	r4, r1
 8003338:	461a      	mov	r2, r3
 800333a:	4b50      	ldr	r3, [pc, #320]	; (800347c <UART_SetConfig+0x6f4>)
 800333c:	fba3 2302 	umull	r2, r3, r3, r2
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	469b      	mov	fp, r3
 800334a:	f04f 0c00 	mov.w	ip, #0
 800334e:	46d9      	mov	r9, fp
 8003350:	46e2      	mov	sl, ip
 8003352:	eb19 0309 	adds.w	r3, r9, r9
 8003356:	eb4a 040a 	adc.w	r4, sl, sl
 800335a:	4699      	mov	r9, r3
 800335c:	46a2      	mov	sl, r4
 800335e:	eb19 090b 	adds.w	r9, r9, fp
 8003362:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003366:	f04f 0100 	mov.w	r1, #0
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003372:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003376:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800337a:	4689      	mov	r9, r1
 800337c:	4692      	mov	sl, r2
 800337e:	eb1b 0509 	adds.w	r5, fp, r9
 8003382:	eb4c 060a 	adc.w	r6, ip, sl
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4619      	mov	r1, r3
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	f04f 0400 	mov.w	r4, #0
 8003398:	0094      	lsls	r4, r2, #2
 800339a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800339e:	008b      	lsls	r3, r1, #2
 80033a0:	461a      	mov	r2, r3
 80033a2:	4623      	mov	r3, r4
 80033a4:	4628      	mov	r0, r5
 80033a6:	4631      	mov	r1, r6
 80033a8:	f7fc ff82 	bl	80002b0 <__aeabi_uldivmod>
 80033ac:	4603      	mov	r3, r0
 80033ae:	460c      	mov	r4, r1
 80033b0:	461a      	mov	r2, r3
 80033b2:	4b32      	ldr	r3, [pc, #200]	; (800347c <UART_SetConfig+0x6f4>)
 80033b4:	fba3 1302 	umull	r1, r3, r3, r2
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	2164      	movs	r1, #100	; 0x64
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	3332      	adds	r3, #50	; 0x32
 80033c6:	4a2d      	ldr	r2, [pc, #180]	; (800347c <UART_SetConfig+0x6f4>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d2:	4498      	add	r8, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	469b      	mov	fp, r3
 80033d8:	f04f 0c00 	mov.w	ip, #0
 80033dc:	46d9      	mov	r9, fp
 80033de:	46e2      	mov	sl, ip
 80033e0:	eb19 0309 	adds.w	r3, r9, r9
 80033e4:	eb4a 040a 	adc.w	r4, sl, sl
 80033e8:	4699      	mov	r9, r3
 80033ea:	46a2      	mov	sl, r4
 80033ec:	eb19 090b 	adds.w	r9, r9, fp
 80033f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033f4:	f04f 0100 	mov.w	r1, #0
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003400:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003404:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003408:	4689      	mov	r9, r1
 800340a:	4692      	mov	sl, r2
 800340c:	eb1b 0509 	adds.w	r5, fp, r9
 8003410:	eb4c 060a 	adc.w	r6, ip, sl
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	4619      	mov	r1, r3
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	f04f 0400 	mov.w	r4, #0
 8003426:	0094      	lsls	r4, r2, #2
 8003428:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800342c:	008b      	lsls	r3, r1, #2
 800342e:	461a      	mov	r2, r3
 8003430:	4623      	mov	r3, r4
 8003432:	4628      	mov	r0, r5
 8003434:	4631      	mov	r1, r6
 8003436:	f7fc ff3b 	bl	80002b0 <__aeabi_uldivmod>
 800343a:	4603      	mov	r3, r0
 800343c:	460c      	mov	r4, r1
 800343e:	461a      	mov	r2, r3
 8003440:	4b0e      	ldr	r3, [pc, #56]	; (800347c <UART_SetConfig+0x6f4>)
 8003442:	fba3 1302 	umull	r1, r3, r3, r2
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	2164      	movs	r1, #100	; 0x64
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	3332      	adds	r3, #50	; 0x32
 8003454:	4a09      	ldr	r2, [pc, #36]	; (800347c <UART_SetConfig+0x6f4>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	f003 020f 	and.w	r2, r3, #15
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4442      	add	r2, r8
 8003466:	609a      	str	r2, [r3, #8]
}
 8003468:	e7ff      	b.n	800346a <UART_SetConfig+0x6e2>
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003474:	40011000 	.word	0x40011000
 8003478:	40011400 	.word	0x40011400
 800347c:	51eb851f 	.word	0x51eb851f

08003480 <SX1272_Init>:

extern SPI_HandleTypeDef hspi1;

//! @last_edit : 15/10/2020
//! @details :
void SX1272_Init(void) {
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
	SX1272_WriteRegister(0x01, 0x00);
 8003484:	2100      	movs	r1, #0
 8003486:	2001      	movs	r0, #1
 8003488:	f000 f818 	bl	80034bc <SX1272_WriteRegister>

	HAL_Delay(15);
 800348c:	200f      	movs	r0, #15
 800348e:	f7fd fcb3 	bl	8000df8 <HAL_Delay>
	SX1272_WriteRegister(0x01, 0x80);
 8003492:	2180      	movs	r1, #128	; 0x80
 8003494:	2001      	movs	r0, #1
 8003496:	f000 f811 	bl	80034bc <SX1272_WriteRegister>

	HAL_Delay(15);
 800349a:	200f      	movs	r0, #15
 800349c:	f7fd fcac 	bl	8000df8 <HAL_Delay>
	SX1272_WriteRegister(0x06, 0xD9); //Frequency 868.5MHz : 0xD92000
 80034a0:	21d9      	movs	r1, #217	; 0xd9
 80034a2:	2006      	movs	r0, #6
 80034a4:	f000 f80a 	bl	80034bc <SX1272_WriteRegister>
	SX1272_WriteRegister(0x07, 0x20);
 80034a8:	2120      	movs	r1, #32
 80034aa:	2007      	movs	r0, #7
 80034ac:	f000 f806 	bl	80034bc <SX1272_WriteRegister>
	SX1272_WriteRegister(0x08, 0x00);
 80034b0:	2100      	movs	r1, #0
 80034b2:	2008      	movs	r0, #8
 80034b4:	f000 f802 	bl	80034bc <SX1272_WriteRegister>
}
 80034b8:	bf00      	nop
 80034ba:	bd80      	pop	{r7, pc}

080034bc <SX1272_WriteRegister>:

//! @last_edit : 15/10/2020
//! @details :
void SX1272_WriteRegister(uint8_t reg, uint8_t val) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	460a      	mov	r2, r1
 80034c6:	71fb      	strb	r3, [r7, #7]
 80034c8:	4613      	mov	r3, r2
 80034ca:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 80034cc:	2200      	movs	r2, #0
 80034ce:	2140      	movs	r1, #64	; 0x40
 80034d0:	4812      	ldr	r0, [pc, #72]	; (800351c <SX1272_WriteRegister+0x60>)
 80034d2:	f7fd ff79 	bl	80013c8 <HAL_GPIO_WritePin>

	reg |= 0x80; //! MASK FOR R/W BIT
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 80034e0:	1df9      	adds	r1, r7, #7
 80034e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034e6:	2201      	movs	r2, #1
 80034e8:	480d      	ldr	r0, [pc, #52]	; (8003520 <SX1272_WriteRegister+0x64>)
 80034ea:	f7fe fcff 	bl	8001eec <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &val, 1, 1000);
 80034ee:	1db9      	adds	r1, r7, #6
 80034f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034f4:	2201      	movs	r2, #1
 80034f6:	480a      	ldr	r0, [pc, #40]	; (8003520 <SX1272_WriteRegister+0x64>)
 80034f8:	f7fe fcf8 	bl	8001eec <HAL_SPI_Transmit>

	//! WAIT FOR SPI
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80034fc:	bf00      	nop
 80034fe:	4808      	ldr	r0, [pc, #32]	; (8003520 <SX1272_WriteRegister+0x64>)
 8003500:	f7ff f9de 	bl	80028c0 <HAL_SPI_GetState>
 8003504:	4603      	mov	r3, r0
 8003506:	2b01      	cmp	r3, #1
 8003508:	d1f9      	bne.n	80034fe <SX1272_WriteRegister+0x42>

	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 800350a:	2201      	movs	r2, #1
 800350c:	2140      	movs	r1, #64	; 0x40
 800350e:	4803      	ldr	r0, [pc, #12]	; (800351c <SX1272_WriteRegister+0x60>)
 8003510:	f7fd ff5a 	bl	80013c8 <HAL_GPIO_WritePin>
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40020400 	.word	0x40020400
 8003520:	20000098 	.word	0x20000098

08003524 <SX1272_ReadRegister>:

//! @last_edit : 15/10/2020
//! @details :
uint8_t SX1272_ReadRegister(uint8_t reg) {
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 8003532:	2200      	movs	r2, #0
 8003534:	2140      	movs	r1, #64	; 0x40
 8003536:	4814      	ldr	r0, [pc, #80]	; (8003588 <SX1272_ReadRegister+0x64>)
 8003538:	f7fd ff46 	bl	80013c8 <HAL_GPIO_WritePin>

	reg &= 0x7F;
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003542:	b2db      	uxtb	r3, r3
 8003544:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 8003546:	1df9      	adds	r1, r7, #7
 8003548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800354c:	2201      	movs	r2, #1
 800354e:	480f      	ldr	r0, [pc, #60]	; (800358c <SX1272_ReadRegister+0x68>)
 8003550:	f7fe fccc 	bl	8001eec <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &data, 1, 1000);
 8003554:	f107 010f 	add.w	r1, r7, #15
 8003558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800355c:	2201      	movs	r2, #1
 800355e:	480b      	ldr	r0, [pc, #44]	; (800358c <SX1272_ReadRegister+0x68>)
 8003560:	f7fe fdf8 	bl	8002154 <HAL_SPI_Receive>

	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003564:	bf00      	nop
 8003566:	4809      	ldr	r0, [pc, #36]	; (800358c <SX1272_ReadRegister+0x68>)
 8003568:	f7ff f9aa 	bl	80028c0 <HAL_SPI_GetState>
 800356c:	4603      	mov	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d1f9      	bne.n	8003566 <SX1272_ReadRegister+0x42>

	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 8003572:	2201      	movs	r2, #1
 8003574:	2140      	movs	r1, #64	; 0x40
 8003576:	4804      	ldr	r0, [pc, #16]	; (8003588 <SX1272_ReadRegister+0x64>)
 8003578:	f7fd ff26 	bl	80013c8 <HAL_GPIO_WritePin>

	return data;
 800357c:	7bfb      	ldrb	r3, [r7, #15]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40020400 	.word	0x40020400
 800358c:	20000098 	.word	0x20000098

08003590 <SX1272_BurstRead>:

//! @last_edit : 15/10/2020
//! @details :
void SX1272_BurstRead(uint8_t addr, uint8_t* rxBuf, uint8_t length) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	6039      	str	r1, [r7, #0]
 800359a:	71fb      	strb	r3, [r7, #7]
 800359c:	4613      	mov	r3, r2
 800359e:	71bb      	strb	r3, [r7, #6]
	if (length > 1) {
 80035a0:	79bb      	ldrb	r3, [r7, #6]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d918      	bls.n	80035d8 <SX1272_BurstRead+0x48>
		HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80035a6:	2200      	movs	r2, #0
 80035a8:	2140      	movs	r1, #64	; 0x40
 80035aa:	480d      	ldr	r0, [pc, #52]	; (80035e0 <SX1272_BurstRead+0x50>)
 80035ac:	f7fd ff0c 	bl	80013c8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 80035b0:	1df9      	adds	r1, r7, #7
 80035b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035b6:	2201      	movs	r2, #1
 80035b8:	480a      	ldr	r0, [pc, #40]	; (80035e4 <SX1272_BurstRead+0x54>)
 80035ba:	f7fe fc97 	bl	8001eec <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, rxBuf, length, 1000);
 80035be:	79bb      	ldrb	r3, [r7, #6]
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035c6:	6839      	ldr	r1, [r7, #0]
 80035c8:	4806      	ldr	r0, [pc, #24]	; (80035e4 <SX1272_BurstRead+0x54>)
 80035ca:	f7fe fdc3 	bl	8002154 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80035ce:	2201      	movs	r2, #1
 80035d0:	2140      	movs	r1, #64	; 0x40
 80035d2:	4803      	ldr	r0, [pc, #12]	; (80035e0 <SX1272_BurstRead+0x50>)
 80035d4:	f7fd fef8 	bl	80013c8 <HAL_GPIO_WritePin>
	}
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40020400 	.word	0x40020400
 80035e4:	20000098 	.word	0x20000098

080035e8 <SX1272_Receive>:
	while((SX1272_ReadRegister(0x12) && 0x08)==0); // interrupt

	SX1272_WriteRegister(0x12, 0xFF); // clear interrupt
}

uint8_t SX1272_Receive(uint8_t rx[50]) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	uint8_t length = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = SX1272_ReadRegister(0x0F);//Rx base addr
 80035f4:	200f      	movs	r0, #15
 80035f6:	f7ff ff95 	bl	8003524 <SX1272_ReadRegister>
 80035fa:	4603      	mov	r3, r0
 80035fc:	73bb      	strb	r3, [r7, #14]
	SX1272_WriteRegister(0x0D, addr);//write fifo addr ptr
 80035fe:	7bbb      	ldrb	r3, [r7, #14]
 8003600:	4619      	mov	r1, r3
 8003602:	200d      	movs	r0, #13
 8003604:	f7ff ff5a 	bl	80034bc <SX1272_WriteRegister>

	HAL_Delay(15);
 8003608:	200f      	movs	r0, #15
 800360a:	f7fd fbf5 	bl	8000df8 <HAL_Delay>
	SX1272_WriteRegister(0x01, 0x81);
 800360e:	2181      	movs	r1, #129	; 0x81
 8003610:	2001      	movs	r0, #1
 8003612:	f7ff ff53 	bl	80034bc <SX1272_WriteRegister>
	HAL_Delay(15);
 8003616:	200f      	movs	r0, #15
 8003618:	f7fd fbee 	bl	8000df8 <HAL_Delay>
	SX1272_WriteRegister(0x01, 0x84);
 800361c:	2184      	movs	r1, #132	; 0x84
 800361e:	2001      	movs	r0, #1
 8003620:	f7ff ff4c 	bl	80034bc <SX1272_WriteRegister>
	HAL_Delay(15);
 8003624:	200f      	movs	r0, #15
 8003626:	f7fd fbe7 	bl	8000df8 <HAL_Delay>
	SX1272_WriteRegister(0x01, 0x85);
 800362a:	2185      	movs	r1, #133	; 0x85
 800362c:	2001      	movs	r0, #1
 800362e:	f7ff ff45 	bl	80034bc <SX1272_WriteRegister>
	HAL_Delay(15);
 8003632:	200f      	movs	r0, #15
 8003634:	f7fd fbe0 	bl	8000df8 <HAL_Delay>


	while((SX1272_ReadRegister(0x12) && 0xC0)==0);//interrupt
 8003638:	bf00      	nop
 800363a:	2012      	movs	r0, #18
 800363c:	f7ff ff72 	bl	8003524 <SX1272_ReadRegister>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f9      	beq.n	800363a <SX1272_Receive+0x52>

	uint8_t interrupt = SX1272_ReadRegister(0x12);
 8003646:	2012      	movs	r0, #18
 8003648:	f7ff ff6c 	bl	8003524 <SX1272_ReadRegister>
 800364c:	4603      	mov	r3, r0
 800364e:	737b      	strb	r3, [r7, #13]
	if(interrupt == 0x80){
 8003650:	7b7b      	ldrb	r3, [r7, #13]
 8003652:	2b80      	cmp	r3, #128	; 0x80
 8003654:	d101      	bne.n	800365a <SX1272_Receive+0x72>
		return 0;
 8003656:	2300      	movs	r3, #0
 8003658:	e019      	b.n	800368e <SX1272_Receive+0xa6>
	}

	addr = SX1272_ReadRegister(0x10);//Rx current addr
 800365a:	2010      	movs	r0, #16
 800365c:	f7ff ff62 	bl	8003524 <SX1272_ReadRegister>
 8003660:	4603      	mov	r3, r0
 8003662:	73bb      	strb	r3, [r7, #14]
	length = SX1272_ReadRegister(0x13);//Rx current addr
 8003664:	2013      	movs	r0, #19
 8003666:	f7ff ff5d 	bl	8003524 <SX1272_ReadRegister>
 800366a:	4603      	mov	r3, r0
 800366c:	73fb      	strb	r3, [r7, #15]

	SX1272_WriteRegister(0x0D, addr);//write fifo addr ptr
 800366e:	7bbb      	ldrb	r3, [r7, #14]
 8003670:	4619      	mov	r1, r3
 8003672:	200d      	movs	r0, #13
 8003674:	f7ff ff22 	bl	80034bc <SX1272_WriteRegister>

	SX1272_BurstRead(0, rx, length);
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	461a      	mov	r2, r3
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	2000      	movs	r0, #0
 8003680:	f7ff ff86 	bl	8003590 <SX1272_BurstRead>
	SX1272_WriteRegister(0x12, 0xFF);//clear interrupt
 8003684:	21ff      	movs	r1, #255	; 0xff
 8003686:	2012      	movs	r0, #18
 8003688:	f7ff ff18 	bl	80034bc <SX1272_WriteRegister>
	return length;
 800368c:	7bfb      	ldrb	r3, [r7, #15]

}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <__errno>:
 8003698:	4b01      	ldr	r3, [pc, #4]	; (80036a0 <__errno+0x8>)
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	2000000c 	.word	0x2000000c

080036a4 <__libc_init_array>:
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	4e0d      	ldr	r6, [pc, #52]	; (80036dc <__libc_init_array+0x38>)
 80036a8:	4c0d      	ldr	r4, [pc, #52]	; (80036e0 <__libc_init_array+0x3c>)
 80036aa:	1ba4      	subs	r4, r4, r6
 80036ac:	10a4      	asrs	r4, r4, #2
 80036ae:	2500      	movs	r5, #0
 80036b0:	42a5      	cmp	r5, r4
 80036b2:	d109      	bne.n	80036c8 <__libc_init_array+0x24>
 80036b4:	4e0b      	ldr	r6, [pc, #44]	; (80036e4 <__libc_init_array+0x40>)
 80036b6:	4c0c      	ldr	r4, [pc, #48]	; (80036e8 <__libc_init_array+0x44>)
 80036b8:	f000 ff04 	bl	80044c4 <_init>
 80036bc:	1ba4      	subs	r4, r4, r6
 80036be:	10a4      	asrs	r4, r4, #2
 80036c0:	2500      	movs	r5, #0
 80036c2:	42a5      	cmp	r5, r4
 80036c4:	d105      	bne.n	80036d2 <__libc_init_array+0x2e>
 80036c6:	bd70      	pop	{r4, r5, r6, pc}
 80036c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036cc:	4798      	blx	r3
 80036ce:	3501      	adds	r5, #1
 80036d0:	e7ee      	b.n	80036b0 <__libc_init_array+0xc>
 80036d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036d6:	4798      	blx	r3
 80036d8:	3501      	adds	r5, #1
 80036da:	e7f2      	b.n	80036c2 <__libc_init_array+0x1e>
 80036dc:	0800459c 	.word	0x0800459c
 80036e0:	0800459c 	.word	0x0800459c
 80036e4:	0800459c 	.word	0x0800459c
 80036e8:	080045a0 	.word	0x080045a0

080036ec <memset>:
 80036ec:	4402      	add	r2, r0
 80036ee:	4603      	mov	r3, r0
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d100      	bne.n	80036f6 <memset+0xa>
 80036f4:	4770      	bx	lr
 80036f6:	f803 1b01 	strb.w	r1, [r3], #1
 80036fa:	e7f9      	b.n	80036f0 <memset+0x4>

080036fc <iprintf>:
 80036fc:	b40f      	push	{r0, r1, r2, r3}
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <iprintf+0x2c>)
 8003700:	b513      	push	{r0, r1, r4, lr}
 8003702:	681c      	ldr	r4, [r3, #0]
 8003704:	b124      	cbz	r4, 8003710 <iprintf+0x14>
 8003706:	69a3      	ldr	r3, [r4, #24]
 8003708:	b913      	cbnz	r3, 8003710 <iprintf+0x14>
 800370a:	4620      	mov	r0, r4
 800370c:	f000 f84e 	bl	80037ac <__sinit>
 8003710:	ab05      	add	r3, sp, #20
 8003712:	9a04      	ldr	r2, [sp, #16]
 8003714:	68a1      	ldr	r1, [r4, #8]
 8003716:	9301      	str	r3, [sp, #4]
 8003718:	4620      	mov	r0, r4
 800371a:	f000 f955 	bl	80039c8 <_vfiprintf_r>
 800371e:	b002      	add	sp, #8
 8003720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003724:	b004      	add	sp, #16
 8003726:	4770      	bx	lr
 8003728:	2000000c 	.word	0x2000000c

0800372c <std>:
 800372c:	2300      	movs	r3, #0
 800372e:	b510      	push	{r4, lr}
 8003730:	4604      	mov	r4, r0
 8003732:	e9c0 3300 	strd	r3, r3, [r0]
 8003736:	6083      	str	r3, [r0, #8]
 8003738:	8181      	strh	r1, [r0, #12]
 800373a:	6643      	str	r3, [r0, #100]	; 0x64
 800373c:	81c2      	strh	r2, [r0, #14]
 800373e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003742:	6183      	str	r3, [r0, #24]
 8003744:	4619      	mov	r1, r3
 8003746:	2208      	movs	r2, #8
 8003748:	305c      	adds	r0, #92	; 0x5c
 800374a:	f7ff ffcf 	bl	80036ec <memset>
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <std+0x38>)
 8003750:	6263      	str	r3, [r4, #36]	; 0x24
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <std+0x3c>)
 8003754:	62a3      	str	r3, [r4, #40]	; 0x28
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <std+0x40>)
 8003758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <std+0x44>)
 800375c:	6224      	str	r4, [r4, #32]
 800375e:	6323      	str	r3, [r4, #48]	; 0x30
 8003760:	bd10      	pop	{r4, pc}
 8003762:	bf00      	nop
 8003764:	08003f25 	.word	0x08003f25
 8003768:	08003f47 	.word	0x08003f47
 800376c:	08003f7f 	.word	0x08003f7f
 8003770:	08003fa3 	.word	0x08003fa3

08003774 <_cleanup_r>:
 8003774:	4901      	ldr	r1, [pc, #4]	; (800377c <_cleanup_r+0x8>)
 8003776:	f000 b885 	b.w	8003884 <_fwalk_reent>
 800377a:	bf00      	nop
 800377c:	0800427d 	.word	0x0800427d

08003780 <__sfmoreglue>:
 8003780:	b570      	push	{r4, r5, r6, lr}
 8003782:	1e4a      	subs	r2, r1, #1
 8003784:	2568      	movs	r5, #104	; 0x68
 8003786:	4355      	muls	r5, r2
 8003788:	460e      	mov	r6, r1
 800378a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800378e:	f000 f897 	bl	80038c0 <_malloc_r>
 8003792:	4604      	mov	r4, r0
 8003794:	b140      	cbz	r0, 80037a8 <__sfmoreglue+0x28>
 8003796:	2100      	movs	r1, #0
 8003798:	e9c0 1600 	strd	r1, r6, [r0]
 800379c:	300c      	adds	r0, #12
 800379e:	60a0      	str	r0, [r4, #8]
 80037a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037a4:	f7ff ffa2 	bl	80036ec <memset>
 80037a8:	4620      	mov	r0, r4
 80037aa:	bd70      	pop	{r4, r5, r6, pc}

080037ac <__sinit>:
 80037ac:	6983      	ldr	r3, [r0, #24]
 80037ae:	b510      	push	{r4, lr}
 80037b0:	4604      	mov	r4, r0
 80037b2:	bb33      	cbnz	r3, 8003802 <__sinit+0x56>
 80037b4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80037b8:	6503      	str	r3, [r0, #80]	; 0x50
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <__sinit+0x58>)
 80037bc:	4a12      	ldr	r2, [pc, #72]	; (8003808 <__sinit+0x5c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6282      	str	r2, [r0, #40]	; 0x28
 80037c2:	4298      	cmp	r0, r3
 80037c4:	bf04      	itt	eq
 80037c6:	2301      	moveq	r3, #1
 80037c8:	6183      	streq	r3, [r0, #24]
 80037ca:	f000 f81f 	bl	800380c <__sfp>
 80037ce:	6060      	str	r0, [r4, #4]
 80037d0:	4620      	mov	r0, r4
 80037d2:	f000 f81b 	bl	800380c <__sfp>
 80037d6:	60a0      	str	r0, [r4, #8]
 80037d8:	4620      	mov	r0, r4
 80037da:	f000 f817 	bl	800380c <__sfp>
 80037de:	2200      	movs	r2, #0
 80037e0:	60e0      	str	r0, [r4, #12]
 80037e2:	2104      	movs	r1, #4
 80037e4:	6860      	ldr	r0, [r4, #4]
 80037e6:	f7ff ffa1 	bl	800372c <std>
 80037ea:	2201      	movs	r2, #1
 80037ec:	2109      	movs	r1, #9
 80037ee:	68a0      	ldr	r0, [r4, #8]
 80037f0:	f7ff ff9c 	bl	800372c <std>
 80037f4:	2202      	movs	r2, #2
 80037f6:	2112      	movs	r1, #18
 80037f8:	68e0      	ldr	r0, [r4, #12]
 80037fa:	f7ff ff97 	bl	800372c <std>
 80037fe:	2301      	movs	r3, #1
 8003800:	61a3      	str	r3, [r4, #24]
 8003802:	bd10      	pop	{r4, pc}
 8003804:	080044fc 	.word	0x080044fc
 8003808:	08003775 	.word	0x08003775

0800380c <__sfp>:
 800380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380e:	4b1b      	ldr	r3, [pc, #108]	; (800387c <__sfp+0x70>)
 8003810:	681e      	ldr	r6, [r3, #0]
 8003812:	69b3      	ldr	r3, [r6, #24]
 8003814:	4607      	mov	r7, r0
 8003816:	b913      	cbnz	r3, 800381e <__sfp+0x12>
 8003818:	4630      	mov	r0, r6
 800381a:	f7ff ffc7 	bl	80037ac <__sinit>
 800381e:	3648      	adds	r6, #72	; 0x48
 8003820:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003824:	3b01      	subs	r3, #1
 8003826:	d503      	bpl.n	8003830 <__sfp+0x24>
 8003828:	6833      	ldr	r3, [r6, #0]
 800382a:	b133      	cbz	r3, 800383a <__sfp+0x2e>
 800382c:	6836      	ldr	r6, [r6, #0]
 800382e:	e7f7      	b.n	8003820 <__sfp+0x14>
 8003830:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003834:	b16d      	cbz	r5, 8003852 <__sfp+0x46>
 8003836:	3468      	adds	r4, #104	; 0x68
 8003838:	e7f4      	b.n	8003824 <__sfp+0x18>
 800383a:	2104      	movs	r1, #4
 800383c:	4638      	mov	r0, r7
 800383e:	f7ff ff9f 	bl	8003780 <__sfmoreglue>
 8003842:	6030      	str	r0, [r6, #0]
 8003844:	2800      	cmp	r0, #0
 8003846:	d1f1      	bne.n	800382c <__sfp+0x20>
 8003848:	230c      	movs	r3, #12
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	4604      	mov	r4, r0
 800384e:	4620      	mov	r0, r4
 8003850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003852:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <__sfp+0x74>)
 8003854:	6665      	str	r5, [r4, #100]	; 0x64
 8003856:	e9c4 5500 	strd	r5, r5, [r4]
 800385a:	60a5      	str	r5, [r4, #8]
 800385c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003860:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003864:	2208      	movs	r2, #8
 8003866:	4629      	mov	r1, r5
 8003868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800386c:	f7ff ff3e 	bl	80036ec <memset>
 8003870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003878:	e7e9      	b.n	800384e <__sfp+0x42>
 800387a:	bf00      	nop
 800387c:	080044fc 	.word	0x080044fc
 8003880:	ffff0001 	.word	0xffff0001

08003884 <_fwalk_reent>:
 8003884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003888:	4680      	mov	r8, r0
 800388a:	4689      	mov	r9, r1
 800388c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003890:	2600      	movs	r6, #0
 8003892:	b914      	cbnz	r4, 800389a <_fwalk_reent+0x16>
 8003894:	4630      	mov	r0, r6
 8003896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800389a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800389e:	3f01      	subs	r7, #1
 80038a0:	d501      	bpl.n	80038a6 <_fwalk_reent+0x22>
 80038a2:	6824      	ldr	r4, [r4, #0]
 80038a4:	e7f5      	b.n	8003892 <_fwalk_reent+0xe>
 80038a6:	89ab      	ldrh	r3, [r5, #12]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d907      	bls.n	80038bc <_fwalk_reent+0x38>
 80038ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038b0:	3301      	adds	r3, #1
 80038b2:	d003      	beq.n	80038bc <_fwalk_reent+0x38>
 80038b4:	4629      	mov	r1, r5
 80038b6:	4640      	mov	r0, r8
 80038b8:	47c8      	blx	r9
 80038ba:	4306      	orrs	r6, r0
 80038bc:	3568      	adds	r5, #104	; 0x68
 80038be:	e7ee      	b.n	800389e <_fwalk_reent+0x1a>

080038c0 <_malloc_r>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	1ccd      	adds	r5, r1, #3
 80038c4:	f025 0503 	bic.w	r5, r5, #3
 80038c8:	3508      	adds	r5, #8
 80038ca:	2d0c      	cmp	r5, #12
 80038cc:	bf38      	it	cc
 80038ce:	250c      	movcc	r5, #12
 80038d0:	2d00      	cmp	r5, #0
 80038d2:	4606      	mov	r6, r0
 80038d4:	db01      	blt.n	80038da <_malloc_r+0x1a>
 80038d6:	42a9      	cmp	r1, r5
 80038d8:	d903      	bls.n	80038e2 <_malloc_r+0x22>
 80038da:	230c      	movs	r3, #12
 80038dc:	6033      	str	r3, [r6, #0]
 80038de:	2000      	movs	r0, #0
 80038e0:	bd70      	pop	{r4, r5, r6, pc}
 80038e2:	f000 fd6b 	bl	80043bc <__malloc_lock>
 80038e6:	4a21      	ldr	r2, [pc, #132]	; (800396c <_malloc_r+0xac>)
 80038e8:	6814      	ldr	r4, [r2, #0]
 80038ea:	4621      	mov	r1, r4
 80038ec:	b991      	cbnz	r1, 8003914 <_malloc_r+0x54>
 80038ee:	4c20      	ldr	r4, [pc, #128]	; (8003970 <_malloc_r+0xb0>)
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	b91b      	cbnz	r3, 80038fc <_malloc_r+0x3c>
 80038f4:	4630      	mov	r0, r6
 80038f6:	f000 fb05 	bl	8003f04 <_sbrk_r>
 80038fa:	6020      	str	r0, [r4, #0]
 80038fc:	4629      	mov	r1, r5
 80038fe:	4630      	mov	r0, r6
 8003900:	f000 fb00 	bl	8003f04 <_sbrk_r>
 8003904:	1c43      	adds	r3, r0, #1
 8003906:	d124      	bne.n	8003952 <_malloc_r+0x92>
 8003908:	230c      	movs	r3, #12
 800390a:	6033      	str	r3, [r6, #0]
 800390c:	4630      	mov	r0, r6
 800390e:	f000 fd56 	bl	80043be <__malloc_unlock>
 8003912:	e7e4      	b.n	80038de <_malloc_r+0x1e>
 8003914:	680b      	ldr	r3, [r1, #0]
 8003916:	1b5b      	subs	r3, r3, r5
 8003918:	d418      	bmi.n	800394c <_malloc_r+0x8c>
 800391a:	2b0b      	cmp	r3, #11
 800391c:	d90f      	bls.n	800393e <_malloc_r+0x7e>
 800391e:	600b      	str	r3, [r1, #0]
 8003920:	50cd      	str	r5, [r1, r3]
 8003922:	18cc      	adds	r4, r1, r3
 8003924:	4630      	mov	r0, r6
 8003926:	f000 fd4a 	bl	80043be <__malloc_unlock>
 800392a:	f104 000b 	add.w	r0, r4, #11
 800392e:	1d23      	adds	r3, r4, #4
 8003930:	f020 0007 	bic.w	r0, r0, #7
 8003934:	1ac3      	subs	r3, r0, r3
 8003936:	d0d3      	beq.n	80038e0 <_malloc_r+0x20>
 8003938:	425a      	negs	r2, r3
 800393a:	50e2      	str	r2, [r4, r3]
 800393c:	e7d0      	b.n	80038e0 <_malloc_r+0x20>
 800393e:	428c      	cmp	r4, r1
 8003940:	684b      	ldr	r3, [r1, #4]
 8003942:	bf16      	itet	ne
 8003944:	6063      	strne	r3, [r4, #4]
 8003946:	6013      	streq	r3, [r2, #0]
 8003948:	460c      	movne	r4, r1
 800394a:	e7eb      	b.n	8003924 <_malloc_r+0x64>
 800394c:	460c      	mov	r4, r1
 800394e:	6849      	ldr	r1, [r1, #4]
 8003950:	e7cc      	b.n	80038ec <_malloc_r+0x2c>
 8003952:	1cc4      	adds	r4, r0, #3
 8003954:	f024 0403 	bic.w	r4, r4, #3
 8003958:	42a0      	cmp	r0, r4
 800395a:	d005      	beq.n	8003968 <_malloc_r+0xa8>
 800395c:	1a21      	subs	r1, r4, r0
 800395e:	4630      	mov	r0, r6
 8003960:	f000 fad0 	bl	8003f04 <_sbrk_r>
 8003964:	3001      	adds	r0, #1
 8003966:	d0cf      	beq.n	8003908 <_malloc_r+0x48>
 8003968:	6025      	str	r5, [r4, #0]
 800396a:	e7db      	b.n	8003924 <_malloc_r+0x64>
 800396c:	20000090 	.word	0x20000090
 8003970:	20000094 	.word	0x20000094

08003974 <__sfputc_r>:
 8003974:	6893      	ldr	r3, [r2, #8]
 8003976:	3b01      	subs	r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	b410      	push	{r4}
 800397c:	6093      	str	r3, [r2, #8]
 800397e:	da08      	bge.n	8003992 <__sfputc_r+0x1e>
 8003980:	6994      	ldr	r4, [r2, #24]
 8003982:	42a3      	cmp	r3, r4
 8003984:	db01      	blt.n	800398a <__sfputc_r+0x16>
 8003986:	290a      	cmp	r1, #10
 8003988:	d103      	bne.n	8003992 <__sfputc_r+0x1e>
 800398a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800398e:	f000 bb0d 	b.w	8003fac <__swbuf_r>
 8003992:	6813      	ldr	r3, [r2, #0]
 8003994:	1c58      	adds	r0, r3, #1
 8003996:	6010      	str	r0, [r2, #0]
 8003998:	7019      	strb	r1, [r3, #0]
 800399a:	4608      	mov	r0, r1
 800399c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <__sfputs_r>:
 80039a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a4:	4606      	mov	r6, r0
 80039a6:	460f      	mov	r7, r1
 80039a8:	4614      	mov	r4, r2
 80039aa:	18d5      	adds	r5, r2, r3
 80039ac:	42ac      	cmp	r4, r5
 80039ae:	d101      	bne.n	80039b4 <__sfputs_r+0x12>
 80039b0:	2000      	movs	r0, #0
 80039b2:	e007      	b.n	80039c4 <__sfputs_r+0x22>
 80039b4:	463a      	mov	r2, r7
 80039b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ba:	4630      	mov	r0, r6
 80039bc:	f7ff ffda 	bl	8003974 <__sfputc_r>
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	d1f3      	bne.n	80039ac <__sfputs_r+0xa>
 80039c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039c8 <_vfiprintf_r>:
 80039c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039cc:	460c      	mov	r4, r1
 80039ce:	b09d      	sub	sp, #116	; 0x74
 80039d0:	4617      	mov	r7, r2
 80039d2:	461d      	mov	r5, r3
 80039d4:	4606      	mov	r6, r0
 80039d6:	b118      	cbz	r0, 80039e0 <_vfiprintf_r+0x18>
 80039d8:	6983      	ldr	r3, [r0, #24]
 80039da:	b90b      	cbnz	r3, 80039e0 <_vfiprintf_r+0x18>
 80039dc:	f7ff fee6 	bl	80037ac <__sinit>
 80039e0:	4b7c      	ldr	r3, [pc, #496]	; (8003bd4 <_vfiprintf_r+0x20c>)
 80039e2:	429c      	cmp	r4, r3
 80039e4:	d158      	bne.n	8003a98 <_vfiprintf_r+0xd0>
 80039e6:	6874      	ldr	r4, [r6, #4]
 80039e8:	89a3      	ldrh	r3, [r4, #12]
 80039ea:	0718      	lsls	r0, r3, #28
 80039ec:	d55e      	bpl.n	8003aac <_vfiprintf_r+0xe4>
 80039ee:	6923      	ldr	r3, [r4, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d05b      	beq.n	8003aac <_vfiprintf_r+0xe4>
 80039f4:	2300      	movs	r3, #0
 80039f6:	9309      	str	r3, [sp, #36]	; 0x24
 80039f8:	2320      	movs	r3, #32
 80039fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039fe:	2330      	movs	r3, #48	; 0x30
 8003a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a04:	9503      	str	r5, [sp, #12]
 8003a06:	f04f 0b01 	mov.w	fp, #1
 8003a0a:	46b8      	mov	r8, r7
 8003a0c:	4645      	mov	r5, r8
 8003a0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a12:	b10b      	cbz	r3, 8003a18 <_vfiprintf_r+0x50>
 8003a14:	2b25      	cmp	r3, #37	; 0x25
 8003a16:	d154      	bne.n	8003ac2 <_vfiprintf_r+0xfa>
 8003a18:	ebb8 0a07 	subs.w	sl, r8, r7
 8003a1c:	d00b      	beq.n	8003a36 <_vfiprintf_r+0x6e>
 8003a1e:	4653      	mov	r3, sl
 8003a20:	463a      	mov	r2, r7
 8003a22:	4621      	mov	r1, r4
 8003a24:	4630      	mov	r0, r6
 8003a26:	f7ff ffbc 	bl	80039a2 <__sfputs_r>
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	f000 80c2 	beq.w	8003bb4 <_vfiprintf_r+0x1ec>
 8003a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a32:	4453      	add	r3, sl
 8003a34:	9309      	str	r3, [sp, #36]	; 0x24
 8003a36:	f898 3000 	ldrb.w	r3, [r8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 80ba 	beq.w	8003bb4 <_vfiprintf_r+0x1ec>
 8003a40:	2300      	movs	r3, #0
 8003a42:	f04f 32ff 	mov.w	r2, #4294967295
 8003a46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a4a:	9304      	str	r3, [sp, #16]
 8003a4c:	9307      	str	r3, [sp, #28]
 8003a4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a52:	931a      	str	r3, [sp, #104]	; 0x68
 8003a54:	46a8      	mov	r8, r5
 8003a56:	2205      	movs	r2, #5
 8003a58:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003a5c:	485e      	ldr	r0, [pc, #376]	; (8003bd8 <_vfiprintf_r+0x210>)
 8003a5e:	f7fc fbd7 	bl	8000210 <memchr>
 8003a62:	9b04      	ldr	r3, [sp, #16]
 8003a64:	bb78      	cbnz	r0, 8003ac6 <_vfiprintf_r+0xfe>
 8003a66:	06d9      	lsls	r1, r3, #27
 8003a68:	bf44      	itt	mi
 8003a6a:	2220      	movmi	r2, #32
 8003a6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a70:	071a      	lsls	r2, r3, #28
 8003a72:	bf44      	itt	mi
 8003a74:	222b      	movmi	r2, #43	; 0x2b
 8003a76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a7a:	782a      	ldrb	r2, [r5, #0]
 8003a7c:	2a2a      	cmp	r2, #42	; 0x2a
 8003a7e:	d02a      	beq.n	8003ad6 <_vfiprintf_r+0x10e>
 8003a80:	9a07      	ldr	r2, [sp, #28]
 8003a82:	46a8      	mov	r8, r5
 8003a84:	2000      	movs	r0, #0
 8003a86:	250a      	movs	r5, #10
 8003a88:	4641      	mov	r1, r8
 8003a8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a8e:	3b30      	subs	r3, #48	; 0x30
 8003a90:	2b09      	cmp	r3, #9
 8003a92:	d969      	bls.n	8003b68 <_vfiprintf_r+0x1a0>
 8003a94:	b360      	cbz	r0, 8003af0 <_vfiprintf_r+0x128>
 8003a96:	e024      	b.n	8003ae2 <_vfiprintf_r+0x11a>
 8003a98:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <_vfiprintf_r+0x214>)
 8003a9a:	429c      	cmp	r4, r3
 8003a9c:	d101      	bne.n	8003aa2 <_vfiprintf_r+0xda>
 8003a9e:	68b4      	ldr	r4, [r6, #8]
 8003aa0:	e7a2      	b.n	80039e8 <_vfiprintf_r+0x20>
 8003aa2:	4b4f      	ldr	r3, [pc, #316]	; (8003be0 <_vfiprintf_r+0x218>)
 8003aa4:	429c      	cmp	r4, r3
 8003aa6:	bf08      	it	eq
 8003aa8:	68f4      	ldreq	r4, [r6, #12]
 8003aaa:	e79d      	b.n	80039e8 <_vfiprintf_r+0x20>
 8003aac:	4621      	mov	r1, r4
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f000 fae0 	bl	8004074 <__swsetup_r>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	d09d      	beq.n	80039f4 <_vfiprintf_r+0x2c>
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	b01d      	add	sp, #116	; 0x74
 8003abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac2:	46a8      	mov	r8, r5
 8003ac4:	e7a2      	b.n	8003a0c <_vfiprintf_r+0x44>
 8003ac6:	4a44      	ldr	r2, [pc, #272]	; (8003bd8 <_vfiprintf_r+0x210>)
 8003ac8:	1a80      	subs	r0, r0, r2
 8003aca:	fa0b f000 	lsl.w	r0, fp, r0
 8003ace:	4318      	orrs	r0, r3
 8003ad0:	9004      	str	r0, [sp, #16]
 8003ad2:	4645      	mov	r5, r8
 8003ad4:	e7be      	b.n	8003a54 <_vfiprintf_r+0x8c>
 8003ad6:	9a03      	ldr	r2, [sp, #12]
 8003ad8:	1d11      	adds	r1, r2, #4
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	9103      	str	r1, [sp, #12]
 8003ade:	2a00      	cmp	r2, #0
 8003ae0:	db01      	blt.n	8003ae6 <_vfiprintf_r+0x11e>
 8003ae2:	9207      	str	r2, [sp, #28]
 8003ae4:	e004      	b.n	8003af0 <_vfiprintf_r+0x128>
 8003ae6:	4252      	negs	r2, r2
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	9207      	str	r2, [sp, #28]
 8003aee:	9304      	str	r3, [sp, #16]
 8003af0:	f898 3000 	ldrb.w	r3, [r8]
 8003af4:	2b2e      	cmp	r3, #46	; 0x2e
 8003af6:	d10e      	bne.n	8003b16 <_vfiprintf_r+0x14e>
 8003af8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003afc:	2b2a      	cmp	r3, #42	; 0x2a
 8003afe:	d138      	bne.n	8003b72 <_vfiprintf_r+0x1aa>
 8003b00:	9b03      	ldr	r3, [sp, #12]
 8003b02:	1d1a      	adds	r2, r3, #4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	9203      	str	r2, [sp, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bfb8      	it	lt
 8003b0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b10:	f108 0802 	add.w	r8, r8, #2
 8003b14:	9305      	str	r3, [sp, #20]
 8003b16:	4d33      	ldr	r5, [pc, #204]	; (8003be4 <_vfiprintf_r+0x21c>)
 8003b18:	f898 1000 	ldrb.w	r1, [r8]
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	4628      	mov	r0, r5
 8003b20:	f7fc fb76 	bl	8000210 <memchr>
 8003b24:	b140      	cbz	r0, 8003b38 <_vfiprintf_r+0x170>
 8003b26:	2340      	movs	r3, #64	; 0x40
 8003b28:	1b40      	subs	r0, r0, r5
 8003b2a:	fa03 f000 	lsl.w	r0, r3, r0
 8003b2e:	9b04      	ldr	r3, [sp, #16]
 8003b30:	4303      	orrs	r3, r0
 8003b32:	f108 0801 	add.w	r8, r8, #1
 8003b36:	9304      	str	r3, [sp, #16]
 8003b38:	f898 1000 	ldrb.w	r1, [r8]
 8003b3c:	482a      	ldr	r0, [pc, #168]	; (8003be8 <_vfiprintf_r+0x220>)
 8003b3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b42:	2206      	movs	r2, #6
 8003b44:	f108 0701 	add.w	r7, r8, #1
 8003b48:	f7fc fb62 	bl	8000210 <memchr>
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d037      	beq.n	8003bc0 <_vfiprintf_r+0x1f8>
 8003b50:	4b26      	ldr	r3, [pc, #152]	; (8003bec <_vfiprintf_r+0x224>)
 8003b52:	bb1b      	cbnz	r3, 8003b9c <_vfiprintf_r+0x1d4>
 8003b54:	9b03      	ldr	r3, [sp, #12]
 8003b56:	3307      	adds	r3, #7
 8003b58:	f023 0307 	bic.w	r3, r3, #7
 8003b5c:	3308      	adds	r3, #8
 8003b5e:	9303      	str	r3, [sp, #12]
 8003b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b62:	444b      	add	r3, r9
 8003b64:	9309      	str	r3, [sp, #36]	; 0x24
 8003b66:	e750      	b.n	8003a0a <_vfiprintf_r+0x42>
 8003b68:	fb05 3202 	mla	r2, r5, r2, r3
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	4688      	mov	r8, r1
 8003b70:	e78a      	b.n	8003a88 <_vfiprintf_r+0xc0>
 8003b72:	2300      	movs	r3, #0
 8003b74:	f108 0801 	add.w	r8, r8, #1
 8003b78:	9305      	str	r3, [sp, #20]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	250a      	movs	r5, #10
 8003b7e:	4640      	mov	r0, r8
 8003b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b84:	3a30      	subs	r2, #48	; 0x30
 8003b86:	2a09      	cmp	r2, #9
 8003b88:	d903      	bls.n	8003b92 <_vfiprintf_r+0x1ca>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0c3      	beq.n	8003b16 <_vfiprintf_r+0x14e>
 8003b8e:	9105      	str	r1, [sp, #20]
 8003b90:	e7c1      	b.n	8003b16 <_vfiprintf_r+0x14e>
 8003b92:	fb05 2101 	mla	r1, r5, r1, r2
 8003b96:	2301      	movs	r3, #1
 8003b98:	4680      	mov	r8, r0
 8003b9a:	e7f0      	b.n	8003b7e <_vfiprintf_r+0x1b6>
 8003b9c:	ab03      	add	r3, sp, #12
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	4622      	mov	r2, r4
 8003ba2:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <_vfiprintf_r+0x228>)
 8003ba4:	a904      	add	r1, sp, #16
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f3af 8000 	nop.w
 8003bac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003bb0:	4681      	mov	r9, r0
 8003bb2:	d1d5      	bne.n	8003b60 <_vfiprintf_r+0x198>
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	065b      	lsls	r3, r3, #25
 8003bb8:	f53f af7e 	bmi.w	8003ab8 <_vfiprintf_r+0xf0>
 8003bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bbe:	e77d      	b.n	8003abc <_vfiprintf_r+0xf4>
 8003bc0:	ab03      	add	r3, sp, #12
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	4622      	mov	r2, r4
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <_vfiprintf_r+0x228>)
 8003bc8:	a904      	add	r1, sp, #16
 8003bca:	4630      	mov	r0, r6
 8003bcc:	f000 f888 	bl	8003ce0 <_printf_i>
 8003bd0:	e7ec      	b.n	8003bac <_vfiprintf_r+0x1e4>
 8003bd2:	bf00      	nop
 8003bd4:	08004520 	.word	0x08004520
 8003bd8:	08004560 	.word	0x08004560
 8003bdc:	08004540 	.word	0x08004540
 8003be0:	08004500 	.word	0x08004500
 8003be4:	08004566 	.word	0x08004566
 8003be8:	0800456a 	.word	0x0800456a
 8003bec:	00000000 	.word	0x00000000
 8003bf0:	080039a3 	.word	0x080039a3

08003bf4 <_printf_common>:
 8003bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf8:	4691      	mov	r9, r2
 8003bfa:	461f      	mov	r7, r3
 8003bfc:	688a      	ldr	r2, [r1, #8]
 8003bfe:	690b      	ldr	r3, [r1, #16]
 8003c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c04:	4293      	cmp	r3, r2
 8003c06:	bfb8      	it	lt
 8003c08:	4613      	movlt	r3, r2
 8003c0a:	f8c9 3000 	str.w	r3, [r9]
 8003c0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c12:	4606      	mov	r6, r0
 8003c14:	460c      	mov	r4, r1
 8003c16:	b112      	cbz	r2, 8003c1e <_printf_common+0x2a>
 8003c18:	3301      	adds	r3, #1
 8003c1a:	f8c9 3000 	str.w	r3, [r9]
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	0699      	lsls	r1, r3, #26
 8003c22:	bf42      	ittt	mi
 8003c24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003c28:	3302      	addmi	r3, #2
 8003c2a:	f8c9 3000 	strmi.w	r3, [r9]
 8003c2e:	6825      	ldr	r5, [r4, #0]
 8003c30:	f015 0506 	ands.w	r5, r5, #6
 8003c34:	d107      	bne.n	8003c46 <_printf_common+0x52>
 8003c36:	f104 0a19 	add.w	sl, r4, #25
 8003c3a:	68e3      	ldr	r3, [r4, #12]
 8003c3c:	f8d9 2000 	ldr.w	r2, [r9]
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	42ab      	cmp	r3, r5
 8003c44:	dc28      	bgt.n	8003c98 <_printf_common+0xa4>
 8003c46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c4a:	6822      	ldr	r2, [r4, #0]
 8003c4c:	3300      	adds	r3, #0
 8003c4e:	bf18      	it	ne
 8003c50:	2301      	movne	r3, #1
 8003c52:	0692      	lsls	r2, r2, #26
 8003c54:	d42d      	bmi.n	8003cb2 <_printf_common+0xbe>
 8003c56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c5a:	4639      	mov	r1, r7
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	47c0      	blx	r8
 8003c60:	3001      	adds	r0, #1
 8003c62:	d020      	beq.n	8003ca6 <_printf_common+0xb2>
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	68e5      	ldr	r5, [r4, #12]
 8003c68:	f8d9 2000 	ldr.w	r2, [r9]
 8003c6c:	f003 0306 	and.w	r3, r3, #6
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	bf08      	it	eq
 8003c74:	1aad      	subeq	r5, r5, r2
 8003c76:	68a3      	ldr	r3, [r4, #8]
 8003c78:	6922      	ldr	r2, [r4, #16]
 8003c7a:	bf0c      	ite	eq
 8003c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c80:	2500      	movne	r5, #0
 8003c82:	4293      	cmp	r3, r2
 8003c84:	bfc4      	itt	gt
 8003c86:	1a9b      	subgt	r3, r3, r2
 8003c88:	18ed      	addgt	r5, r5, r3
 8003c8a:	f04f 0900 	mov.w	r9, #0
 8003c8e:	341a      	adds	r4, #26
 8003c90:	454d      	cmp	r5, r9
 8003c92:	d11a      	bne.n	8003cca <_printf_common+0xd6>
 8003c94:	2000      	movs	r0, #0
 8003c96:	e008      	b.n	8003caa <_printf_common+0xb6>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	4652      	mov	r2, sl
 8003c9c:	4639      	mov	r1, r7
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	47c0      	blx	r8
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	d103      	bne.n	8003cae <_printf_common+0xba>
 8003ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8003caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cae:	3501      	adds	r5, #1
 8003cb0:	e7c3      	b.n	8003c3a <_printf_common+0x46>
 8003cb2:	18e1      	adds	r1, r4, r3
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	2030      	movs	r0, #48	; 0x30
 8003cb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cbc:	4422      	add	r2, r4
 8003cbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cc6:	3302      	adds	r3, #2
 8003cc8:	e7c5      	b.n	8003c56 <_printf_common+0x62>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	4622      	mov	r2, r4
 8003cce:	4639      	mov	r1, r7
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	47c0      	blx	r8
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d0e6      	beq.n	8003ca6 <_printf_common+0xb2>
 8003cd8:	f109 0901 	add.w	r9, r9, #1
 8003cdc:	e7d8      	b.n	8003c90 <_printf_common+0x9c>
	...

08003ce0 <_printf_i>:
 8003ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ce4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ce8:	460c      	mov	r4, r1
 8003cea:	7e09      	ldrb	r1, [r1, #24]
 8003cec:	b085      	sub	sp, #20
 8003cee:	296e      	cmp	r1, #110	; 0x6e
 8003cf0:	4617      	mov	r7, r2
 8003cf2:	4606      	mov	r6, r0
 8003cf4:	4698      	mov	r8, r3
 8003cf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003cf8:	f000 80b3 	beq.w	8003e62 <_printf_i+0x182>
 8003cfc:	d822      	bhi.n	8003d44 <_printf_i+0x64>
 8003cfe:	2963      	cmp	r1, #99	; 0x63
 8003d00:	d036      	beq.n	8003d70 <_printf_i+0x90>
 8003d02:	d80a      	bhi.n	8003d1a <_printf_i+0x3a>
 8003d04:	2900      	cmp	r1, #0
 8003d06:	f000 80b9 	beq.w	8003e7c <_printf_i+0x19c>
 8003d0a:	2958      	cmp	r1, #88	; 0x58
 8003d0c:	f000 8083 	beq.w	8003e16 <_printf_i+0x136>
 8003d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003d18:	e032      	b.n	8003d80 <_printf_i+0xa0>
 8003d1a:	2964      	cmp	r1, #100	; 0x64
 8003d1c:	d001      	beq.n	8003d22 <_printf_i+0x42>
 8003d1e:	2969      	cmp	r1, #105	; 0x69
 8003d20:	d1f6      	bne.n	8003d10 <_printf_i+0x30>
 8003d22:	6820      	ldr	r0, [r4, #0]
 8003d24:	6813      	ldr	r3, [r2, #0]
 8003d26:	0605      	lsls	r5, r0, #24
 8003d28:	f103 0104 	add.w	r1, r3, #4
 8003d2c:	d52a      	bpl.n	8003d84 <_printf_i+0xa4>
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6011      	str	r1, [r2, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	da03      	bge.n	8003d3e <_printf_i+0x5e>
 8003d36:	222d      	movs	r2, #45	; 0x2d
 8003d38:	425b      	negs	r3, r3
 8003d3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d3e:	486f      	ldr	r0, [pc, #444]	; (8003efc <_printf_i+0x21c>)
 8003d40:	220a      	movs	r2, #10
 8003d42:	e039      	b.n	8003db8 <_printf_i+0xd8>
 8003d44:	2973      	cmp	r1, #115	; 0x73
 8003d46:	f000 809d 	beq.w	8003e84 <_printf_i+0x1a4>
 8003d4a:	d808      	bhi.n	8003d5e <_printf_i+0x7e>
 8003d4c:	296f      	cmp	r1, #111	; 0x6f
 8003d4e:	d020      	beq.n	8003d92 <_printf_i+0xb2>
 8003d50:	2970      	cmp	r1, #112	; 0x70
 8003d52:	d1dd      	bne.n	8003d10 <_printf_i+0x30>
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	f043 0320 	orr.w	r3, r3, #32
 8003d5a:	6023      	str	r3, [r4, #0]
 8003d5c:	e003      	b.n	8003d66 <_printf_i+0x86>
 8003d5e:	2975      	cmp	r1, #117	; 0x75
 8003d60:	d017      	beq.n	8003d92 <_printf_i+0xb2>
 8003d62:	2978      	cmp	r1, #120	; 0x78
 8003d64:	d1d4      	bne.n	8003d10 <_printf_i+0x30>
 8003d66:	2378      	movs	r3, #120	; 0x78
 8003d68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d6c:	4864      	ldr	r0, [pc, #400]	; (8003f00 <_printf_i+0x220>)
 8003d6e:	e055      	b.n	8003e1c <_printf_i+0x13c>
 8003d70:	6813      	ldr	r3, [r2, #0]
 8003d72:	1d19      	adds	r1, r3, #4
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6011      	str	r1, [r2, #0]
 8003d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d80:	2301      	movs	r3, #1
 8003d82:	e08c      	b.n	8003e9e <_printf_i+0x1be>
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6011      	str	r1, [r2, #0]
 8003d88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d8c:	bf18      	it	ne
 8003d8e:	b21b      	sxthne	r3, r3
 8003d90:	e7cf      	b.n	8003d32 <_printf_i+0x52>
 8003d92:	6813      	ldr	r3, [r2, #0]
 8003d94:	6825      	ldr	r5, [r4, #0]
 8003d96:	1d18      	adds	r0, r3, #4
 8003d98:	6010      	str	r0, [r2, #0]
 8003d9a:	0628      	lsls	r0, r5, #24
 8003d9c:	d501      	bpl.n	8003da2 <_printf_i+0xc2>
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	e002      	b.n	8003da8 <_printf_i+0xc8>
 8003da2:	0668      	lsls	r0, r5, #25
 8003da4:	d5fb      	bpl.n	8003d9e <_printf_i+0xbe>
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	4854      	ldr	r0, [pc, #336]	; (8003efc <_printf_i+0x21c>)
 8003daa:	296f      	cmp	r1, #111	; 0x6f
 8003dac:	bf14      	ite	ne
 8003dae:	220a      	movne	r2, #10
 8003db0:	2208      	moveq	r2, #8
 8003db2:	2100      	movs	r1, #0
 8003db4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003db8:	6865      	ldr	r5, [r4, #4]
 8003dba:	60a5      	str	r5, [r4, #8]
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	f2c0 8095 	blt.w	8003eec <_printf_i+0x20c>
 8003dc2:	6821      	ldr	r1, [r4, #0]
 8003dc4:	f021 0104 	bic.w	r1, r1, #4
 8003dc8:	6021      	str	r1, [r4, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d13d      	bne.n	8003e4a <_printf_i+0x16a>
 8003dce:	2d00      	cmp	r5, #0
 8003dd0:	f040 808e 	bne.w	8003ef0 <_printf_i+0x210>
 8003dd4:	4665      	mov	r5, ip
 8003dd6:	2a08      	cmp	r2, #8
 8003dd8:	d10b      	bne.n	8003df2 <_printf_i+0x112>
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	07db      	lsls	r3, r3, #31
 8003dde:	d508      	bpl.n	8003df2 <_printf_i+0x112>
 8003de0:	6923      	ldr	r3, [r4, #16]
 8003de2:	6862      	ldr	r2, [r4, #4]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	bfde      	ittt	le
 8003de8:	2330      	movle	r3, #48	; 0x30
 8003dea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003df2:	ebac 0305 	sub.w	r3, ip, r5
 8003df6:	6123      	str	r3, [r4, #16]
 8003df8:	f8cd 8000 	str.w	r8, [sp]
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	aa03      	add	r2, sp, #12
 8003e00:	4621      	mov	r1, r4
 8003e02:	4630      	mov	r0, r6
 8003e04:	f7ff fef6 	bl	8003bf4 <_printf_common>
 8003e08:	3001      	adds	r0, #1
 8003e0a:	d14d      	bne.n	8003ea8 <_printf_i+0x1c8>
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e10:	b005      	add	sp, #20
 8003e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e16:	4839      	ldr	r0, [pc, #228]	; (8003efc <_printf_i+0x21c>)
 8003e18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003e1c:	6813      	ldr	r3, [r2, #0]
 8003e1e:	6821      	ldr	r1, [r4, #0]
 8003e20:	1d1d      	adds	r5, r3, #4
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6015      	str	r5, [r2, #0]
 8003e26:	060a      	lsls	r2, r1, #24
 8003e28:	d50b      	bpl.n	8003e42 <_printf_i+0x162>
 8003e2a:	07ca      	lsls	r2, r1, #31
 8003e2c:	bf44      	itt	mi
 8003e2e:	f041 0120 	orrmi.w	r1, r1, #32
 8003e32:	6021      	strmi	r1, [r4, #0]
 8003e34:	b91b      	cbnz	r3, 8003e3e <_printf_i+0x15e>
 8003e36:	6822      	ldr	r2, [r4, #0]
 8003e38:	f022 0220 	bic.w	r2, r2, #32
 8003e3c:	6022      	str	r2, [r4, #0]
 8003e3e:	2210      	movs	r2, #16
 8003e40:	e7b7      	b.n	8003db2 <_printf_i+0xd2>
 8003e42:	064d      	lsls	r5, r1, #25
 8003e44:	bf48      	it	mi
 8003e46:	b29b      	uxthmi	r3, r3
 8003e48:	e7ef      	b.n	8003e2a <_printf_i+0x14a>
 8003e4a:	4665      	mov	r5, ip
 8003e4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e50:	fb02 3311 	mls	r3, r2, r1, r3
 8003e54:	5cc3      	ldrb	r3, [r0, r3]
 8003e56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	2900      	cmp	r1, #0
 8003e5e:	d1f5      	bne.n	8003e4c <_printf_i+0x16c>
 8003e60:	e7b9      	b.n	8003dd6 <_printf_i+0xf6>
 8003e62:	6813      	ldr	r3, [r2, #0]
 8003e64:	6825      	ldr	r5, [r4, #0]
 8003e66:	6961      	ldr	r1, [r4, #20]
 8003e68:	1d18      	adds	r0, r3, #4
 8003e6a:	6010      	str	r0, [r2, #0]
 8003e6c:	0628      	lsls	r0, r5, #24
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	d501      	bpl.n	8003e76 <_printf_i+0x196>
 8003e72:	6019      	str	r1, [r3, #0]
 8003e74:	e002      	b.n	8003e7c <_printf_i+0x19c>
 8003e76:	066a      	lsls	r2, r5, #25
 8003e78:	d5fb      	bpl.n	8003e72 <_printf_i+0x192>
 8003e7a:	8019      	strh	r1, [r3, #0]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	6123      	str	r3, [r4, #16]
 8003e80:	4665      	mov	r5, ip
 8003e82:	e7b9      	b.n	8003df8 <_printf_i+0x118>
 8003e84:	6813      	ldr	r3, [r2, #0]
 8003e86:	1d19      	adds	r1, r3, #4
 8003e88:	6011      	str	r1, [r2, #0]
 8003e8a:	681d      	ldr	r5, [r3, #0]
 8003e8c:	6862      	ldr	r2, [r4, #4]
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4628      	mov	r0, r5
 8003e92:	f7fc f9bd 	bl	8000210 <memchr>
 8003e96:	b108      	cbz	r0, 8003e9c <_printf_i+0x1bc>
 8003e98:	1b40      	subs	r0, r0, r5
 8003e9a:	6060      	str	r0, [r4, #4]
 8003e9c:	6863      	ldr	r3, [r4, #4]
 8003e9e:	6123      	str	r3, [r4, #16]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ea6:	e7a7      	b.n	8003df8 <_printf_i+0x118>
 8003ea8:	6923      	ldr	r3, [r4, #16]
 8003eaa:	462a      	mov	r2, r5
 8003eac:	4639      	mov	r1, r7
 8003eae:	4630      	mov	r0, r6
 8003eb0:	47c0      	blx	r8
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d0aa      	beq.n	8003e0c <_printf_i+0x12c>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	079b      	lsls	r3, r3, #30
 8003eba:	d413      	bmi.n	8003ee4 <_printf_i+0x204>
 8003ebc:	68e0      	ldr	r0, [r4, #12]
 8003ebe:	9b03      	ldr	r3, [sp, #12]
 8003ec0:	4298      	cmp	r0, r3
 8003ec2:	bfb8      	it	lt
 8003ec4:	4618      	movlt	r0, r3
 8003ec6:	e7a3      	b.n	8003e10 <_printf_i+0x130>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	464a      	mov	r2, r9
 8003ecc:	4639      	mov	r1, r7
 8003ece:	4630      	mov	r0, r6
 8003ed0:	47c0      	blx	r8
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	d09a      	beq.n	8003e0c <_printf_i+0x12c>
 8003ed6:	3501      	adds	r5, #1
 8003ed8:	68e3      	ldr	r3, [r4, #12]
 8003eda:	9a03      	ldr	r2, [sp, #12]
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	42ab      	cmp	r3, r5
 8003ee0:	dcf2      	bgt.n	8003ec8 <_printf_i+0x1e8>
 8003ee2:	e7eb      	b.n	8003ebc <_printf_i+0x1dc>
 8003ee4:	2500      	movs	r5, #0
 8003ee6:	f104 0919 	add.w	r9, r4, #25
 8003eea:	e7f5      	b.n	8003ed8 <_printf_i+0x1f8>
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1ac      	bne.n	8003e4a <_printf_i+0x16a>
 8003ef0:	7803      	ldrb	r3, [r0, #0]
 8003ef2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ef6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003efa:	e76c      	b.n	8003dd6 <_printf_i+0xf6>
 8003efc:	08004571 	.word	0x08004571
 8003f00:	08004582 	.word	0x08004582

08003f04 <_sbrk_r>:
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	4c06      	ldr	r4, [pc, #24]	; (8003f20 <_sbrk_r+0x1c>)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	4605      	mov	r5, r0
 8003f0c:	4608      	mov	r0, r1
 8003f0e:	6023      	str	r3, [r4, #0]
 8003f10:	f7fc fe8a 	bl	8000c28 <_sbrk>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	d102      	bne.n	8003f1e <_sbrk_r+0x1a>
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	b103      	cbz	r3, 8003f1e <_sbrk_r+0x1a>
 8003f1c:	602b      	str	r3, [r5, #0]
 8003f1e:	bd38      	pop	{r3, r4, r5, pc}
 8003f20:	20000134 	.word	0x20000134

08003f24 <__sread>:
 8003f24:	b510      	push	{r4, lr}
 8003f26:	460c      	mov	r4, r1
 8003f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f2c:	f000 fa96 	bl	800445c <_read_r>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	bfab      	itete	ge
 8003f34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f36:	89a3      	ldrhlt	r3, [r4, #12]
 8003f38:	181b      	addge	r3, r3, r0
 8003f3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f3e:	bfac      	ite	ge
 8003f40:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f42:	81a3      	strhlt	r3, [r4, #12]
 8003f44:	bd10      	pop	{r4, pc}

08003f46 <__swrite>:
 8003f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4a:	461f      	mov	r7, r3
 8003f4c:	898b      	ldrh	r3, [r1, #12]
 8003f4e:	05db      	lsls	r3, r3, #23
 8003f50:	4605      	mov	r5, r0
 8003f52:	460c      	mov	r4, r1
 8003f54:	4616      	mov	r6, r2
 8003f56:	d505      	bpl.n	8003f64 <__swrite+0x1e>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f60:	f000 f9b6 	bl	80042d0 <_lseek_r>
 8003f64:	89a3      	ldrh	r3, [r4, #12]
 8003f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f6e:	81a3      	strh	r3, [r4, #12]
 8003f70:	4632      	mov	r2, r6
 8003f72:	463b      	mov	r3, r7
 8003f74:	4628      	mov	r0, r5
 8003f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f7a:	f000 b869 	b.w	8004050 <_write_r>

08003f7e <__sseek>:
 8003f7e:	b510      	push	{r4, lr}
 8003f80:	460c      	mov	r4, r1
 8003f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f86:	f000 f9a3 	bl	80042d0 <_lseek_r>
 8003f8a:	1c43      	adds	r3, r0, #1
 8003f8c:	89a3      	ldrh	r3, [r4, #12]
 8003f8e:	bf15      	itete	ne
 8003f90:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f9a:	81a3      	strheq	r3, [r4, #12]
 8003f9c:	bf18      	it	ne
 8003f9e:	81a3      	strhne	r3, [r4, #12]
 8003fa0:	bd10      	pop	{r4, pc}

08003fa2 <__sclose>:
 8003fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa6:	f000 b8d3 	b.w	8004150 <_close_r>
	...

08003fac <__swbuf_r>:
 8003fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fae:	460e      	mov	r6, r1
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	4605      	mov	r5, r0
 8003fb4:	b118      	cbz	r0, 8003fbe <__swbuf_r+0x12>
 8003fb6:	6983      	ldr	r3, [r0, #24]
 8003fb8:	b90b      	cbnz	r3, 8003fbe <__swbuf_r+0x12>
 8003fba:	f7ff fbf7 	bl	80037ac <__sinit>
 8003fbe:	4b21      	ldr	r3, [pc, #132]	; (8004044 <__swbuf_r+0x98>)
 8003fc0:	429c      	cmp	r4, r3
 8003fc2:	d12a      	bne.n	800401a <__swbuf_r+0x6e>
 8003fc4:	686c      	ldr	r4, [r5, #4]
 8003fc6:	69a3      	ldr	r3, [r4, #24]
 8003fc8:	60a3      	str	r3, [r4, #8]
 8003fca:	89a3      	ldrh	r3, [r4, #12]
 8003fcc:	071a      	lsls	r2, r3, #28
 8003fce:	d52e      	bpl.n	800402e <__swbuf_r+0x82>
 8003fd0:	6923      	ldr	r3, [r4, #16]
 8003fd2:	b363      	cbz	r3, 800402e <__swbuf_r+0x82>
 8003fd4:	6923      	ldr	r3, [r4, #16]
 8003fd6:	6820      	ldr	r0, [r4, #0]
 8003fd8:	1ac0      	subs	r0, r0, r3
 8003fda:	6963      	ldr	r3, [r4, #20]
 8003fdc:	b2f6      	uxtb	r6, r6
 8003fde:	4283      	cmp	r3, r0
 8003fe0:	4637      	mov	r7, r6
 8003fe2:	dc04      	bgt.n	8003fee <__swbuf_r+0x42>
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	f000 f948 	bl	800427c <_fflush_r>
 8003fec:	bb28      	cbnz	r0, 800403a <__swbuf_r+0x8e>
 8003fee:	68a3      	ldr	r3, [r4, #8]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	60a3      	str	r3, [r4, #8]
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	6022      	str	r2, [r4, #0]
 8003ffa:	701e      	strb	r6, [r3, #0]
 8003ffc:	6963      	ldr	r3, [r4, #20]
 8003ffe:	3001      	adds	r0, #1
 8004000:	4283      	cmp	r3, r0
 8004002:	d004      	beq.n	800400e <__swbuf_r+0x62>
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	07db      	lsls	r3, r3, #31
 8004008:	d519      	bpl.n	800403e <__swbuf_r+0x92>
 800400a:	2e0a      	cmp	r6, #10
 800400c:	d117      	bne.n	800403e <__swbuf_r+0x92>
 800400e:	4621      	mov	r1, r4
 8004010:	4628      	mov	r0, r5
 8004012:	f000 f933 	bl	800427c <_fflush_r>
 8004016:	b190      	cbz	r0, 800403e <__swbuf_r+0x92>
 8004018:	e00f      	b.n	800403a <__swbuf_r+0x8e>
 800401a:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <__swbuf_r+0x9c>)
 800401c:	429c      	cmp	r4, r3
 800401e:	d101      	bne.n	8004024 <__swbuf_r+0x78>
 8004020:	68ac      	ldr	r4, [r5, #8]
 8004022:	e7d0      	b.n	8003fc6 <__swbuf_r+0x1a>
 8004024:	4b09      	ldr	r3, [pc, #36]	; (800404c <__swbuf_r+0xa0>)
 8004026:	429c      	cmp	r4, r3
 8004028:	bf08      	it	eq
 800402a:	68ec      	ldreq	r4, [r5, #12]
 800402c:	e7cb      	b.n	8003fc6 <__swbuf_r+0x1a>
 800402e:	4621      	mov	r1, r4
 8004030:	4628      	mov	r0, r5
 8004032:	f000 f81f 	bl	8004074 <__swsetup_r>
 8004036:	2800      	cmp	r0, #0
 8004038:	d0cc      	beq.n	8003fd4 <__swbuf_r+0x28>
 800403a:	f04f 37ff 	mov.w	r7, #4294967295
 800403e:	4638      	mov	r0, r7
 8004040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004042:	bf00      	nop
 8004044:	08004520 	.word	0x08004520
 8004048:	08004540 	.word	0x08004540
 800404c:	08004500 	.word	0x08004500

08004050 <_write_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	4c07      	ldr	r4, [pc, #28]	; (8004070 <_write_r+0x20>)
 8004054:	4605      	mov	r5, r0
 8004056:	4608      	mov	r0, r1
 8004058:	4611      	mov	r1, r2
 800405a:	2200      	movs	r2, #0
 800405c:	6022      	str	r2, [r4, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	f7fc fd91 	bl	8000b86 <_write>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d102      	bne.n	800406e <_write_r+0x1e>
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	b103      	cbz	r3, 800406e <_write_r+0x1e>
 800406c:	602b      	str	r3, [r5, #0]
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	20000134 	.word	0x20000134

08004074 <__swsetup_r>:
 8004074:	4b32      	ldr	r3, [pc, #200]	; (8004140 <__swsetup_r+0xcc>)
 8004076:	b570      	push	{r4, r5, r6, lr}
 8004078:	681d      	ldr	r5, [r3, #0]
 800407a:	4606      	mov	r6, r0
 800407c:	460c      	mov	r4, r1
 800407e:	b125      	cbz	r5, 800408a <__swsetup_r+0x16>
 8004080:	69ab      	ldr	r3, [r5, #24]
 8004082:	b913      	cbnz	r3, 800408a <__swsetup_r+0x16>
 8004084:	4628      	mov	r0, r5
 8004086:	f7ff fb91 	bl	80037ac <__sinit>
 800408a:	4b2e      	ldr	r3, [pc, #184]	; (8004144 <__swsetup_r+0xd0>)
 800408c:	429c      	cmp	r4, r3
 800408e:	d10f      	bne.n	80040b0 <__swsetup_r+0x3c>
 8004090:	686c      	ldr	r4, [r5, #4]
 8004092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004096:	b29a      	uxth	r2, r3
 8004098:	0715      	lsls	r5, r2, #28
 800409a:	d42c      	bmi.n	80040f6 <__swsetup_r+0x82>
 800409c:	06d0      	lsls	r0, r2, #27
 800409e:	d411      	bmi.n	80040c4 <__swsetup_r+0x50>
 80040a0:	2209      	movs	r2, #9
 80040a2:	6032      	str	r2, [r6, #0]
 80040a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a8:	81a3      	strh	r3, [r4, #12]
 80040aa:	f04f 30ff 	mov.w	r0, #4294967295
 80040ae:	e03e      	b.n	800412e <__swsetup_r+0xba>
 80040b0:	4b25      	ldr	r3, [pc, #148]	; (8004148 <__swsetup_r+0xd4>)
 80040b2:	429c      	cmp	r4, r3
 80040b4:	d101      	bne.n	80040ba <__swsetup_r+0x46>
 80040b6:	68ac      	ldr	r4, [r5, #8]
 80040b8:	e7eb      	b.n	8004092 <__swsetup_r+0x1e>
 80040ba:	4b24      	ldr	r3, [pc, #144]	; (800414c <__swsetup_r+0xd8>)
 80040bc:	429c      	cmp	r4, r3
 80040be:	bf08      	it	eq
 80040c0:	68ec      	ldreq	r4, [r5, #12]
 80040c2:	e7e6      	b.n	8004092 <__swsetup_r+0x1e>
 80040c4:	0751      	lsls	r1, r2, #29
 80040c6:	d512      	bpl.n	80040ee <__swsetup_r+0x7a>
 80040c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040ca:	b141      	cbz	r1, 80040de <__swsetup_r+0x6a>
 80040cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040d0:	4299      	cmp	r1, r3
 80040d2:	d002      	beq.n	80040da <__swsetup_r+0x66>
 80040d4:	4630      	mov	r0, r6
 80040d6:	f000 f973 	bl	80043c0 <_free_r>
 80040da:	2300      	movs	r3, #0
 80040dc:	6363      	str	r3, [r4, #52]	; 0x34
 80040de:	89a3      	ldrh	r3, [r4, #12]
 80040e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040e4:	81a3      	strh	r3, [r4, #12]
 80040e6:	2300      	movs	r3, #0
 80040e8:	6063      	str	r3, [r4, #4]
 80040ea:	6923      	ldr	r3, [r4, #16]
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	f043 0308 	orr.w	r3, r3, #8
 80040f4:	81a3      	strh	r3, [r4, #12]
 80040f6:	6923      	ldr	r3, [r4, #16]
 80040f8:	b94b      	cbnz	r3, 800410e <__swsetup_r+0x9a>
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004104:	d003      	beq.n	800410e <__swsetup_r+0x9a>
 8004106:	4621      	mov	r1, r4
 8004108:	4630      	mov	r0, r6
 800410a:	f000 f917 	bl	800433c <__smakebuf_r>
 800410e:	89a2      	ldrh	r2, [r4, #12]
 8004110:	f012 0301 	ands.w	r3, r2, #1
 8004114:	d00c      	beq.n	8004130 <__swsetup_r+0xbc>
 8004116:	2300      	movs	r3, #0
 8004118:	60a3      	str	r3, [r4, #8]
 800411a:	6963      	ldr	r3, [r4, #20]
 800411c:	425b      	negs	r3, r3
 800411e:	61a3      	str	r3, [r4, #24]
 8004120:	6923      	ldr	r3, [r4, #16]
 8004122:	b953      	cbnz	r3, 800413a <__swsetup_r+0xc6>
 8004124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004128:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800412c:	d1ba      	bne.n	80040a4 <__swsetup_r+0x30>
 800412e:	bd70      	pop	{r4, r5, r6, pc}
 8004130:	0792      	lsls	r2, r2, #30
 8004132:	bf58      	it	pl
 8004134:	6963      	ldrpl	r3, [r4, #20]
 8004136:	60a3      	str	r3, [r4, #8]
 8004138:	e7f2      	b.n	8004120 <__swsetup_r+0xac>
 800413a:	2000      	movs	r0, #0
 800413c:	e7f7      	b.n	800412e <__swsetup_r+0xba>
 800413e:	bf00      	nop
 8004140:	2000000c 	.word	0x2000000c
 8004144:	08004520 	.word	0x08004520
 8004148:	08004540 	.word	0x08004540
 800414c:	08004500 	.word	0x08004500

08004150 <_close_r>:
 8004150:	b538      	push	{r3, r4, r5, lr}
 8004152:	4c06      	ldr	r4, [pc, #24]	; (800416c <_close_r+0x1c>)
 8004154:	2300      	movs	r3, #0
 8004156:	4605      	mov	r5, r0
 8004158:	4608      	mov	r0, r1
 800415a:	6023      	str	r3, [r4, #0]
 800415c:	f7fc fd2f 	bl	8000bbe <_close>
 8004160:	1c43      	adds	r3, r0, #1
 8004162:	d102      	bne.n	800416a <_close_r+0x1a>
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	b103      	cbz	r3, 800416a <_close_r+0x1a>
 8004168:	602b      	str	r3, [r5, #0]
 800416a:	bd38      	pop	{r3, r4, r5, pc}
 800416c:	20000134 	.word	0x20000134

08004170 <__sflush_r>:
 8004170:	898a      	ldrh	r2, [r1, #12]
 8004172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004176:	4605      	mov	r5, r0
 8004178:	0710      	lsls	r0, r2, #28
 800417a:	460c      	mov	r4, r1
 800417c:	d458      	bmi.n	8004230 <__sflush_r+0xc0>
 800417e:	684b      	ldr	r3, [r1, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	dc05      	bgt.n	8004190 <__sflush_r+0x20>
 8004184:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	dc02      	bgt.n	8004190 <__sflush_r+0x20>
 800418a:	2000      	movs	r0, #0
 800418c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004192:	2e00      	cmp	r6, #0
 8004194:	d0f9      	beq.n	800418a <__sflush_r+0x1a>
 8004196:	2300      	movs	r3, #0
 8004198:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800419c:	682f      	ldr	r7, [r5, #0]
 800419e:	6a21      	ldr	r1, [r4, #32]
 80041a0:	602b      	str	r3, [r5, #0]
 80041a2:	d032      	beq.n	800420a <__sflush_r+0x9a>
 80041a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041a6:	89a3      	ldrh	r3, [r4, #12]
 80041a8:	075a      	lsls	r2, r3, #29
 80041aa:	d505      	bpl.n	80041b8 <__sflush_r+0x48>
 80041ac:	6863      	ldr	r3, [r4, #4]
 80041ae:	1ac0      	subs	r0, r0, r3
 80041b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041b2:	b10b      	cbz	r3, 80041b8 <__sflush_r+0x48>
 80041b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041b6:	1ac0      	subs	r0, r0, r3
 80041b8:	2300      	movs	r3, #0
 80041ba:	4602      	mov	r2, r0
 80041bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041be:	6a21      	ldr	r1, [r4, #32]
 80041c0:	4628      	mov	r0, r5
 80041c2:	47b0      	blx	r6
 80041c4:	1c43      	adds	r3, r0, #1
 80041c6:	89a3      	ldrh	r3, [r4, #12]
 80041c8:	d106      	bne.n	80041d8 <__sflush_r+0x68>
 80041ca:	6829      	ldr	r1, [r5, #0]
 80041cc:	291d      	cmp	r1, #29
 80041ce:	d848      	bhi.n	8004262 <__sflush_r+0xf2>
 80041d0:	4a29      	ldr	r2, [pc, #164]	; (8004278 <__sflush_r+0x108>)
 80041d2:	40ca      	lsrs	r2, r1
 80041d4:	07d6      	lsls	r6, r2, #31
 80041d6:	d544      	bpl.n	8004262 <__sflush_r+0xf2>
 80041d8:	2200      	movs	r2, #0
 80041da:	6062      	str	r2, [r4, #4]
 80041dc:	04d9      	lsls	r1, r3, #19
 80041de:	6922      	ldr	r2, [r4, #16]
 80041e0:	6022      	str	r2, [r4, #0]
 80041e2:	d504      	bpl.n	80041ee <__sflush_r+0x7e>
 80041e4:	1c42      	adds	r2, r0, #1
 80041e6:	d101      	bne.n	80041ec <__sflush_r+0x7c>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	b903      	cbnz	r3, 80041ee <__sflush_r+0x7e>
 80041ec:	6560      	str	r0, [r4, #84]	; 0x54
 80041ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041f0:	602f      	str	r7, [r5, #0]
 80041f2:	2900      	cmp	r1, #0
 80041f4:	d0c9      	beq.n	800418a <__sflush_r+0x1a>
 80041f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041fa:	4299      	cmp	r1, r3
 80041fc:	d002      	beq.n	8004204 <__sflush_r+0x94>
 80041fe:	4628      	mov	r0, r5
 8004200:	f000 f8de 	bl	80043c0 <_free_r>
 8004204:	2000      	movs	r0, #0
 8004206:	6360      	str	r0, [r4, #52]	; 0x34
 8004208:	e7c0      	b.n	800418c <__sflush_r+0x1c>
 800420a:	2301      	movs	r3, #1
 800420c:	4628      	mov	r0, r5
 800420e:	47b0      	blx	r6
 8004210:	1c41      	adds	r1, r0, #1
 8004212:	d1c8      	bne.n	80041a6 <__sflush_r+0x36>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0c5      	beq.n	80041a6 <__sflush_r+0x36>
 800421a:	2b1d      	cmp	r3, #29
 800421c:	d001      	beq.n	8004222 <__sflush_r+0xb2>
 800421e:	2b16      	cmp	r3, #22
 8004220:	d101      	bne.n	8004226 <__sflush_r+0xb6>
 8004222:	602f      	str	r7, [r5, #0]
 8004224:	e7b1      	b.n	800418a <__sflush_r+0x1a>
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800422c:	81a3      	strh	r3, [r4, #12]
 800422e:	e7ad      	b.n	800418c <__sflush_r+0x1c>
 8004230:	690f      	ldr	r7, [r1, #16]
 8004232:	2f00      	cmp	r7, #0
 8004234:	d0a9      	beq.n	800418a <__sflush_r+0x1a>
 8004236:	0793      	lsls	r3, r2, #30
 8004238:	680e      	ldr	r6, [r1, #0]
 800423a:	bf08      	it	eq
 800423c:	694b      	ldreq	r3, [r1, #20]
 800423e:	600f      	str	r7, [r1, #0]
 8004240:	bf18      	it	ne
 8004242:	2300      	movne	r3, #0
 8004244:	eba6 0807 	sub.w	r8, r6, r7
 8004248:	608b      	str	r3, [r1, #8]
 800424a:	f1b8 0f00 	cmp.w	r8, #0
 800424e:	dd9c      	ble.n	800418a <__sflush_r+0x1a>
 8004250:	4643      	mov	r3, r8
 8004252:	463a      	mov	r2, r7
 8004254:	6a21      	ldr	r1, [r4, #32]
 8004256:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004258:	4628      	mov	r0, r5
 800425a:	47b0      	blx	r6
 800425c:	2800      	cmp	r0, #0
 800425e:	dc06      	bgt.n	800426e <__sflush_r+0xfe>
 8004260:	89a3      	ldrh	r3, [r4, #12]
 8004262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004266:	81a3      	strh	r3, [r4, #12]
 8004268:	f04f 30ff 	mov.w	r0, #4294967295
 800426c:	e78e      	b.n	800418c <__sflush_r+0x1c>
 800426e:	4407      	add	r7, r0
 8004270:	eba8 0800 	sub.w	r8, r8, r0
 8004274:	e7e9      	b.n	800424a <__sflush_r+0xda>
 8004276:	bf00      	nop
 8004278:	20400001 	.word	0x20400001

0800427c <_fflush_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	690b      	ldr	r3, [r1, #16]
 8004280:	4605      	mov	r5, r0
 8004282:	460c      	mov	r4, r1
 8004284:	b1db      	cbz	r3, 80042be <_fflush_r+0x42>
 8004286:	b118      	cbz	r0, 8004290 <_fflush_r+0x14>
 8004288:	6983      	ldr	r3, [r0, #24]
 800428a:	b90b      	cbnz	r3, 8004290 <_fflush_r+0x14>
 800428c:	f7ff fa8e 	bl	80037ac <__sinit>
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <_fflush_r+0x48>)
 8004292:	429c      	cmp	r4, r3
 8004294:	d109      	bne.n	80042aa <_fflush_r+0x2e>
 8004296:	686c      	ldr	r4, [r5, #4]
 8004298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800429c:	b17b      	cbz	r3, 80042be <_fflush_r+0x42>
 800429e:	4621      	mov	r1, r4
 80042a0:	4628      	mov	r0, r5
 80042a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042a6:	f7ff bf63 	b.w	8004170 <__sflush_r>
 80042aa:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <_fflush_r+0x4c>)
 80042ac:	429c      	cmp	r4, r3
 80042ae:	d101      	bne.n	80042b4 <_fflush_r+0x38>
 80042b0:	68ac      	ldr	r4, [r5, #8]
 80042b2:	e7f1      	b.n	8004298 <_fflush_r+0x1c>
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <_fflush_r+0x50>)
 80042b6:	429c      	cmp	r4, r3
 80042b8:	bf08      	it	eq
 80042ba:	68ec      	ldreq	r4, [r5, #12]
 80042bc:	e7ec      	b.n	8004298 <_fflush_r+0x1c>
 80042be:	2000      	movs	r0, #0
 80042c0:	bd38      	pop	{r3, r4, r5, pc}
 80042c2:	bf00      	nop
 80042c4:	08004520 	.word	0x08004520
 80042c8:	08004540 	.word	0x08004540
 80042cc:	08004500 	.word	0x08004500

080042d0 <_lseek_r>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	4c07      	ldr	r4, [pc, #28]	; (80042f0 <_lseek_r+0x20>)
 80042d4:	4605      	mov	r5, r0
 80042d6:	4608      	mov	r0, r1
 80042d8:	4611      	mov	r1, r2
 80042da:	2200      	movs	r2, #0
 80042dc:	6022      	str	r2, [r4, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	f7fc fc94 	bl	8000c0c <_lseek>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d102      	bne.n	80042ee <_lseek_r+0x1e>
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	b103      	cbz	r3, 80042ee <_lseek_r+0x1e>
 80042ec:	602b      	str	r3, [r5, #0]
 80042ee:	bd38      	pop	{r3, r4, r5, pc}
 80042f0:	20000134 	.word	0x20000134

080042f4 <__swhatbuf_r>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	460e      	mov	r6, r1
 80042f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042fc:	2900      	cmp	r1, #0
 80042fe:	b096      	sub	sp, #88	; 0x58
 8004300:	4614      	mov	r4, r2
 8004302:	461d      	mov	r5, r3
 8004304:	da07      	bge.n	8004316 <__swhatbuf_r+0x22>
 8004306:	2300      	movs	r3, #0
 8004308:	602b      	str	r3, [r5, #0]
 800430a:	89b3      	ldrh	r3, [r6, #12]
 800430c:	061a      	lsls	r2, r3, #24
 800430e:	d410      	bmi.n	8004332 <__swhatbuf_r+0x3e>
 8004310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004314:	e00e      	b.n	8004334 <__swhatbuf_r+0x40>
 8004316:	466a      	mov	r2, sp
 8004318:	f000 f8b2 	bl	8004480 <_fstat_r>
 800431c:	2800      	cmp	r0, #0
 800431e:	dbf2      	blt.n	8004306 <__swhatbuf_r+0x12>
 8004320:	9a01      	ldr	r2, [sp, #4]
 8004322:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004326:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800432a:	425a      	negs	r2, r3
 800432c:	415a      	adcs	r2, r3
 800432e:	602a      	str	r2, [r5, #0]
 8004330:	e7ee      	b.n	8004310 <__swhatbuf_r+0x1c>
 8004332:	2340      	movs	r3, #64	; 0x40
 8004334:	2000      	movs	r0, #0
 8004336:	6023      	str	r3, [r4, #0]
 8004338:	b016      	add	sp, #88	; 0x58
 800433a:	bd70      	pop	{r4, r5, r6, pc}

0800433c <__smakebuf_r>:
 800433c:	898b      	ldrh	r3, [r1, #12]
 800433e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004340:	079d      	lsls	r5, r3, #30
 8004342:	4606      	mov	r6, r0
 8004344:	460c      	mov	r4, r1
 8004346:	d507      	bpl.n	8004358 <__smakebuf_r+0x1c>
 8004348:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	6123      	str	r3, [r4, #16]
 8004350:	2301      	movs	r3, #1
 8004352:	6163      	str	r3, [r4, #20]
 8004354:	b002      	add	sp, #8
 8004356:	bd70      	pop	{r4, r5, r6, pc}
 8004358:	ab01      	add	r3, sp, #4
 800435a:	466a      	mov	r2, sp
 800435c:	f7ff ffca 	bl	80042f4 <__swhatbuf_r>
 8004360:	9900      	ldr	r1, [sp, #0]
 8004362:	4605      	mov	r5, r0
 8004364:	4630      	mov	r0, r6
 8004366:	f7ff faab 	bl	80038c0 <_malloc_r>
 800436a:	b948      	cbnz	r0, 8004380 <__smakebuf_r+0x44>
 800436c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004370:	059a      	lsls	r2, r3, #22
 8004372:	d4ef      	bmi.n	8004354 <__smakebuf_r+0x18>
 8004374:	f023 0303 	bic.w	r3, r3, #3
 8004378:	f043 0302 	orr.w	r3, r3, #2
 800437c:	81a3      	strh	r3, [r4, #12]
 800437e:	e7e3      	b.n	8004348 <__smakebuf_r+0xc>
 8004380:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <__smakebuf_r+0x7c>)
 8004382:	62b3      	str	r3, [r6, #40]	; 0x28
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	6020      	str	r0, [r4, #0]
 8004388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438c:	81a3      	strh	r3, [r4, #12]
 800438e:	9b00      	ldr	r3, [sp, #0]
 8004390:	6163      	str	r3, [r4, #20]
 8004392:	9b01      	ldr	r3, [sp, #4]
 8004394:	6120      	str	r0, [r4, #16]
 8004396:	b15b      	cbz	r3, 80043b0 <__smakebuf_r+0x74>
 8004398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800439c:	4630      	mov	r0, r6
 800439e:	f000 f881 	bl	80044a4 <_isatty_r>
 80043a2:	b128      	cbz	r0, 80043b0 <__smakebuf_r+0x74>
 80043a4:	89a3      	ldrh	r3, [r4, #12]
 80043a6:	f023 0303 	bic.w	r3, r3, #3
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	81a3      	strh	r3, [r4, #12]
 80043b0:	89a3      	ldrh	r3, [r4, #12]
 80043b2:	431d      	orrs	r5, r3
 80043b4:	81a5      	strh	r5, [r4, #12]
 80043b6:	e7cd      	b.n	8004354 <__smakebuf_r+0x18>
 80043b8:	08003775 	.word	0x08003775

080043bc <__malloc_lock>:
 80043bc:	4770      	bx	lr

080043be <__malloc_unlock>:
 80043be:	4770      	bx	lr

080043c0 <_free_r>:
 80043c0:	b538      	push	{r3, r4, r5, lr}
 80043c2:	4605      	mov	r5, r0
 80043c4:	2900      	cmp	r1, #0
 80043c6:	d045      	beq.n	8004454 <_free_r+0x94>
 80043c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043cc:	1f0c      	subs	r4, r1, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bfb8      	it	lt
 80043d2:	18e4      	addlt	r4, r4, r3
 80043d4:	f7ff fff2 	bl	80043bc <__malloc_lock>
 80043d8:	4a1f      	ldr	r2, [pc, #124]	; (8004458 <_free_r+0x98>)
 80043da:	6813      	ldr	r3, [r2, #0]
 80043dc:	4610      	mov	r0, r2
 80043de:	b933      	cbnz	r3, 80043ee <_free_r+0x2e>
 80043e0:	6063      	str	r3, [r4, #4]
 80043e2:	6014      	str	r4, [r2, #0]
 80043e4:	4628      	mov	r0, r5
 80043e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043ea:	f7ff bfe8 	b.w	80043be <__malloc_unlock>
 80043ee:	42a3      	cmp	r3, r4
 80043f0:	d90c      	bls.n	800440c <_free_r+0x4c>
 80043f2:	6821      	ldr	r1, [r4, #0]
 80043f4:	1862      	adds	r2, r4, r1
 80043f6:	4293      	cmp	r3, r2
 80043f8:	bf04      	itt	eq
 80043fa:	681a      	ldreq	r2, [r3, #0]
 80043fc:	685b      	ldreq	r3, [r3, #4]
 80043fe:	6063      	str	r3, [r4, #4]
 8004400:	bf04      	itt	eq
 8004402:	1852      	addeq	r2, r2, r1
 8004404:	6022      	streq	r2, [r4, #0]
 8004406:	6004      	str	r4, [r0, #0]
 8004408:	e7ec      	b.n	80043e4 <_free_r+0x24>
 800440a:	4613      	mov	r3, r2
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	b10a      	cbz	r2, 8004414 <_free_r+0x54>
 8004410:	42a2      	cmp	r2, r4
 8004412:	d9fa      	bls.n	800440a <_free_r+0x4a>
 8004414:	6819      	ldr	r1, [r3, #0]
 8004416:	1858      	adds	r0, r3, r1
 8004418:	42a0      	cmp	r0, r4
 800441a:	d10b      	bne.n	8004434 <_free_r+0x74>
 800441c:	6820      	ldr	r0, [r4, #0]
 800441e:	4401      	add	r1, r0
 8004420:	1858      	adds	r0, r3, r1
 8004422:	4282      	cmp	r2, r0
 8004424:	6019      	str	r1, [r3, #0]
 8004426:	d1dd      	bne.n	80043e4 <_free_r+0x24>
 8004428:	6810      	ldr	r0, [r2, #0]
 800442a:	6852      	ldr	r2, [r2, #4]
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	4401      	add	r1, r0
 8004430:	6019      	str	r1, [r3, #0]
 8004432:	e7d7      	b.n	80043e4 <_free_r+0x24>
 8004434:	d902      	bls.n	800443c <_free_r+0x7c>
 8004436:	230c      	movs	r3, #12
 8004438:	602b      	str	r3, [r5, #0]
 800443a:	e7d3      	b.n	80043e4 <_free_r+0x24>
 800443c:	6820      	ldr	r0, [r4, #0]
 800443e:	1821      	adds	r1, r4, r0
 8004440:	428a      	cmp	r2, r1
 8004442:	bf04      	itt	eq
 8004444:	6811      	ldreq	r1, [r2, #0]
 8004446:	6852      	ldreq	r2, [r2, #4]
 8004448:	6062      	str	r2, [r4, #4]
 800444a:	bf04      	itt	eq
 800444c:	1809      	addeq	r1, r1, r0
 800444e:	6021      	streq	r1, [r4, #0]
 8004450:	605c      	str	r4, [r3, #4]
 8004452:	e7c7      	b.n	80043e4 <_free_r+0x24>
 8004454:	bd38      	pop	{r3, r4, r5, pc}
 8004456:	bf00      	nop
 8004458:	20000090 	.word	0x20000090

0800445c <_read_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	4c07      	ldr	r4, [pc, #28]	; (800447c <_read_r+0x20>)
 8004460:	4605      	mov	r5, r0
 8004462:	4608      	mov	r0, r1
 8004464:	4611      	mov	r1, r2
 8004466:	2200      	movs	r2, #0
 8004468:	6022      	str	r2, [r4, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	f7fc fb6e 	bl	8000b4c <_read>
 8004470:	1c43      	adds	r3, r0, #1
 8004472:	d102      	bne.n	800447a <_read_r+0x1e>
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	b103      	cbz	r3, 800447a <_read_r+0x1e>
 8004478:	602b      	str	r3, [r5, #0]
 800447a:	bd38      	pop	{r3, r4, r5, pc}
 800447c:	20000134 	.word	0x20000134

08004480 <_fstat_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4c07      	ldr	r4, [pc, #28]	; (80044a0 <_fstat_r+0x20>)
 8004484:	2300      	movs	r3, #0
 8004486:	4605      	mov	r5, r0
 8004488:	4608      	mov	r0, r1
 800448a:	4611      	mov	r1, r2
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	f7fc fba2 	bl	8000bd6 <_fstat>
 8004492:	1c43      	adds	r3, r0, #1
 8004494:	d102      	bne.n	800449c <_fstat_r+0x1c>
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	b103      	cbz	r3, 800449c <_fstat_r+0x1c>
 800449a:	602b      	str	r3, [r5, #0]
 800449c:	bd38      	pop	{r3, r4, r5, pc}
 800449e:	bf00      	nop
 80044a0:	20000134 	.word	0x20000134

080044a4 <_isatty_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	4c06      	ldr	r4, [pc, #24]	; (80044c0 <_isatty_r+0x1c>)
 80044a8:	2300      	movs	r3, #0
 80044aa:	4605      	mov	r5, r0
 80044ac:	4608      	mov	r0, r1
 80044ae:	6023      	str	r3, [r4, #0]
 80044b0:	f7fc fba1 	bl	8000bf6 <_isatty>
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	d102      	bne.n	80044be <_isatty_r+0x1a>
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	b103      	cbz	r3, 80044be <_isatty_r+0x1a>
 80044bc:	602b      	str	r3, [r5, #0]
 80044be:	bd38      	pop	{r3, r4, r5, pc}
 80044c0:	20000134 	.word	0x20000134

080044c4 <_init>:
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	bf00      	nop
 80044c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ca:	bc08      	pop	{r3}
 80044cc:	469e      	mov	lr, r3
 80044ce:	4770      	bx	lr

080044d0 <_fini>:
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d2:	bf00      	nop
 80044d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d6:	bc08      	pop	{r3}
 80044d8:	469e      	mov	lr, r3
 80044da:	4770      	bx	lr
