
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb0  08004fb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004fb0  08004fb0  00014fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fb8  08004fb8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fb8  08004fb8  00014fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08005030  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08005030  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c391  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ea9  00000000  00000000  0002c431  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a98  00000000  00000000  0002e2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a0  00000000  00000000  0002ed78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022a73  00000000  00000000  0002f718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008df9  00000000  00000000  0005218b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cbab5  00000000  00000000  0005af84  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126a39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003374  00000000  00000000  00126ab4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004db0 	.word	0x08004db0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004db0 	.word	0x08004db0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//! @last_edit : 10/07/2020
//! @details : PRINTF TO UART handling
int __io_putchar(int ch)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USARTx and Loop until the end of transmission */
	while (HAL_OK != HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, HAL_MAX_DELAY))
 80005b8:	bf00      	nop
 80005ba:	1d39      	adds	r1, r7, #4
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	2201      	movs	r2, #1
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <__io_putchar+0x28>)
 80005c4:	f002 fa5b 	bl	8002a7e <HAL_UART_Transmit>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1f5      	bne.n	80005ba <__io_putchar+0xa>
	{
		;
	}
	return ch;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000f0 	.word	0x200000f0

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0e2      	sub	sp, #392	; 0x188
 80005e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fc4d 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f8fb 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f9c7 	bl	800097c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 f99b 	bl	8000928 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005f2:	f000 f963 	bl	80008bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //define necessary structures
  SX1278_hw_t SX1278_hw;
  SX1278_t SX1278;
  int master = 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  char buffer[64];
  int message;
  int message_length;

  //initialize hardware for LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 80005fc:	4b66      	ldr	r3, [pc, #408]	; (8000798 <main+0x1bc>)
 80005fe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  SX1278_hw.dio0.pin = DIO0_Pin;
 8000602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000606:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  SX1278_hw.nss.port = NSS_GPIO_Port;
 800060a:	4b64      	ldr	r3, [pc, #400]	; (800079c <main+0x1c0>)
 800060c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  SX1278_hw.nss.pin = NSS_Pin;
 8000610:	2340      	movs	r3, #64	; 0x40
 8000612:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  SX1278_hw.reset.port = RESET_GPIO_Port;
 8000616:	4b60      	ldr	r3, [pc, #384]	; (8000798 <main+0x1bc>)
 8000618:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  SX1278_hw.reset.pin = RESET_Pin;
 800061c:	2301      	movs	r3, #1
 800061e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  SX1278_hw.spi = &hspi1;
 8000622:	4b5f      	ldr	r3, [pc, #380]	; (80007a0 <main+0x1c4>)
 8000624:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

  //initialize logic for LoRa module
  SX1278.hw = &SX1278_hw;
 8000628:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800062c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8000630:	601a      	str	r2, [r3, #0]

  //configure module
  printf("Configuring LoRa module\r\n");
 8000632:	485c      	ldr	r0, [pc, #368]	; (80007a4 <main+0x1c8>)
 8000634:	f003 fb2e 	bl	8003c94 <puts>
  SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_8,
 8000638:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800063c:	230a      	movs	r3, #10
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2303      	movs	r3, #3
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2302      	movs	r3, #2
 8000646:	2201      	movs	r2, #1
 8000648:	2100      	movs	r1, #0
 800064a:	f003 fa23 	bl	8003a94 <SX1278_begin>
          SX1278_LORA_BW_20_8KHZ, 10);
  printf("Done configuring LoRaModule\r\n");
 800064e:	4856      	ldr	r0, [pc, #344]	; (80007a8 <main+0x1cc>)
 8000650:	f003 fb20 	bl	8003c94 <puts>

  //entry transmitter (master) or receiver (slave) mode
  if (master == 1)
 8000654:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000658:	2b01      	cmp	r3, #1
 800065a:	d10a      	bne.n	8000672 <main+0x96>
      ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 800065c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000660:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000664:	2110      	movs	r1, #16
 8000666:	4618      	mov	r0, r3
 8000668:	f003 f97d 	bl	8003966 <SX1278_LoRaEntryTx>
 800066c:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8000670:	e009      	b.n	8000686 <main+0xaa>
  else
      ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000672:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000676:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800067a:	2110      	movs	r1, #16
 800067c:	4618      	mov	r0, r3
 800067e:	f003 f8c9 	bl	8003814 <SX1278_LoRaEntryRx>
 8000682:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (master == 1) {
 8000686:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800068a:	2b01      	cmp	r3, #1
 800068c:	d154      	bne.n	8000738 <main+0x15c>
	  			printf("Master ...\r\n");
 800068e:	4847      	ldr	r0, [pc, #284]	; (80007ac <main+0x1d0>)
 8000690:	f003 fb00 	bl	8003c94 <puts>
	  			HAL_Delay(2500);
 8000694:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000698:	f000 fc64 	bl	8000f64 <HAL_Delay>
	  			printf("Sending package...\r\n");
 800069c:	4844      	ldr	r0, [pc, #272]	; (80007b0 <main+0x1d4>)
 800069e:	f003 faf9 	bl	8003c94 <puts>

	  			message_length = sprintf(buffer, "Hello %d", message);
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80006a8:	4942      	ldr	r1, [pc, #264]	; (80007b4 <main+0x1d8>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fafa 	bl	8003ca4 <siprintf>
 80006b0:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170
	  			ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 80006b4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 f94f 	bl	8003966 <SX1278_LoRaEntryTx>
 80006c8:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
	  			printf("Entry: %d\r\n", ret);
 80006cc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80006d0:	4839      	ldr	r0, [pc, #228]	; (80007b8 <main+0x1dc>)
 80006d2:	f003 fa6b 	bl	8003bac <iprintf>

	  			printf("Sending %s\r\n", buffer);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	4838      	ldr	r0, [pc, #224]	; (80007bc <main+0x1e0>)
 80006dc:	f003 fa66 	bl	8003bac <iprintf>
	  			ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length,
 80006e0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	1d39      	adds	r1, r7, #4
 80006e8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80006ec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006f0:	f003 f991 	bl	8003a16 <SX1278_LoRaTxPacket>
 80006f4:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
	  					2000);
	  			message += 1;
 80006f8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80006fc:	3301      	adds	r3, #1
 80006fe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

	  			printf("Transmission: %d\r\n", ret);
 8000702:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000706:	482e      	ldr	r0, [pc, #184]	; (80007c0 <main+0x1e4>)
 8000708:	f003 fa50 	bl	8003bac <iprintf>
	  			printf("Package sent...\r\n");
 800070c:	482d      	ldr	r0, [pc, #180]	; (80007c4 <main+0x1e8>)
 800070e:	f003 fac1 	bl	8003c94 <puts>


	  			uint8_t txByte = 0x42;
 8000712:	2342      	movs	r3, #66	; 0x42
 8000714:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
	  			uint8_t rxByte = SX1278_SPIRead(&SX1278, 0x42);
 8000718:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800071c:	2142      	movs	r1, #66	; 0x42
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fec3 	bl	80034aa <SX1278_SPIRead>
 8000724:	4603      	mov	r3, r0
 8000726:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
	  			HAL_SPI_TransmitReceive(&hspi1, &txByte, &rxByte, 1, 1000);
	  			txByte = 0x00;
	  			HAL_SPI_TransmitReceive(&hspi1, &txByte, &rxByte, 1, 1000);
	  			HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
*/
	  			printf("Version : %d\r\n", rxByte);
 800072a:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 800072e:	4619      	mov	r1, r3
 8000730:	4825      	ldr	r0, [pc, #148]	; (80007c8 <main+0x1ec>)
 8000732:	f003 fa3b 	bl	8003bac <iprintf>
 8000736:	e7a6      	b.n	8000686 <main+0xaa>
	  			/*uint8_t SEND = 0xAC;
	  			uint8_t RCV = 0;
	  			HAL_SPI_TransmitReceive(&hspi1, &SEND, &RCV, 1, HAL_MAX_DELAY);
	  			if(RCV == SEND) printf("OKAY !");*/
	  		} else {
	  			printf("Slave ...\r\n");
 8000738:	4824      	ldr	r0, [pc, #144]	; (80007cc <main+0x1f0>)
 800073a:	f003 faab 	bl	8003c94 <puts>
	  			HAL_Delay(1000);
 800073e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000742:	f000 fc0f 	bl	8000f64 <HAL_Delay>
	  			printf("Receiving package...\r\n");
 8000746:	4822      	ldr	r0, [pc, #136]	; (80007d0 <main+0x1f4>)
 8000748:	f003 faa4 	bl	8003c94 <puts>

	  			ret = SX1278_LoRaRxPacket(&SX1278);
 800074c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000750:	4618      	mov	r0, r3
 8000752:	f003 f8c4 	bl	80038de <SX1278_LoRaRxPacket>
 8000756:	4603      	mov	r3, r0
 8000758:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	  			printf("Received: %d\r\n", ret);
 800075c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000760:	481c      	ldr	r0, [pc, #112]	; (80007d4 <main+0x1f8>)
 8000762:	f003 fa23 	bl	8003bac <iprintf>
	  			if (ret > 0) {
 8000766:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800076a:	2b00      	cmp	r3, #0
 800076c:	dd0f      	ble.n	800078e <main+0x1b2>
	  				SX1278_read(&SX1278, (uint8_t *) buffer, ret);
 800076e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000772:	b2da      	uxtb	r2, r3
 8000774:	1d39      	adds	r1, r7, #4
 8000776:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800077a:	4618      	mov	r0, r3
 800077c:	f003 f9b2 	bl	8003ae4 <SX1278_read>
	  				printf("Content (%d): %s\r\n", ret, buffer);
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	461a      	mov	r2, r3
 8000784:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000788:	4813      	ldr	r0, [pc, #76]	; (80007d8 <main+0x1fc>)
 800078a:	f003 fa0f 	bl	8003bac <iprintf>
	  			}
	  			printf("Package received ...\r\n");
 800078e:	4813      	ldr	r0, [pc, #76]	; (80007dc <main+0x200>)
 8000790:	f003 fa80 	bl	8003c94 <puts>
	  if (master == 1) {
 8000794:	e777      	b.n	8000686 <main+0xaa>
 8000796:	bf00      	nop
 8000798:	40020000 	.word	0x40020000
 800079c:	40020400 	.word	0x40020400
 80007a0:	20000098 	.word	0x20000098
 80007a4:	08004dc8 	.word	0x08004dc8
 80007a8:	08004de4 	.word	0x08004de4
 80007ac:	08004e04 	.word	0x08004e04
 80007b0:	08004e10 	.word	0x08004e10
 80007b4:	08004e24 	.word	0x08004e24
 80007b8:	08004e30 	.word	0x08004e30
 80007bc:	08004e3c 	.word	0x08004e3c
 80007c0:	08004e4c 	.word	0x08004e4c
 80007c4:	08004e60 	.word	0x08004e60
 80007c8:	08004e74 	.word	0x08004e74
 80007cc:	08004e84 	.word	0x08004e84
 80007d0:	08004e90 	.word	0x08004e90
 80007d4:	08004ea8 	.word	0x08004ea8
 80007d8:	08004eb8 	.word	0x08004eb8
 80007dc:	08004ecc 	.word	0x08004ecc

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	; 0x50
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2234      	movs	r2, #52	; 0x34
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 f9d3 	bl	8003b9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <SystemClock_Config+0xd4>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a29      	ldr	r2, [pc, #164]	; (80008b4 <SystemClock_Config+0xd4>)
 800080e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <SystemClock_Config+0xd4>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <SystemClock_Config+0xd8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800082c:	4a22      	ldr	r2, [pc, #136]	; (80008b8 <SystemClock_Config+0xd8>)
 800082e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <SystemClock_Config+0xd8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000840:	2302      	movs	r3, #2
 8000842:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000844:	2301      	movs	r3, #1
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000848:	2310      	movs	r3, #16
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084c:	2302      	movs	r3, #2
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000850:	2300      	movs	r3, #0
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000854:	2310      	movs	r3, #16
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 308;
 8000858:	f44f 739a 	mov.w	r3, #308	; 0x134
 800085c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800085e:	2304      	movs	r3, #4
 8000860:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4618      	mov	r0, r3
 8000870:	f001 f94c 	bl	8001b0c <HAL_RCC_OscConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800087a:	f000 f91d 	bl	8000ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	230f      	movs	r3, #15
 8000880:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	2302      	movs	r3, #2
 8000884:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800088a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	2102      	movs	r1, #2
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fe7c 	bl	8001598 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008a6:	f000 f907 	bl	8000ab8 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3750      	adds	r7, #80	; 0x50
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40007000 	.word	0x40007000

080008bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_SPI1_Init+0x64>)
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <MX_SPI1_Init+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_SPI1_Init+0x64>)
 80008c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_SPI1_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_SPI1_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_SPI1_Init+0x64>)
 80008e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_SPI1_Init+0x64>)
 80008f0:	2210      	movs	r2, #16
 80008f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_SPI1_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_SPI1_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_SPI1_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_SPI1_Init+0x64>)
 8000908:	220a      	movs	r2, #10
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_SPI1_Init+0x64>)
 800090e:	f001 fb57 	bl	8001fc0 <HAL_SPI_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000918:	f000 f8ce 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000098 	.word	0x20000098
 8000924:	40013000 	.word	0x40013000

08000928 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <MX_USART2_UART_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000960:	f002 f840 	bl	80029e4 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800096a:	f000 f8a5 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000f0 	.word	0x200000f0
 8000978:	40004400 	.word	0x40004400

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b43      	ldr	r3, [pc, #268]	; (8000aa4 <MX_GPIO_Init+0x128>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a42      	ldr	r2, [pc, #264]	; (8000aa4 <MX_GPIO_Init+0x128>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b40      	ldr	r3, [pc, #256]	; (8000aa4 <MX_GPIO_Init+0x128>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b3c      	ldr	r3, [pc, #240]	; (8000aa4 <MX_GPIO_Init+0x128>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a3b      	ldr	r2, [pc, #236]	; (8000aa4 <MX_GPIO_Init+0x128>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b39      	ldr	r3, [pc, #228]	; (8000aa4 <MX_GPIO_Init+0x128>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b35      	ldr	r3, [pc, #212]	; (8000aa4 <MX_GPIO_Init+0x128>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a34      	ldr	r2, [pc, #208]	; (8000aa4 <MX_GPIO_Init+0x128>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b32      	ldr	r3, [pc, #200]	; (8000aa4 <MX_GPIO_Init+0x128>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <MX_GPIO_Init+0x128>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a2d      	ldr	r2, [pc, #180]	; (8000aa4 <MX_GPIO_Init+0x128>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <MX_GPIO_Init+0x128>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2101      	movs	r1, #1
 8000a06:	4828      	ldr	r0, [pc, #160]	; (8000aa8 <MX_GPIO_Init+0x12c>)
 8000a08:	f000 fdac 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2140      	movs	r1, #64	; 0x40
 8000a10:	4826      	ldr	r0, [pc, #152]	; (8000aac <MX_GPIO_Init+0x130>)
 8000a12:	f000 fda7 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_GPIO_Init+0x134>)
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4822      	ldr	r0, [pc, #136]	; (8000ab4 <MX_GPIO_Init+0x138>)
 8000a2c:	f000 fbf0 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000a30:	2301      	movs	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <MX_GPIO_Init+0x12c>)
 8000a48:	f000 fbe2 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <MX_GPIO_Init+0x12c>)
 8000a62:	f000 fbd5 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO1_Pin DIO3_Pin DIO2_Pin */
  GPIO_InitStruct.Pin = DIO1_Pin|DIO3_Pin|DIO2_Pin;
 8000a66:	2338      	movs	r3, #56	; 0x38
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <MX_GPIO_Init+0x130>)
 8000a7a:	f000 fbc9 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000a7e:	2340      	movs	r3, #64	; 0x40
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_GPIO_Init+0x130>)
 8000a96:	f000 fbbb 	bl	8001210 <HAL_GPIO_Init>

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	; 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40020400 	.word	0x40020400
 8000ab0:	10210000 	.word	0x10210000
 8000ab4:	40020800 	.word	0x40020800

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_MspInit+0x4c>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b06:	2007      	movs	r0, #7
 8000b08:	f000 fb1e 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800

08000b18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a1d      	ldr	r2, [pc, #116]	; (8000bac <HAL_SPI_MspInit+0x94>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d133      	bne.n	8000ba2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <HAL_SPI_MspInit+0x98>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <HAL_SPI_MspInit+0x98>)
 8000b44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <HAL_SPI_MspInit+0x98>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_SPI_MspInit+0x98>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <HAL_SPI_MspInit+0x98>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_SPI_MspInit+0x98>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8000b72:	23e0      	movs	r3, #224	; 0xe0
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b82:	2305      	movs	r3, #5
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <HAL_SPI_MspInit+0x9c>)
 8000b8e:	f000 fb3f 	bl	8001210 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	2023      	movs	r0, #35	; 0x23
 8000b98:	f000 fae1 	bl	800115e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b9c:	2023      	movs	r0, #35	; 0x23
 8000b9e:	f000 fafa 	bl	8001196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40013000 	.word	0x40013000
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <HAL_UART_MspInit+0x84>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d12b      	bne.n	8000c32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c12:	230c      	movs	r3, #12
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c22:	2307      	movs	r3, #7
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <HAL_UART_MspInit+0x8c>)
 8000c2e:	f000 faef 	bl	8001210 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <MemManage_Handler+0x4>

08000c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 f942 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <SPI1_IRQHandler+0x10>)
 8000caa:	f001 fcc3 	bl	8002634 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000098 	.word	0x20000098

08000cb8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	e00a      	b.n	8000ce0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cca:	f3af 8000 	nop.w
 8000cce:	4601      	mov	r1, r0
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	60ba      	str	r2, [r7, #8]
 8000cd6:	b2ca      	uxtb	r2, r1
 8000cd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dbf0      	blt.n	8000cca <_read+0x12>
	}

return len;
 8000ce8:	687b      	ldr	r3, [r7, #4]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	e009      	b.n	8000d18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	60ba      	str	r2, [r7, #8]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fc4f 	bl	80005b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbf1      	blt.n	8000d04 <_write+0x12>
	}
	return len;
 8000d20:	687b      	ldr	r3, [r7, #4]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_close>:

int _close(int file)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
	return -1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d52:	605a      	str	r2, [r3, #4]
	return 0;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_isatty>:

int _isatty(int file)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
	return 1;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
	return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f002 feb4 	bl	8003b30 <__errno>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	230c      	movs	r3, #12
 8000dcc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <_sbrk+0x64>)
 8000de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20020000 	.word	0x20020000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	2000008c 	.word	0x2000008c
 8000dfc:	20000138 	.word	0x20000138

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <SystemInit+0x28>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <SystemInit+0x28>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <SystemInit+0x28>)
 8000e16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e32:	e003      	b.n	8000e3c <LoopCopyDataInit>

08000e34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e3a:	3104      	adds	r1, #4

08000e3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e3c:	480b      	ldr	r0, [pc, #44]	; (8000e6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e44:	d3f6      	bcc.n	8000e34 <CopyDataInit>
  ldr  r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e48:	e002      	b.n	8000e50 <LoopFillZerobss>

08000e4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e4c:	f842 3b04 	str.w	r3, [r2], #4

08000e50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e54:	d3f9      	bcc.n	8000e4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e56:	f7ff ffd3 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f002 fe6f 	bl	8003b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fbbd 	bl	80005dc <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e68:	08004fc0 	.word	0x08004fc0
  ldr  r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e70:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000e74:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000e78:	20000138 	.word	0x20000138

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 f94d 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fe08 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f965 	bl	80011b2 <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 f92d 	bl	800115e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000130 	.word	0x20000130

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000130 	.word	0x20000130

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_Delay+0x40>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	db0b      	blt.n	8001036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	4907      	ldr	r1, [pc, #28]	; (8001044 <__NVIC_EnableIRQ+0x38>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	2001      	movs	r0, #1
 800102e:	fa00 f202 	lsl.w	r2, r0, r2
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000e100 	.word	0xe000e100

08001048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	; (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	; 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001114:	d301      	bcc.n	800111a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001116:	2301      	movs	r3, #1
 8001118:	e00f      	b.n	800113a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <SysTick_Config+0x40>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001122:	210f      	movs	r1, #15
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f7ff ff8e 	bl	8001048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <SysTick_Config+0x40>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SysTick_Config+0x40>)
 8001134:	2207      	movs	r2, #7
 8001136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	e000e010 	.word	0xe000e010

08001148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff29 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff3e 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff8e 	bl	800109c <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff5d 	bl	8001048 <__NVIC_SetPriority>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff31 	bl	800100c <__NVIC_EnableIRQ>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffa2 	bl	8001104 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d004      	beq.n	80011e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e00c      	b.n	8001202 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2205      	movs	r2, #5
 80011ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0201 	bic.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	e165      	b.n	80014f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800122c:	2201      	movs	r2, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 8154 	bne.w	80014f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d00b      	beq.n	800126a <HAL_GPIO_Init+0x5a>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800125e:	2b11      	cmp	r3, #17
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b12      	cmp	r3, #18
 8001268:	d130      	bne.n	80012cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f003 0201 	and.w	r2, r3, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0xfc>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b12      	cmp	r3, #18
 800130a:	d123      	bne.n	8001354 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	220f      	movs	r2, #15
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	08da      	lsrs	r2, r3, #3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3208      	adds	r2, #8
 800134e:	69b9      	ldr	r1, [r7, #24]
 8001350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0203 	and.w	r2, r3, #3
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 80ae 	beq.w	80014f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b5c      	ldr	r3, [pc, #368]	; (800150c <HAL_GPIO_Init+0x2fc>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a5b      	ldr	r2, [pc, #364]	; (800150c <HAL_GPIO_Init+0x2fc>)
 80013a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b59      	ldr	r3, [pc, #356]	; (800150c <HAL_GPIO_Init+0x2fc>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013b2:	4a57      	ldr	r2, [pc, #348]	; (8001510 <HAL_GPIO_Init+0x300>)
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	3302      	adds	r3, #2
 80013ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	220f      	movs	r2, #15
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4e      	ldr	r2, [pc, #312]	; (8001514 <HAL_GPIO_Init+0x304>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d025      	beq.n	800142a <HAL_GPIO_Init+0x21a>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4d      	ldr	r2, [pc, #308]	; (8001518 <HAL_GPIO_Init+0x308>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d01f      	beq.n	8001426 <HAL_GPIO_Init+0x216>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4c      	ldr	r2, [pc, #304]	; (800151c <HAL_GPIO_Init+0x30c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d019      	beq.n	8001422 <HAL_GPIO_Init+0x212>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4b      	ldr	r2, [pc, #300]	; (8001520 <HAL_GPIO_Init+0x310>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_GPIO_Init+0x20e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4a      	ldr	r2, [pc, #296]	; (8001524 <HAL_GPIO_Init+0x314>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00d      	beq.n	800141a <HAL_GPIO_Init+0x20a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a49      	ldr	r2, [pc, #292]	; (8001528 <HAL_GPIO_Init+0x318>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d007      	beq.n	8001416 <HAL_GPIO_Init+0x206>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a48      	ldr	r2, [pc, #288]	; (800152c <HAL_GPIO_Init+0x31c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d101      	bne.n	8001412 <HAL_GPIO_Init+0x202>
 800140e:	2306      	movs	r3, #6
 8001410:	e00c      	b.n	800142c <HAL_GPIO_Init+0x21c>
 8001412:	2307      	movs	r3, #7
 8001414:	e00a      	b.n	800142c <HAL_GPIO_Init+0x21c>
 8001416:	2305      	movs	r3, #5
 8001418:	e008      	b.n	800142c <HAL_GPIO_Init+0x21c>
 800141a:	2304      	movs	r3, #4
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x21c>
 800141e:	2303      	movs	r3, #3
 8001420:	e004      	b.n	800142c <HAL_GPIO_Init+0x21c>
 8001422:	2302      	movs	r3, #2
 8001424:	e002      	b.n	800142c <HAL_GPIO_Init+0x21c>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_GPIO_Init+0x21c>
 800142a:	2300      	movs	r3, #0
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	f002 0203 	and.w	r2, r2, #3
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	4093      	lsls	r3, r2
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800143c:	4934      	ldr	r1, [pc, #208]	; (8001510 <HAL_GPIO_Init+0x300>)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3302      	adds	r3, #2
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800144a:	4b39      	ldr	r3, [pc, #228]	; (8001530 <HAL_GPIO_Init+0x320>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800146e:	4a30      	ldr	r2, [pc, #192]	; (8001530 <HAL_GPIO_Init+0x320>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001474:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_GPIO_Init+0x320>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001498:	4a25      	ldr	r2, [pc, #148]	; (8001530 <HAL_GPIO_Init+0x320>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <HAL_GPIO_Init+0x320>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c2:	4a1b      	ldr	r2, [pc, #108]	; (8001530 <HAL_GPIO_Init+0x320>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <HAL_GPIO_Init+0x320>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ec:	4a10      	ldr	r2, [pc, #64]	; (8001530 <HAL_GPIO_Init+0x320>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3301      	adds	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	2b0f      	cmp	r3, #15
 80014fc:	f67f ae96 	bls.w	800122c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001500:	bf00      	nop
 8001502:	3724      	adds	r7, #36	; 0x24
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40023800 	.word	0x40023800
 8001510:	40013800 	.word	0x40013800
 8001514:	40020000 	.word	0x40020000
 8001518:	40020400 	.word	0x40020400
 800151c:	40020800 	.word	0x40020800
 8001520:	40020c00 	.word	0x40020c00
 8001524:	40021000 	.word	0x40021000
 8001528:	40021400 	.word	0x40021400
 800152c:	40021800 	.word	0x40021800
 8001530:	40013c00 	.word	0x40013c00

08001534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e001      	b.n	8001556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
 8001570:	4613      	mov	r3, r2
 8001572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001580:	e003      	b.n	800158a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	041a      	lsls	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0cc      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ac:	4b68      	ldr	r3, [pc, #416]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d90c      	bls.n	80015d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b65      	ldr	r3, [pc, #404]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c2:	4b63      	ldr	r3, [pc, #396]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0b8      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ec:	4b59      	ldr	r3, [pc, #356]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4a58      	ldr	r2, [pc, #352]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001604:	4b53      	ldr	r3, [pc, #332]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a52      	ldr	r2, [pc, #328]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800160e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001610:	4b50      	ldr	r3, [pc, #320]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	494d      	ldr	r1, [pc, #308]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	4313      	orrs	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d044      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b47      	ldr	r3, [pc, #284]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d119      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e07f      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d003      	beq.n	8001656 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001652:	2b03      	cmp	r3, #3
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001656:	4b3f      	ldr	r3, [pc, #252]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e06f      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e067      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001676:	4b37      	ldr	r3, [pc, #220]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f023 0203 	bic.w	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4934      	ldr	r1, [pc, #208]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	4313      	orrs	r3, r2
 8001686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001688:	f7ff fc60 	bl	8000f4c <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001690:	f7ff fc5c 	bl	8000f4c <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e04f      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 020c 	and.w	r2, r3, #12
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1eb      	bne.n	8001690 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d20c      	bcs.n	80016e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e032      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4916      	ldr	r1, [pc, #88]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d009      	beq.n	800171e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	490e      	ldr	r1, [pc, #56]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800171e:	f000 f855 	bl	80017cc <HAL_RCC_GetSysClockFreq>
 8001722:	4601      	mov	r1, r0
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 8001730:	5cd3      	ldrb	r3, [r2, r3]
 8001732:	fa21 f303 	lsr.w	r3, r1, r3
 8001736:	4a09      	ldr	r2, [pc, #36]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_RCC_ClockConfig+0x1c8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fbc0 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023c00 	.word	0x40023c00
 8001754:	40023800 	.word	0x40023800
 8001758:	08004ee4 	.word	0x08004ee4
 800175c:	20000000 	.word	0x20000000
 8001760:	20000004 	.word	0x20000004

08001764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_RCC_GetHCLKFreq+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000000 	.word	0x20000000

0800177c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001780:	f7ff fff0 	bl	8001764 <HAL_RCC_GetHCLKFreq>
 8001784:	4601      	mov	r1, r0
 8001786:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	0a9b      	lsrs	r3, r3, #10
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	4a03      	ldr	r2, [pc, #12]	; (80017a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001792:	5cd3      	ldrb	r3, [r2, r3]
 8001794:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001798:	4618      	mov	r0, r3
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	08004ef4 	.word	0x08004ef4

080017a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017a8:	f7ff ffdc 	bl	8001764 <HAL_RCC_GetHCLKFreq>
 80017ac:	4601      	mov	r1, r0
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	0b5b      	lsrs	r3, r3, #13
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	4a03      	ldr	r2, [pc, #12]	; (80017c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017ba:	5cd3      	ldrb	r3, [r2, r3]
 80017bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800
 80017c8:	08004ef4 	.word	0x08004ef4

080017cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017e6:	4bc6      	ldr	r3, [pc, #792]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x334>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b0c      	cmp	r3, #12
 80017f0:	f200 817e 	bhi.w	8001af0 <HAL_RCC_GetSysClockFreq+0x324>
 80017f4:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <HAL_RCC_GetSysClockFreq+0x30>)
 80017f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fa:	bf00      	nop
 80017fc:	08001831 	.word	0x08001831
 8001800:	08001af1 	.word	0x08001af1
 8001804:	08001af1 	.word	0x08001af1
 8001808:	08001af1 	.word	0x08001af1
 800180c:	08001837 	.word	0x08001837
 8001810:	08001af1 	.word	0x08001af1
 8001814:	08001af1 	.word	0x08001af1
 8001818:	08001af1 	.word	0x08001af1
 800181c:	0800183d 	.word	0x0800183d
 8001820:	08001af1 	.word	0x08001af1
 8001824:	08001af1 	.word	0x08001af1
 8001828:	08001af1 	.word	0x08001af1
 800182c:	08001999 	.word	0x08001999
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001830:	4bb4      	ldr	r3, [pc, #720]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x338>)
 8001832:	613b      	str	r3, [r7, #16]
       break;
 8001834:	e15f      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001836:	4bb4      	ldr	r3, [pc, #720]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001838:	613b      	str	r3, [r7, #16]
      break;
 800183a:	e15c      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800183c:	4bb0      	ldr	r3, [pc, #704]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x334>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001844:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001846:	4bae      	ldr	r3, [pc, #696]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x334>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d04a      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001852:	4bab      	ldr	r3, [pc, #684]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x334>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	099b      	lsrs	r3, r3, #6
 8001858:	f04f 0400 	mov.w	r4, #0
 800185c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	ea03 0501 	and.w	r5, r3, r1
 8001868:	ea04 0602 	and.w	r6, r4, r2
 800186c:	4629      	mov	r1, r5
 800186e:	4632      	mov	r2, r6
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	f04f 0400 	mov.w	r4, #0
 8001878:	0154      	lsls	r4, r2, #5
 800187a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800187e:	014b      	lsls	r3, r1, #5
 8001880:	4619      	mov	r1, r3
 8001882:	4622      	mov	r2, r4
 8001884:	1b49      	subs	r1, r1, r5
 8001886:	eb62 0206 	sbc.w	r2, r2, r6
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	f04f 0400 	mov.w	r4, #0
 8001892:	0194      	lsls	r4, r2, #6
 8001894:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001898:	018b      	lsls	r3, r1, #6
 800189a:	1a5b      	subs	r3, r3, r1
 800189c:	eb64 0402 	sbc.w	r4, r4, r2
 80018a0:	f04f 0100 	mov.w	r1, #0
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	00e2      	lsls	r2, r4, #3
 80018aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018ae:	00d9      	lsls	r1, r3, #3
 80018b0:	460b      	mov	r3, r1
 80018b2:	4614      	mov	r4, r2
 80018b4:	195b      	adds	r3, r3, r5
 80018b6:	eb44 0406 	adc.w	r4, r4, r6
 80018ba:	f04f 0100 	mov.w	r1, #0
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	0262      	lsls	r2, r4, #9
 80018c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018c8:	0259      	lsls	r1, r3, #9
 80018ca:	460b      	mov	r3, r1
 80018cc:	4614      	mov	r4, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	4621      	mov	r1, r4
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f04f 0400 	mov.w	r4, #0
 80018d8:	461a      	mov	r2, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	f7fe fce8 	bl	80002b0 <__aeabi_uldivmod>
 80018e0:	4603      	mov	r3, r0
 80018e2:	460c      	mov	r4, r1
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e049      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e8:	4b85      	ldr	r3, [pc, #532]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x334>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	099b      	lsrs	r3, r3, #6
 80018ee:	f04f 0400 	mov.w	r4, #0
 80018f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	ea03 0501 	and.w	r5, r3, r1
 80018fe:	ea04 0602 	and.w	r6, r4, r2
 8001902:	4629      	mov	r1, r5
 8001904:	4632      	mov	r2, r6
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	f04f 0400 	mov.w	r4, #0
 800190e:	0154      	lsls	r4, r2, #5
 8001910:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001914:	014b      	lsls	r3, r1, #5
 8001916:	4619      	mov	r1, r3
 8001918:	4622      	mov	r2, r4
 800191a:	1b49      	subs	r1, r1, r5
 800191c:	eb62 0206 	sbc.w	r2, r2, r6
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	f04f 0400 	mov.w	r4, #0
 8001928:	0194      	lsls	r4, r2, #6
 800192a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800192e:	018b      	lsls	r3, r1, #6
 8001930:	1a5b      	subs	r3, r3, r1
 8001932:	eb64 0402 	sbc.w	r4, r4, r2
 8001936:	f04f 0100 	mov.w	r1, #0
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	00e2      	lsls	r2, r4, #3
 8001940:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001944:	00d9      	lsls	r1, r3, #3
 8001946:	460b      	mov	r3, r1
 8001948:	4614      	mov	r4, r2
 800194a:	195b      	adds	r3, r3, r5
 800194c:	eb44 0406 	adc.w	r4, r4, r6
 8001950:	f04f 0100 	mov.w	r1, #0
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	02a2      	lsls	r2, r4, #10
 800195a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800195e:	0299      	lsls	r1, r3, #10
 8001960:	460b      	mov	r3, r1
 8001962:	4614      	mov	r4, r2
 8001964:	4618      	mov	r0, r3
 8001966:	4621      	mov	r1, r4
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f04f 0400 	mov.w	r4, #0
 800196e:	461a      	mov	r2, r3
 8001970:	4623      	mov	r3, r4
 8001972:	f7fe fc9d 	bl	80002b0 <__aeabi_uldivmod>
 8001976:	4603      	mov	r3, r0
 8001978:	460c      	mov	r4, r1
 800197a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800197c:	4b60      	ldr	r3, [pc, #384]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x334>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	0c1b      	lsrs	r3, r3, #16
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	3301      	adds	r3, #1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	fbb2 f3f3 	udiv	r3, r2, r3
 8001994:	613b      	str	r3, [r7, #16]
      break;
 8001996:	e0ae      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001998:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x334>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a2:	4b57      	ldr	r3, [pc, #348]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x334>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d04a      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ae:	4b54      	ldr	r3, [pc, #336]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x334>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	099b      	lsrs	r3, r3, #6
 80019b4:	f04f 0400 	mov.w	r4, #0
 80019b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	ea03 0501 	and.w	r5, r3, r1
 80019c4:	ea04 0602 	and.w	r6, r4, r2
 80019c8:	4629      	mov	r1, r5
 80019ca:	4632      	mov	r2, r6
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	f04f 0400 	mov.w	r4, #0
 80019d4:	0154      	lsls	r4, r2, #5
 80019d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019da:	014b      	lsls	r3, r1, #5
 80019dc:	4619      	mov	r1, r3
 80019de:	4622      	mov	r2, r4
 80019e0:	1b49      	subs	r1, r1, r5
 80019e2:	eb62 0206 	sbc.w	r2, r2, r6
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	f04f 0400 	mov.w	r4, #0
 80019ee:	0194      	lsls	r4, r2, #6
 80019f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019f4:	018b      	lsls	r3, r1, #6
 80019f6:	1a5b      	subs	r3, r3, r1
 80019f8:	eb64 0402 	sbc.w	r4, r4, r2
 80019fc:	f04f 0100 	mov.w	r1, #0
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	00e2      	lsls	r2, r4, #3
 8001a06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a0a:	00d9      	lsls	r1, r3, #3
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4614      	mov	r4, r2
 8001a10:	195b      	adds	r3, r3, r5
 8001a12:	eb44 0406 	adc.w	r4, r4, r6
 8001a16:	f04f 0100 	mov.w	r1, #0
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	0262      	lsls	r2, r4, #9
 8001a20:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a24:	0259      	lsls	r1, r3, #9
 8001a26:	460b      	mov	r3, r1
 8001a28:	4614      	mov	r4, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f04f 0400 	mov.w	r4, #0
 8001a34:	461a      	mov	r2, r3
 8001a36:	4623      	mov	r3, r4
 8001a38:	f7fe fc3a 	bl	80002b0 <__aeabi_uldivmod>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	460c      	mov	r4, r1
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	e049      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a44:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	099b      	lsrs	r3, r3, #6
 8001a4a:	f04f 0400 	mov.w	r4, #0
 8001a4e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	ea03 0501 	and.w	r5, r3, r1
 8001a5a:	ea04 0602 	and.w	r6, r4, r2
 8001a5e:	4629      	mov	r1, r5
 8001a60:	4632      	mov	r2, r6
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	f04f 0400 	mov.w	r4, #0
 8001a6a:	0154      	lsls	r4, r2, #5
 8001a6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a70:	014b      	lsls	r3, r1, #5
 8001a72:	4619      	mov	r1, r3
 8001a74:	4622      	mov	r2, r4
 8001a76:	1b49      	subs	r1, r1, r5
 8001a78:	eb62 0206 	sbc.w	r2, r2, r6
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	f04f 0400 	mov.w	r4, #0
 8001a84:	0194      	lsls	r4, r2, #6
 8001a86:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a8a:	018b      	lsls	r3, r1, #6
 8001a8c:	1a5b      	subs	r3, r3, r1
 8001a8e:	eb64 0402 	sbc.w	r4, r4, r2
 8001a92:	f04f 0100 	mov.w	r1, #0
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	00e2      	lsls	r2, r4, #3
 8001a9c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001aa0:	00d9      	lsls	r1, r3, #3
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4614      	mov	r4, r2
 8001aa6:	195b      	adds	r3, r3, r5
 8001aa8:	eb44 0406 	adc.w	r4, r4, r6
 8001aac:	f04f 0100 	mov.w	r1, #0
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	02a2      	lsls	r2, r4, #10
 8001ab6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001aba:	0299      	lsls	r1, r3, #10
 8001abc:	460b      	mov	r3, r1
 8001abe:	4614      	mov	r4, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f04f 0400 	mov.w	r4, #0
 8001aca:	461a      	mov	r2, r3
 8001acc:	4623      	mov	r3, r4
 8001ace:	f7fe fbef 	bl	80002b0 <__aeabi_uldivmod>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	0f1b      	lsrs	r3, r3, #28
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aec:	613b      	str	r3, [r7, #16]
      break;
 8001aee:	e002      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x338>)
 8001af2:	613b      	str	r3, [r7, #16]
      break;
 8001af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af6:	693b      	ldr	r3, [r7, #16]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	00f42400 	.word	0x00f42400
 8001b08:	007a1200 	.word	0x007a1200

08001b0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 8083 	beq.w	8001c2c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b26:	4b95      	ldr	r3, [pc, #596]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d019      	beq.n	8001b66 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b32:	4b92      	ldr	r3, [pc, #584]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d106      	bne.n	8001b4c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b3e:	4b8f      	ldr	r3, [pc, #572]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b4a:	d00c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b4c:	4b8b      	ldr	r3, [pc, #556]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b54:	2b0c      	cmp	r3, #12
 8001b56:	d112      	bne.n	8001b7e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b58:	4b88      	ldr	r3, [pc, #544]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b64:	d10b      	bne.n	8001b7e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b66:	4b85      	ldr	r3, [pc, #532]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d05b      	beq.n	8001c2a <HAL_RCC_OscConfig+0x11e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d157      	bne.n	8001c2a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e216      	b.n	8001fac <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x8a>
 8001b88:	4b7c      	ldr	r3, [pc, #496]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a7b      	ldr	r2, [pc, #492]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	e01d      	b.n	8001bd2 <HAL_RCC_OscConfig+0xc6>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b9e:	d10c      	bne.n	8001bba <HAL_RCC_OscConfig+0xae>
 8001ba0:	4b76      	ldr	r3, [pc, #472]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a75      	ldr	r2, [pc, #468]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001ba6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b73      	ldr	r3, [pc, #460]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a72      	ldr	r2, [pc, #456]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	e00b      	b.n	8001bd2 <HAL_RCC_OscConfig+0xc6>
 8001bba:	4b70      	ldr	r3, [pc, #448]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a6f      	ldr	r2, [pc, #444]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b6d      	ldr	r3, [pc, #436]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a6c      	ldr	r2, [pc, #432]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d013      	beq.n	8001c02 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bda:	f7ff f9b7 	bl	8000f4c <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be2:	f7ff f9b3 	bl	8000f4c <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b64      	cmp	r3, #100	; 0x64
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e1db      	b.n	8001fac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf4:	4b61      	ldr	r3, [pc, #388]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0xd6>
 8001c00:	e014      	b.n	8001c2c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c02:	f7ff f9a3 	bl	8000f4c <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0a:	f7ff f99f 	bl	8000f4c <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b64      	cmp	r3, #100	; 0x64
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e1c7      	b.n	8001fac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1c:	4b57      	ldr	r3, [pc, #348]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0xfe>
 8001c28:	e000      	b.n	8001c2c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d06f      	beq.n	8001d18 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d017      	beq.n	8001c74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c44:	4b4d      	ldr	r3, [pc, #308]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d105      	bne.n	8001c5c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c50:	4b4a      	ldr	r3, [pc, #296]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00b      	beq.n	8001c74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c5c:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c64:	2b0c      	cmp	r3, #12
 8001c66:	d11c      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c68:	4b44      	ldr	r3, [pc, #272]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d116      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c74:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_OscConfig+0x180>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e18f      	b.n	8001fac <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4938      	ldr	r1, [pc, #224]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca0:	e03a      	b.n	8001d18 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d020      	beq.n	8001cec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001caa:	4b35      	ldr	r3, [pc, #212]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb0:	f7ff f94c 	bl	8000f4c <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb8:	f7ff f948 	bl	8000f4c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e170      	b.n	8001fac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4925      	ldr	r1, [pc, #148]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]
 8001cea:	e015      	b.n	8001d18 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cec:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7ff f92b 	bl	8000f4c <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7ff f927 	bl	8000f4c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e14f      	b.n	8001fac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f0      	bne.n	8001cfa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d037      	beq.n	8001d94 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d016      	beq.n	8001d5a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_RCC_OscConfig+0x278>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d32:	f7ff f90b 	bl	8000f4c <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3a:	f7ff f907 	bl	8000f4c <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e12f      	b.n	8001fac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x22e>
 8001d58:	e01c      	b.n	8001d94 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_RCC_OscConfig+0x278>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7ff f8f4 	bl	8000f4c <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d66:	e00f      	b.n	8001d88 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d68:	f7ff f8f0 	bl	8000f4c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d908      	bls.n	8001d88 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e118      	b.n	8001fac <HAL_RCC_OscConfig+0x4a0>
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	42470000 	.word	0x42470000
 8001d84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	4b8a      	ldr	r3, [pc, #552]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1e9      	bne.n	8001d68 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 8097 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da6:	4b83      	ldr	r3, [pc, #524]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10f      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b7f      	ldr	r3, [pc, #508]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a7e      	ldr	r2, [pc, #504]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b7c      	ldr	r3, [pc, #496]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd2:	4b79      	ldr	r3, [pc, #484]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d118      	bne.n	8001e10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dde:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a75      	ldr	r2, [pc, #468]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dea:	f7ff f8af 	bl	8000f4c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df2:	f7ff f8ab 	bl	8000f4c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0d3      	b.n	8001fac <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	4b6c      	ldr	r3, [pc, #432]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x31a>
 8001e18:	4b66      	ldr	r3, [pc, #408]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	4a65      	ldr	r2, [pc, #404]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70
 8001e24:	e01c      	b.n	8001e60 <HAL_RCC_OscConfig+0x354>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b05      	cmp	r3, #5
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x33c>
 8001e2e:	4b61      	ldr	r3, [pc, #388]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e32:	4a60      	ldr	r2, [pc, #384]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001e34:	f043 0304 	orr.w	r3, r3, #4
 8001e38:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3a:	4b5e      	ldr	r3, [pc, #376]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3e:	4a5d      	ldr	r2, [pc, #372]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6713      	str	r3, [r2, #112]	; 0x70
 8001e46:	e00b      	b.n	8001e60 <HAL_RCC_OscConfig+0x354>
 8001e48:	4b5a      	ldr	r3, [pc, #360]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4c:	4a59      	ldr	r2, [pc, #356]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	6713      	str	r3, [r2, #112]	; 0x70
 8001e54:	4b57      	ldr	r3, [pc, #348]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	4a56      	ldr	r2, [pc, #344]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001e5a:	f023 0304 	bic.w	r3, r3, #4
 8001e5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d015      	beq.n	8001e94 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e68:	f7ff f870 	bl	8000f4c <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e70:	f7ff f86c 	bl	8000f4c <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e092      	b.n	8001fac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e86:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0ee      	beq.n	8001e70 <HAL_RCC_OscConfig+0x364>
 8001e92:	e014      	b.n	8001ebe <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7ff f85a 	bl	8000f4c <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e9c:	f7ff f856 	bl	8000f4c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e07c      	b.n	8001fac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb2:	4b40      	ldr	r3, [pc, #256]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ee      	bne.n	8001e9c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec4:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	4a3a      	ldr	r2, [pc, #232]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ece:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d068      	beq.n	8001faa <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ed8:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d060      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d145      	bne.n	8001f78 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eec:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <HAL_RCC_OscConfig+0x4b0>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef2:	f7ff f82b 	bl	8000f4c <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001efa:	f7ff f827 	bl	8000f4c <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e04f      	b.n	8001fac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0c:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f0      	bne.n	8001efa <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69da      	ldr	r2, [r3, #28]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	019b      	lsls	r3, r3, #6
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	085b      	lsrs	r3, r3, #1
 8001f30:	3b01      	subs	r3, #1
 8001f32:	041b      	lsls	r3, r3, #16
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	061b      	lsls	r3, r3, #24
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	071b      	lsls	r3, r3, #28
 8001f44:	491b      	ldr	r1, [pc, #108]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <HAL_RCC_OscConfig+0x4b0>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7fe fffc 	bl	8000f4c <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f58:	f7fe fff8 	bl	8000f4c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e020      	b.n	8001fac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x44c>
 8001f76:	e018      	b.n	8001faa <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_RCC_OscConfig+0x4b0>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7e:	f7fe ffe5 	bl	8000f4c <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f86:	f7fe ffe1 	bl	8000f4c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e009      	b.n	8001fac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_RCC_OscConfig+0x4a8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f0      	bne.n	8001f86 <HAL_RCC_OscConfig+0x47a>
 8001fa4:	e001      	b.n	8001faa <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	42470060 	.word	0x42470060

08001fc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e056      	b.n	8002080 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d106      	bne.n	8001ff2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7fe fd93 	bl	8000b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002008:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	ea42 0103 	orr.w	r1, r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	0c1b      	lsrs	r3, r3, #16
 8002050:	f003 0104 	and.w	r1, r3, #4
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	69da      	ldr	r2, [r3, #28]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800206e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	4613      	mov	r3, r2
 8002096:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_SPI_Transmit+0x22>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e11e      	b.n	80022e8 <HAL_SPI_Transmit+0x260>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020b2:	f7fe ff4b 	bl	8000f4c <HAL_GetTick>
 80020b6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d002      	beq.n	80020ce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80020c8:	2302      	movs	r3, #2
 80020ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020cc:	e103      	b.n	80022d6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_SPI_Transmit+0x52>
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020de:	e0fa      	b.n	80022d6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2203      	movs	r2, #3
 80020e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	88fa      	ldrh	r2, [r7, #6]
 80020f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	88fa      	ldrh	r2, [r7, #6]
 80020fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002126:	d107      	bne.n	8002138 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002136:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002142:	2b40      	cmp	r3, #64	; 0x40
 8002144:	d007      	beq.n	8002156 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800215e:	d14b      	bne.n	80021f8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <HAL_SPI_Transmit+0xe6>
 8002168:	8afb      	ldrh	r3, [r7, #22]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d13e      	bne.n	80021ec <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	881a      	ldrh	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	1c9a      	adds	r2, r3, #2
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002188:	b29b      	uxth	r3, r3
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002192:	e02b      	b.n	80021ec <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d112      	bne.n	80021c8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	881a      	ldrh	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	1c9a      	adds	r2, r3, #2
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80021c6:	e011      	b.n	80021ec <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021c8:	f7fe fec0 	bl	8000f4c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d803      	bhi.n	80021e0 <HAL_SPI_Transmit+0x158>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021de:	d102      	bne.n	80021e6 <HAL_SPI_Transmit+0x15e>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021ea:	e074      	b.n	80022d6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ce      	bne.n	8002194 <HAL_SPI_Transmit+0x10c>
 80021f6:	e04c      	b.n	8002292 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <HAL_SPI_Transmit+0x17e>
 8002200:	8afb      	ldrh	r3, [r7, #22]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d140      	bne.n	8002288 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	330c      	adds	r3, #12
 8002210:	7812      	ldrb	r2, [r2, #0]
 8002212:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800222c:	e02c      	b.n	8002288 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b02      	cmp	r3, #2
 800223a:	d113      	bne.n	8002264 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	330c      	adds	r3, #12
 8002246:	7812      	ldrb	r2, [r2, #0]
 8002248:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002258:	b29b      	uxth	r3, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	86da      	strh	r2, [r3, #54]	; 0x36
 8002262:	e011      	b.n	8002288 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002264:	f7fe fe72 	bl	8000f4c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d803      	bhi.n	800227c <HAL_SPI_Transmit+0x1f4>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227a:	d102      	bne.n	8002282 <HAL_SPI_Transmit+0x1fa>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002286:	e026      	b.n	80022d6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1cd      	bne.n	800222e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	6839      	ldr	r1, [r7, #0]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 fb62 	bl	8002960 <SPI_EndRxTxTransaction>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2220      	movs	r2, #32
 80022a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10a      	bne.n	80022c6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	77fb      	strb	r3, [r7, #31]
 80022d2:	e000      	b.n	80022d6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80022d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022fe:	2301      	movs	r3, #1
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_SPI_TransmitReceive+0x26>
 8002312:	2302      	movs	r3, #2
 8002314:	e18a      	b.n	800262c <HAL_SPI_TransmitReceive+0x33c>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800231e:	f7fe fe15 	bl	8000f4c <HAL_GetTick>
 8002322:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800232a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002334:	887b      	ldrh	r3, [r7, #2]
 8002336:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800233c:	2b01      	cmp	r3, #1
 800233e:	d00f      	beq.n	8002360 <HAL_SPI_TransmitReceive+0x70>
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002346:	d107      	bne.n	8002358 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d103      	bne.n	8002358 <HAL_SPI_TransmitReceive+0x68>
 8002350:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002354:	2b04      	cmp	r3, #4
 8002356:	d003      	beq.n	8002360 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002358:	2302      	movs	r3, #2
 800235a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800235e:	e15b      	b.n	8002618 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_SPI_TransmitReceive+0x82>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <HAL_SPI_TransmitReceive+0x82>
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002378:	e14e      	b.n	8002618 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b04      	cmp	r3, #4
 8002384:	d003      	beq.n	800238e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2205      	movs	r2, #5
 800238a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	887a      	ldrh	r2, [r7, #2]
 800239e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	887a      	ldrh	r2, [r7, #2]
 80023a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	887a      	ldrh	r2, [r7, #2]
 80023b6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ce:	2b40      	cmp	r3, #64	; 0x40
 80023d0:	d007      	beq.n	80023e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ea:	d178      	bne.n	80024de <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <HAL_SPI_TransmitReceive+0x10a>
 80023f4:	8b7b      	ldrh	r3, [r7, #26]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d166      	bne.n	80024c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	881a      	ldrh	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	1c9a      	adds	r2, r3, #2
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002414:	b29b      	uxth	r3, r3
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800241e:	e053      	b.n	80024c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b02      	cmp	r3, #2
 800242c:	d11b      	bne.n	8002466 <HAL_SPI_TransmitReceive+0x176>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002432:	b29b      	uxth	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d016      	beq.n	8002466 <HAL_SPI_TransmitReceive+0x176>
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	2b01      	cmp	r3, #1
 800243c:	d113      	bne.n	8002466 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	881a      	ldrh	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	1c9a      	adds	r2, r3, #2
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002458:	b29b      	uxth	r3, r3
 800245a:	3b01      	subs	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d119      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x1b8>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002478:	b29b      	uxth	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d014      	beq.n	80024a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002488:	b292      	uxth	r2, r2
 800248a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002490:	1c9a      	adds	r2, r3, #2
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024a4:	2301      	movs	r3, #1
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024a8:	f7fe fd50 	bl	8000f4c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d807      	bhi.n	80024c8 <HAL_SPI_TransmitReceive+0x1d8>
 80024b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024be:	d003      	beq.n	80024c8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024c6:	e0a7      	b.n	8002618 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1a6      	bne.n	8002420 <HAL_SPI_TransmitReceive+0x130>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1a1      	bne.n	8002420 <HAL_SPI_TransmitReceive+0x130>
 80024dc:	e07c      	b.n	80025d8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <HAL_SPI_TransmitReceive+0x1fc>
 80024e6:	8b7b      	ldrh	r3, [r7, #26]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d16b      	bne.n	80025c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	330c      	adds	r3, #12
 80024f6:	7812      	ldrb	r2, [r2, #0]
 80024f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002508:	b29b      	uxth	r3, r3
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002512:	e057      	b.n	80025c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b02      	cmp	r3, #2
 8002520:	d11c      	bne.n	800255c <HAL_SPI_TransmitReceive+0x26c>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d017      	beq.n	800255c <HAL_SPI_TransmitReceive+0x26c>
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	2b01      	cmp	r3, #1
 8002530:	d114      	bne.n	800255c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	330c      	adds	r3, #12
 800253c:	7812      	ldrb	r2, [r2, #0]
 800253e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b01      	cmp	r3, #1
 8002568:	d119      	bne.n	800259e <HAL_SPI_TransmitReceive+0x2ae>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d014      	beq.n	800259e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800259a:	2301      	movs	r3, #1
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800259e:	f7fe fcd5 	bl	8000f4c <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d803      	bhi.n	80025b6 <HAL_SPI_TransmitReceive+0x2c6>
 80025ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d102      	bne.n	80025bc <HAL_SPI_TransmitReceive+0x2cc>
 80025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d103      	bne.n	80025c4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025c2:	e029      	b.n	8002618 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1a2      	bne.n	8002514 <HAL_SPI_TransmitReceive+0x224>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d19d      	bne.n	8002514 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f9bf 	bl	8002960 <SPI_EndRxTxTransaction>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d006      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2220      	movs	r2, #32
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80025f4:	e010      	b.n	8002618 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10b      	bne.n	8002616 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	e000      	b.n	8002618 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002616:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002628:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800262c:	4618      	mov	r0, r3
 800262e:	3730      	adds	r7, #48	; 0x30
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	099b      	lsrs	r3, r3, #6
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10f      	bne.n	8002678 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	099b      	lsrs	r3, r3, #6
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	4798      	blx	r3
    return;
 8002676:	e0d8      	b.n	800282a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	085b      	lsrs	r3, r3, #1
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_SPI_IRQHandler+0x66>
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	09db      	lsrs	r3, r3, #7
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
    return;
 8002698:	e0c7      	b.n	800282a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10c      	bne.n	80026c0 <HAL_SPI_IRQHandler+0x8c>
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80b5 	beq.w	800282a <HAL_SPI_IRQHandler+0x1f6>
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80ae 	beq.w	800282a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d023      	beq.n	8002722 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d011      	beq.n	800270a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	f043 0204 	orr.w	r2, r3, #4
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	e00b      	b.n	8002722 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]
        return;
 8002720:	e083      	b.n	800282a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d014      	beq.n	8002758 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00c      	beq.n	800277e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002768:	f043 0208 	orr.w	r2, r3, #8
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	2b00      	cmp	r3, #0
 8002784:	d050      	beq.n	8002828 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002794:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d104      	bne.n	80027b2 <HAL_SPI_IRQHandler+0x17e>
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d034      	beq.n	800281c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0203 	bic.w	r2, r2, #3
 80027c0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d011      	beq.n	80027ee <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ce:	4a18      	ldr	r2, [pc, #96]	; (8002830 <HAL_SPI_IRQHandler+0x1fc>)
 80027d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fcf7 	bl	80011ca <HAL_DMA_Abort_IT>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d016      	beq.n	8002824 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fa:	4a0d      	ldr	r2, [pc, #52]	; (8002830 <HAL_SPI_IRQHandler+0x1fc>)
 80027fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fce1 	bl	80011ca <HAL_DMA_Abort_IT>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800281a:	e003      	b.n	8002824 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f809 	bl	8002834 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002822:	e000      	b.n	8002826 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002824:	bf00      	nop
    return;
 8002826:	bf00      	nop
 8002828:	bf00      	nop
  }
}
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	08002865 	.word	0x08002865

08002834 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002856:	b2db      	uxtb	r3, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002870:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f7ff ffd8 	bl	8002834 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800289c:	e04c      	b.n	8002938 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a4:	d048      	beq.n	8002938 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80028a6:	f7fe fb51 	bl	8000f4c <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d902      	bls.n	80028bc <SPI_WaitFlagStateUntilTimeout+0x30>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d13d      	bne.n	8002938 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028d4:	d111      	bne.n	80028fa <SPI_WaitFlagStateUntilTimeout+0x6e>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028de:	d004      	beq.n	80028ea <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e8:	d107      	bne.n	80028fa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002902:	d10f      	bne.n	8002924 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002922:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e00f      	b.n	8002958 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4013      	ands	r3, r2
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	429a      	cmp	r2, r3
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	429a      	cmp	r2, r3
 8002954:	d1a3      	bne.n	800289e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800296c:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <SPI_EndRxTxTransaction+0x7c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a1b      	ldr	r2, [pc, #108]	; (80029e0 <SPI_EndRxTxTransaction+0x80>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0d5b      	lsrs	r3, r3, #21
 8002978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800297c:	fb02 f303 	mul.w	r3, r2, r3
 8002980:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800298a:	d112      	bne.n	80029b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2200      	movs	r2, #0
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f7ff ff78 	bl	800288c <SPI_WaitFlagStateUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d016      	beq.n	80029d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	f043 0220 	orr.w	r2, r3, #32
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e00f      	b.n	80029d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c8:	2b80      	cmp	r3, #128	; 0x80
 80029ca:	d0f2      	beq.n	80029b2 <SPI_EndRxTxTransaction+0x52>
 80029cc:	e000      	b.n	80029d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80029ce:	bf00      	nop
  }

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000000 	.word	0x20000000
 80029e0:	165e9f81 	.word	0x165e9f81

080029e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e03f      	b.n	8002a76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe f8d4 	bl	8000bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2224      	movs	r2, #36	; 0x24
 8002a14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f90b 	bl	8002c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b088      	sub	sp, #32
 8002a82:	af02      	add	r7, sp, #8
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	f040 8083 	bne.w	8002ba6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_UART_Transmit+0x2e>
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e07b      	b.n	8002ba8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_UART_Transmit+0x40>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e074      	b.n	8002ba8 <HAL_UART_Transmit+0x12a>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2221      	movs	r2, #33	; 0x21
 8002ad0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ad4:	f7fe fa3a 	bl	8000f4c <HAL_GetTick>
 8002ad8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	88fa      	ldrh	r2, [r7, #6]
 8002ade:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	88fa      	ldrh	r2, [r7, #6]
 8002ae4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002aee:	e042      	b.n	8002b76 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b06:	d122      	bne.n	8002b4e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f84c 	bl	8002bb0 <UART_WaitOnFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e042      	b.n	8002ba8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b34:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d103      	bne.n	8002b46 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	3302      	adds	r3, #2
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	e017      	b.n	8002b76 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	e013      	b.n	8002b76 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2200      	movs	r2, #0
 8002b56:	2180      	movs	r1, #128	; 0x80
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f829 	bl	8002bb0 <UART_WaitOnFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e01f      	b.n	8002ba8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	60ba      	str	r2, [r7, #8]
 8002b6e:	781a      	ldrb	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1b7      	bne.n	8002af0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2200      	movs	r2, #0
 8002b88:	2140      	movs	r1, #64	; 0x40
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f810 	bl	8002bb0 <UART_WaitOnFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e006      	b.n	8002ba8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e000      	b.n	8002ba8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
  }
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bc0:	e02c      	b.n	8002c1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d028      	beq.n	8002c1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bd0:	f7fe f9bc 	bl	8000f4c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d21d      	bcs.n	8002c1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e00f      	b.n	8002c3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4013      	ands	r3, r2
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d0c3      	beq.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c48:	b085      	sub	sp, #20
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c86:	f023 030c 	bic.w	r3, r3, #12
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	68f9      	ldr	r1, [r7, #12]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	f040 818b 	bne.w	8002fcc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4ac1      	ldr	r2, [pc, #772]	; (8002fc0 <UART_SetConfig+0x37c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d005      	beq.n	8002ccc <UART_SetConfig+0x88>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4abf      	ldr	r2, [pc, #764]	; (8002fc4 <UART_SetConfig+0x380>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	f040 80bd 	bne.w	8002e46 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ccc:	f7fe fd6a 	bl	80017a4 <HAL_RCC_GetPCLK2Freq>
 8002cd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	461d      	mov	r5, r3
 8002cd6:	f04f 0600 	mov.w	r6, #0
 8002cda:	46a8      	mov	r8, r5
 8002cdc:	46b1      	mov	r9, r6
 8002cde:	eb18 0308 	adds.w	r3, r8, r8
 8002ce2:	eb49 0409 	adc.w	r4, r9, r9
 8002ce6:	4698      	mov	r8, r3
 8002ce8:	46a1      	mov	r9, r4
 8002cea:	eb18 0805 	adds.w	r8, r8, r5
 8002cee:	eb49 0906 	adc.w	r9, r9, r6
 8002cf2:	f04f 0100 	mov.w	r1, #0
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cfe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d02:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d06:	4688      	mov	r8, r1
 8002d08:	4691      	mov	r9, r2
 8002d0a:	eb18 0005 	adds.w	r0, r8, r5
 8002d0e:	eb49 0106 	adc.w	r1, r9, r6
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	461d      	mov	r5, r3
 8002d18:	f04f 0600 	mov.w	r6, #0
 8002d1c:	196b      	adds	r3, r5, r5
 8002d1e:	eb46 0406 	adc.w	r4, r6, r6
 8002d22:	461a      	mov	r2, r3
 8002d24:	4623      	mov	r3, r4
 8002d26:	f7fd fac3 	bl	80002b0 <__aeabi_uldivmod>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	460c      	mov	r4, r1
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4ba5      	ldr	r3, [pc, #660]	; (8002fc8 <UART_SetConfig+0x384>)
 8002d32:	fba3 2302 	umull	r2, r3, r3, r2
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	461d      	mov	r5, r3
 8002d40:	f04f 0600 	mov.w	r6, #0
 8002d44:	46a9      	mov	r9, r5
 8002d46:	46b2      	mov	sl, r6
 8002d48:	eb19 0309 	adds.w	r3, r9, r9
 8002d4c:	eb4a 040a 	adc.w	r4, sl, sl
 8002d50:	4699      	mov	r9, r3
 8002d52:	46a2      	mov	sl, r4
 8002d54:	eb19 0905 	adds.w	r9, r9, r5
 8002d58:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d5c:	f04f 0100 	mov.w	r1, #0
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d70:	4689      	mov	r9, r1
 8002d72:	4692      	mov	sl, r2
 8002d74:	eb19 0005 	adds.w	r0, r9, r5
 8002d78:	eb4a 0106 	adc.w	r1, sl, r6
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	461d      	mov	r5, r3
 8002d82:	f04f 0600 	mov.w	r6, #0
 8002d86:	196b      	adds	r3, r5, r5
 8002d88:	eb46 0406 	adc.w	r4, r6, r6
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4623      	mov	r3, r4
 8002d90:	f7fd fa8e 	bl	80002b0 <__aeabi_uldivmod>
 8002d94:	4603      	mov	r3, r0
 8002d96:	460c      	mov	r4, r1
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b8b      	ldr	r3, [pc, #556]	; (8002fc8 <UART_SetConfig+0x384>)
 8002d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	2164      	movs	r1, #100	; 0x64
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	3332      	adds	r3, #50	; 0x32
 8002dae:	4a86      	ldr	r2, [pc, #536]	; (8002fc8 <UART_SetConfig+0x384>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dbc:	4498      	add	r8, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	461d      	mov	r5, r3
 8002dc2:	f04f 0600 	mov.w	r6, #0
 8002dc6:	46a9      	mov	r9, r5
 8002dc8:	46b2      	mov	sl, r6
 8002dca:	eb19 0309 	adds.w	r3, r9, r9
 8002dce:	eb4a 040a 	adc.w	r4, sl, sl
 8002dd2:	4699      	mov	r9, r3
 8002dd4:	46a2      	mov	sl, r4
 8002dd6:	eb19 0905 	adds.w	r9, r9, r5
 8002dda:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002df2:	4689      	mov	r9, r1
 8002df4:	4692      	mov	sl, r2
 8002df6:	eb19 0005 	adds.w	r0, r9, r5
 8002dfa:	eb4a 0106 	adc.w	r1, sl, r6
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	461d      	mov	r5, r3
 8002e04:	f04f 0600 	mov.w	r6, #0
 8002e08:	196b      	adds	r3, r5, r5
 8002e0a:	eb46 0406 	adc.w	r4, r6, r6
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4623      	mov	r3, r4
 8002e12:	f7fd fa4d 	bl	80002b0 <__aeabi_uldivmod>
 8002e16:	4603      	mov	r3, r0
 8002e18:	460c      	mov	r4, r1
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <UART_SetConfig+0x384>)
 8002e1e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2164      	movs	r1, #100	; 0x64
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	3332      	adds	r3, #50	; 0x32
 8002e30:	4a65      	ldr	r2, [pc, #404]	; (8002fc8 <UART_SetConfig+0x384>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	f003 0207 	and.w	r2, r3, #7
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4442      	add	r2, r8
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	e26f      	b.n	8003326 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e46:	f7fe fc99 	bl	800177c <HAL_RCC_GetPCLK1Freq>
 8002e4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	461d      	mov	r5, r3
 8002e50:	f04f 0600 	mov.w	r6, #0
 8002e54:	46a8      	mov	r8, r5
 8002e56:	46b1      	mov	r9, r6
 8002e58:	eb18 0308 	adds.w	r3, r8, r8
 8002e5c:	eb49 0409 	adc.w	r4, r9, r9
 8002e60:	4698      	mov	r8, r3
 8002e62:	46a1      	mov	r9, r4
 8002e64:	eb18 0805 	adds.w	r8, r8, r5
 8002e68:	eb49 0906 	adc.w	r9, r9, r6
 8002e6c:	f04f 0100 	mov.w	r1, #0
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e80:	4688      	mov	r8, r1
 8002e82:	4691      	mov	r9, r2
 8002e84:	eb18 0005 	adds.w	r0, r8, r5
 8002e88:	eb49 0106 	adc.w	r1, r9, r6
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	461d      	mov	r5, r3
 8002e92:	f04f 0600 	mov.w	r6, #0
 8002e96:	196b      	adds	r3, r5, r5
 8002e98:	eb46 0406 	adc.w	r4, r6, r6
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4623      	mov	r3, r4
 8002ea0:	f7fd fa06 	bl	80002b0 <__aeabi_uldivmod>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	460c      	mov	r4, r1
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b47      	ldr	r3, [pc, #284]	; (8002fc8 <UART_SetConfig+0x384>)
 8002eac:	fba3 2302 	umull	r2, r3, r3, r2
 8002eb0:	095b      	lsrs	r3, r3, #5
 8002eb2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	461d      	mov	r5, r3
 8002eba:	f04f 0600 	mov.w	r6, #0
 8002ebe:	46a9      	mov	r9, r5
 8002ec0:	46b2      	mov	sl, r6
 8002ec2:	eb19 0309 	adds.w	r3, r9, r9
 8002ec6:	eb4a 040a 	adc.w	r4, sl, sl
 8002eca:	4699      	mov	r9, r3
 8002ecc:	46a2      	mov	sl, r4
 8002ece:	eb19 0905 	adds.w	r9, r9, r5
 8002ed2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ed6:	f04f 0100 	mov.w	r1, #0
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ee2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ee6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002eea:	4689      	mov	r9, r1
 8002eec:	4692      	mov	sl, r2
 8002eee:	eb19 0005 	adds.w	r0, r9, r5
 8002ef2:	eb4a 0106 	adc.w	r1, sl, r6
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	461d      	mov	r5, r3
 8002efc:	f04f 0600 	mov.w	r6, #0
 8002f00:	196b      	adds	r3, r5, r5
 8002f02:	eb46 0406 	adc.w	r4, r6, r6
 8002f06:	461a      	mov	r2, r3
 8002f08:	4623      	mov	r3, r4
 8002f0a:	f7fd f9d1 	bl	80002b0 <__aeabi_uldivmod>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	460c      	mov	r4, r1
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <UART_SetConfig+0x384>)
 8002f16:	fba3 1302 	umull	r1, r3, r3, r2
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	2164      	movs	r1, #100	; 0x64
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	3332      	adds	r3, #50	; 0x32
 8002f28:	4a27      	ldr	r2, [pc, #156]	; (8002fc8 <UART_SetConfig+0x384>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f36:	4498      	add	r8, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	461d      	mov	r5, r3
 8002f3c:	f04f 0600 	mov.w	r6, #0
 8002f40:	46a9      	mov	r9, r5
 8002f42:	46b2      	mov	sl, r6
 8002f44:	eb19 0309 	adds.w	r3, r9, r9
 8002f48:	eb4a 040a 	adc.w	r4, sl, sl
 8002f4c:	4699      	mov	r9, r3
 8002f4e:	46a2      	mov	sl, r4
 8002f50:	eb19 0905 	adds.w	r9, r9, r5
 8002f54:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f6c:	4689      	mov	r9, r1
 8002f6e:	4692      	mov	sl, r2
 8002f70:	eb19 0005 	adds.w	r0, r9, r5
 8002f74:	eb4a 0106 	adc.w	r1, sl, r6
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	461d      	mov	r5, r3
 8002f7e:	f04f 0600 	mov.w	r6, #0
 8002f82:	196b      	adds	r3, r5, r5
 8002f84:	eb46 0406 	adc.w	r4, r6, r6
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4623      	mov	r3, r4
 8002f8c:	f7fd f990 	bl	80002b0 <__aeabi_uldivmod>
 8002f90:	4603      	mov	r3, r0
 8002f92:	460c      	mov	r4, r1
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <UART_SetConfig+0x384>)
 8002f98:	fba3 1302 	umull	r1, r3, r3, r2
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	2164      	movs	r1, #100	; 0x64
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	3332      	adds	r3, #50	; 0x32
 8002faa:	4a07      	ldr	r2, [pc, #28]	; (8002fc8 <UART_SetConfig+0x384>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	f003 0207 	and.w	r2, r3, #7
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4442      	add	r2, r8
 8002fbc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002fbe:	e1b2      	b.n	8003326 <UART_SetConfig+0x6e2>
 8002fc0:	40011000 	.word	0x40011000
 8002fc4:	40011400 	.word	0x40011400
 8002fc8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4ad7      	ldr	r2, [pc, #860]	; (8003330 <UART_SetConfig+0x6ec>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d005      	beq.n	8002fe2 <UART_SetConfig+0x39e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4ad6      	ldr	r2, [pc, #856]	; (8003334 <UART_SetConfig+0x6f0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	f040 80d1 	bne.w	8003184 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fe2:	f7fe fbdf 	bl	80017a4 <HAL_RCC_GetPCLK2Freq>
 8002fe6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	469a      	mov	sl, r3
 8002fec:	f04f 0b00 	mov.w	fp, #0
 8002ff0:	46d0      	mov	r8, sl
 8002ff2:	46d9      	mov	r9, fp
 8002ff4:	eb18 0308 	adds.w	r3, r8, r8
 8002ff8:	eb49 0409 	adc.w	r4, r9, r9
 8002ffc:	4698      	mov	r8, r3
 8002ffe:	46a1      	mov	r9, r4
 8003000:	eb18 080a 	adds.w	r8, r8, sl
 8003004:	eb49 090b 	adc.w	r9, r9, fp
 8003008:	f04f 0100 	mov.w	r1, #0
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003014:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003018:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800301c:	4688      	mov	r8, r1
 800301e:	4691      	mov	r9, r2
 8003020:	eb1a 0508 	adds.w	r5, sl, r8
 8003024:	eb4b 0609 	adc.w	r6, fp, r9
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4619      	mov	r1, r3
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	f04f 0400 	mov.w	r4, #0
 800303a:	0094      	lsls	r4, r2, #2
 800303c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003040:	008b      	lsls	r3, r1, #2
 8003042:	461a      	mov	r2, r3
 8003044:	4623      	mov	r3, r4
 8003046:	4628      	mov	r0, r5
 8003048:	4631      	mov	r1, r6
 800304a:	f7fd f931 	bl	80002b0 <__aeabi_uldivmod>
 800304e:	4603      	mov	r3, r0
 8003050:	460c      	mov	r4, r1
 8003052:	461a      	mov	r2, r3
 8003054:	4bb8      	ldr	r3, [pc, #736]	; (8003338 <UART_SetConfig+0x6f4>)
 8003056:	fba3 2302 	umull	r2, r3, r3, r2
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	469b      	mov	fp, r3
 8003064:	f04f 0c00 	mov.w	ip, #0
 8003068:	46d9      	mov	r9, fp
 800306a:	46e2      	mov	sl, ip
 800306c:	eb19 0309 	adds.w	r3, r9, r9
 8003070:	eb4a 040a 	adc.w	r4, sl, sl
 8003074:	4699      	mov	r9, r3
 8003076:	46a2      	mov	sl, r4
 8003078:	eb19 090b 	adds.w	r9, r9, fp
 800307c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003080:	f04f 0100 	mov.w	r1, #0
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800308c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003090:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003094:	4689      	mov	r9, r1
 8003096:	4692      	mov	sl, r2
 8003098:	eb1b 0509 	adds.w	r5, fp, r9
 800309c:	eb4c 060a 	adc.w	r6, ip, sl
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4619      	mov	r1, r3
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	f04f 0400 	mov.w	r4, #0
 80030b2:	0094      	lsls	r4, r2, #2
 80030b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030b8:	008b      	lsls	r3, r1, #2
 80030ba:	461a      	mov	r2, r3
 80030bc:	4623      	mov	r3, r4
 80030be:	4628      	mov	r0, r5
 80030c0:	4631      	mov	r1, r6
 80030c2:	f7fd f8f5 	bl	80002b0 <__aeabi_uldivmod>
 80030c6:	4603      	mov	r3, r0
 80030c8:	460c      	mov	r4, r1
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b9a      	ldr	r3, [pc, #616]	; (8003338 <UART_SetConfig+0x6f4>)
 80030ce:	fba3 1302 	umull	r1, r3, r3, r2
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2164      	movs	r1, #100	; 0x64
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	3332      	adds	r3, #50	; 0x32
 80030e0:	4a95      	ldr	r2, [pc, #596]	; (8003338 <UART_SetConfig+0x6f4>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ec:	4498      	add	r8, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	469b      	mov	fp, r3
 80030f2:	f04f 0c00 	mov.w	ip, #0
 80030f6:	46d9      	mov	r9, fp
 80030f8:	46e2      	mov	sl, ip
 80030fa:	eb19 0309 	adds.w	r3, r9, r9
 80030fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003102:	4699      	mov	r9, r3
 8003104:	46a2      	mov	sl, r4
 8003106:	eb19 090b 	adds.w	r9, r9, fp
 800310a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800310e:	f04f 0100 	mov.w	r1, #0
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800311a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800311e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003122:	4689      	mov	r9, r1
 8003124:	4692      	mov	sl, r2
 8003126:	eb1b 0509 	adds.w	r5, fp, r9
 800312a:	eb4c 060a 	adc.w	r6, ip, sl
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4619      	mov	r1, r3
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	f04f 0400 	mov.w	r4, #0
 8003140:	0094      	lsls	r4, r2, #2
 8003142:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003146:	008b      	lsls	r3, r1, #2
 8003148:	461a      	mov	r2, r3
 800314a:	4623      	mov	r3, r4
 800314c:	4628      	mov	r0, r5
 800314e:	4631      	mov	r1, r6
 8003150:	f7fd f8ae 	bl	80002b0 <__aeabi_uldivmod>
 8003154:	4603      	mov	r3, r0
 8003156:	460c      	mov	r4, r1
 8003158:	461a      	mov	r2, r3
 800315a:	4b77      	ldr	r3, [pc, #476]	; (8003338 <UART_SetConfig+0x6f4>)
 800315c:	fba3 1302 	umull	r1, r3, r3, r2
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	2164      	movs	r1, #100	; 0x64
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	3332      	adds	r3, #50	; 0x32
 800316e:	4a72      	ldr	r2, [pc, #456]	; (8003338 <UART_SetConfig+0x6f4>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	f003 020f 	and.w	r2, r3, #15
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4442      	add	r2, r8
 8003180:	609a      	str	r2, [r3, #8]
 8003182:	e0d0      	b.n	8003326 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003184:	f7fe fafa 	bl	800177c <HAL_RCC_GetPCLK1Freq>
 8003188:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	469a      	mov	sl, r3
 800318e:	f04f 0b00 	mov.w	fp, #0
 8003192:	46d0      	mov	r8, sl
 8003194:	46d9      	mov	r9, fp
 8003196:	eb18 0308 	adds.w	r3, r8, r8
 800319a:	eb49 0409 	adc.w	r4, r9, r9
 800319e:	4698      	mov	r8, r3
 80031a0:	46a1      	mov	r9, r4
 80031a2:	eb18 080a 	adds.w	r8, r8, sl
 80031a6:	eb49 090b 	adc.w	r9, r9, fp
 80031aa:	f04f 0100 	mov.w	r1, #0
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031be:	4688      	mov	r8, r1
 80031c0:	4691      	mov	r9, r2
 80031c2:	eb1a 0508 	adds.w	r5, sl, r8
 80031c6:	eb4b 0609 	adc.w	r6, fp, r9
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4619      	mov	r1, r3
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	f04f 0400 	mov.w	r4, #0
 80031dc:	0094      	lsls	r4, r2, #2
 80031de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031e2:	008b      	lsls	r3, r1, #2
 80031e4:	461a      	mov	r2, r3
 80031e6:	4623      	mov	r3, r4
 80031e8:	4628      	mov	r0, r5
 80031ea:	4631      	mov	r1, r6
 80031ec:	f7fd f860 	bl	80002b0 <__aeabi_uldivmod>
 80031f0:	4603      	mov	r3, r0
 80031f2:	460c      	mov	r4, r1
 80031f4:	461a      	mov	r2, r3
 80031f6:	4b50      	ldr	r3, [pc, #320]	; (8003338 <UART_SetConfig+0x6f4>)
 80031f8:	fba3 2302 	umull	r2, r3, r3, r2
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	469b      	mov	fp, r3
 8003206:	f04f 0c00 	mov.w	ip, #0
 800320a:	46d9      	mov	r9, fp
 800320c:	46e2      	mov	sl, ip
 800320e:	eb19 0309 	adds.w	r3, r9, r9
 8003212:	eb4a 040a 	adc.w	r4, sl, sl
 8003216:	4699      	mov	r9, r3
 8003218:	46a2      	mov	sl, r4
 800321a:	eb19 090b 	adds.w	r9, r9, fp
 800321e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003222:	f04f 0100 	mov.w	r1, #0
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800322e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003232:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003236:	4689      	mov	r9, r1
 8003238:	4692      	mov	sl, r2
 800323a:	eb1b 0509 	adds.w	r5, fp, r9
 800323e:	eb4c 060a 	adc.w	r6, ip, sl
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4619      	mov	r1, r3
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	f04f 0400 	mov.w	r4, #0
 8003254:	0094      	lsls	r4, r2, #2
 8003256:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800325a:	008b      	lsls	r3, r1, #2
 800325c:	461a      	mov	r2, r3
 800325e:	4623      	mov	r3, r4
 8003260:	4628      	mov	r0, r5
 8003262:	4631      	mov	r1, r6
 8003264:	f7fd f824 	bl	80002b0 <__aeabi_uldivmod>
 8003268:	4603      	mov	r3, r0
 800326a:	460c      	mov	r4, r1
 800326c:	461a      	mov	r2, r3
 800326e:	4b32      	ldr	r3, [pc, #200]	; (8003338 <UART_SetConfig+0x6f4>)
 8003270:	fba3 1302 	umull	r1, r3, r3, r2
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	2164      	movs	r1, #100	; 0x64
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	3332      	adds	r3, #50	; 0x32
 8003282:	4a2d      	ldr	r2, [pc, #180]	; (8003338 <UART_SetConfig+0x6f4>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800328e:	4498      	add	r8, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	469b      	mov	fp, r3
 8003294:	f04f 0c00 	mov.w	ip, #0
 8003298:	46d9      	mov	r9, fp
 800329a:	46e2      	mov	sl, ip
 800329c:	eb19 0309 	adds.w	r3, r9, r9
 80032a0:	eb4a 040a 	adc.w	r4, sl, sl
 80032a4:	4699      	mov	r9, r3
 80032a6:	46a2      	mov	sl, r4
 80032a8:	eb19 090b 	adds.w	r9, r9, fp
 80032ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032b0:	f04f 0100 	mov.w	r1, #0
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032c4:	4689      	mov	r9, r1
 80032c6:	4692      	mov	sl, r2
 80032c8:	eb1b 0509 	adds.w	r5, fp, r9
 80032cc:	eb4c 060a 	adc.w	r6, ip, sl
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4619      	mov	r1, r3
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	f04f 0400 	mov.w	r4, #0
 80032e2:	0094      	lsls	r4, r2, #2
 80032e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032e8:	008b      	lsls	r3, r1, #2
 80032ea:	461a      	mov	r2, r3
 80032ec:	4623      	mov	r3, r4
 80032ee:	4628      	mov	r0, r5
 80032f0:	4631      	mov	r1, r6
 80032f2:	f7fc ffdd 	bl	80002b0 <__aeabi_uldivmod>
 80032f6:	4603      	mov	r3, r0
 80032f8:	460c      	mov	r4, r1
 80032fa:	461a      	mov	r2, r3
 80032fc:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <UART_SetConfig+0x6f4>)
 80032fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2164      	movs	r1, #100	; 0x64
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	3332      	adds	r3, #50	; 0x32
 8003310:	4a09      	ldr	r2, [pc, #36]	; (8003338 <UART_SetConfig+0x6f4>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	f003 020f 	and.w	r2, r3, #15
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4442      	add	r2, r8
 8003322:	609a      	str	r2, [r3, #8]
}
 8003324:	e7ff      	b.n	8003326 <UART_SetConfig+0x6e2>
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003330:	40011000 	.word	0x40011000
 8003334:	40011400 	.word	0x40011400
 8003338:	51eb851f 	.word	0x51eb851f

0800333c <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8003344:	2101      	movs	r1, #1
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f80d 	bl	8003366 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6858      	ldr	r0, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	b29b      	uxth	r3, r3
 8003356:	2200      	movs	r2, #0
 8003358:	4619      	mov	r1, r3
 800335a:	f7fe f903 	bl	8001564 <HAL_GPIO_WritePin>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6958      	ldr	r0, [r3, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	b299      	uxth	r1, r3
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b01      	cmp	r3, #1
 800337e:	bf0c      	ite	eq
 8003380:	2301      	moveq	r3, #1
 8003382:	2300      	movne	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	f7fe f8ec 	bl	8001564 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t * hw) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800339c:	2101      	movs	r1, #1
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ffe1 	bl	8003366 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6858      	ldr	r0, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2200      	movs	r2, #0
 80033b0:	4619      	mov	r1, r3
 80033b2:	f7fe f8d7 	bl	8001564 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80033b6:	2001      	movs	r0, #1
 80033b8:	f000 f855 	bl	8003466 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6858      	ldr	r0, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2201      	movs	r2, #1
 80033c8:	4619      	mov	r1, r3
 80033ca:	f7fe f8cb 	bl	8001564 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 80033ce:	2064      	movs	r0, #100	; 0x64
 80033d0:	f000 f849 	bl	8003466 <SX1278_hw_DelayMs>
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 80033e8:	2100      	movs	r1, #0
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff ffbb 	bl	8003366 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6998      	ldr	r0, [r3, #24]
 80033f4:	1cf9      	adds	r1, r7, #3
 80033f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033fa:	2201      	movs	r2, #1
 80033fc:	f7fe fe44 	bl	8002088 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8003400:	bf00      	nop
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fa1e 	bl	8002848 <HAL_SPI_GetState>
 800340c:	4603      	mov	r3, r0
 800340e:	2b01      	cmp	r3, #1
 8003410:	d1f7      	bne.n	8003402 <SX1278_hw_SPICommand+0x26>
		;
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af02      	add	r7, sp, #8
 8003420:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8003426:	2300      	movs	r3, #0
 8003428:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800342a:	2100      	movs	r1, #0
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ff9a 	bl	8003366 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6998      	ldr	r0, [r3, #24]
 8003436:	f107 020e 	add.w	r2, r7, #14
 800343a:	f107 010f 	add.w	r1, r7, #15
 800343e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	2301      	movs	r3, #1
 8003446:	f7fe ff53 	bl	80022f0 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800344a:	bf00      	nop
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff f9f9 	bl	8002848 <HAL_SPI_GetState>
 8003456:	4603      	mov	r3, r0
 8003458:	2b01      	cmp	r3, #1
 800345a:	d1f7      	bne.n	800344c <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 800345c:	7bbb      	ldrb	r3, [r7, #14]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fd fd78 	bl	8000f64 <HAL_Delay>
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	b29b      	uxth	r3, r3
 800348e:	4619      	mov	r1, r3
 8003490:	4610      	mov	r0, r2
 8003492:	f7fe f84f 	bl	8001534 <HAL_GPIO_ReadPin>
 8003496:	4603      	mov	r3, r0
 8003498:	2b01      	cmp	r3, #1
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff ff8c 	bl	80033dc <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ffa6 	bl	800341a <SX1278_hw_SPIReadByte>
 80034ce:	4603      	mov	r3, r0
 80034d0:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2101      	movs	r1, #1
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff44 	bl	8003366 <SX1278_hw_SetNSS>
	return tmp;
 80034de:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	70fb      	strb	r3, [r7, #3]
 80034f4:	4613      	mov	r3, r2
 80034f6:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff ff31 	bl	8003366 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800350e:	b2db      	uxtb	r3, r3
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f7ff ff62 	bl	80033dc <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	78ba      	ldrb	r2, [r7, #2]
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff5b 	bl	80033dc <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2101      	movs	r1, #1
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff1a 	bl	8003366 <SX1278_hw_SetNSS>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t * module, uint8_t addr, uint8_t* rxBuf,
		uint8_t length) {
 800353a:	b590      	push	{r4, r7, lr}
 800353c:	b087      	sub	sp, #28
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	461a      	mov	r2, r3
 8003546:	460b      	mov	r3, r1
 8003548:	72fb      	strb	r3, [r7, #11]
 800354a:	4613      	mov	r3, r2
 800354c:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 800354e:	7abb      	ldrb	r3, [r7, #10]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d927      	bls.n	80035a4 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff ff03 	bl	8003366 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	7afa      	ldrb	r2, [r7, #11]
 8003566:	4611      	mov	r1, r2
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff ff37 	bl	80033dc <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]
 8003572:	e00c      	b.n	800358e <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6819      	ldr	r1, [r3, #0]
 8003578:	7dfb      	ldrb	r3, [r7, #23]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	18d4      	adds	r4, r2, r3
 800357e:	4608      	mov	r0, r1
 8003580:	f7ff ff4b 	bl	800341a <SX1278_hw_SPIReadByte>
 8003584:	4603      	mov	r3, r0
 8003586:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	3301      	adds	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
 800358e:	7dfa      	ldrb	r2, [r7, #23]
 8003590:	7abb      	ldrb	r3, [r7, #10]
 8003592:	429a      	cmp	r2, r3
 8003594:	d3ee      	bcc.n	8003574 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2101      	movs	r1, #1
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fee2 	bl	8003366 <SX1278_hw_SetNSS>
 80035a2:	e000      	b.n	80035a6 <SX1278_SPIBurstRead+0x6c>
		return;
 80035a4:	bf00      	nop
	}
}
 80035a6:	371c      	adds	r7, #28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd90      	pop	{r4, r7, pc}

080035ac <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	461a      	mov	r2, r3
 80035b8:	460b      	mov	r3, r1
 80035ba:	72fb      	strb	r3, [r7, #11]
 80035bc:	4613      	mov	r3, r2
 80035be:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 80035c0:	7abb      	ldrb	r3, [r7, #10]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d929      	bls.n	800361a <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff feca 	bl	8003366 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	7afb      	ldrb	r3, [r7, #11]
 80035d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	4619      	mov	r1, r3
 80035e0:	4610      	mov	r0, r2
 80035e2:	f7ff fefb 	bl	80033dc <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80035e6:	2300      	movs	r3, #0
 80035e8:	75fb      	strb	r3, [r7, #23]
 80035ea:	e00b      	b.n	8003604 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	4413      	add	r3, r2
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	4619      	mov	r1, r3
 80035fa:	f7ff feef 	bl	80033dc <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80035fe:	7dfb      	ldrb	r3, [r7, #23]
 8003600:	3301      	adds	r3, #1
 8003602:	75fb      	strb	r3, [r7, #23]
 8003604:	7dfa      	ldrb	r2, [r7, #23]
 8003606:	7abb      	ldrb	r3, [r7, #10]
 8003608:	429a      	cmp	r2, r3
 800360a:	d3ef      	bcc.n	80035ec <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2101      	movs	r1, #1
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fea7 	bl	8003366 <SX1278_hw_SetNSS>
 8003618:	e000      	b.n	800361c <SX1278_SPIBurstWrite+0x70>
		return;
 800361a:	bf00      	nop
	}
}
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af02      	add	r7, sp, #8
 8003628:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7919      	ldrb	r1, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	795a      	ldrb	r2, [r3, #5]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	7998      	ldrb	r0, [r3, #6]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	79db      	ldrb	r3, [r3, #7]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	4603      	mov	r3, r0
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f804 	bl	800364c <SX1278_config>
			module->LoRa_BW);
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	4608      	mov	r0, r1
 8003656:	4611      	mov	r1, r2
 8003658:	461a      	mov	r2, r3
 800365a:	4603      	mov	r3, r0
 800365c:	70fb      	strb	r3, [r7, #3]
 800365e:	460b      	mov	r3, r1
 8003660:	70bb      	strb	r3, [r7, #2]
 8003662:	4613      	mov	r3, r2
 8003664:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8aa 	bl	80037c0 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800366c:	200f      	movs	r0, #15
 800366e:	f7ff fefa 	bl	8003466 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f8b4 	bl	80037e0 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	4613      	mov	r3, r2
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	4413      	add	r3, r2
 8003680:	4a43      	ldr	r2, [pc, #268]	; (8003790 <SX1278_config+0x144>)
 8003682:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8003684:	2303      	movs	r3, #3
 8003686:	2106      	movs	r1, #6
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ff8f 	bl	80035ac <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 800368e:	78bb      	ldrb	r3, [r7, #2]
 8003690:	4a40      	ldr	r2, [pc, #256]	; (8003794 <SX1278_config+0x148>)
 8003692:	5cd3      	ldrb	r3, [r2, r3]
 8003694:	461a      	mov	r2, r3
 8003696:	2109      	movs	r1, #9
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ff25 	bl	80034e8 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800369e:	220b      	movs	r2, #11
 80036a0:	210b      	movs	r1, #11
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ff20 	bl	80034e8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80036a8:	2223      	movs	r2, #35	; 0x23
 80036aa:	210c      	movs	r1, #12
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff1b 	bl	80034e8 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 80036b2:	787b      	ldrb	r3, [r7, #1]
 80036b4:	4a38      	ldr	r2, [pc, #224]	; (8003798 <SX1278_config+0x14c>)
 80036b6:	5cd3      	ldrb	r3, [r2, r3]
 80036b8:	2b06      	cmp	r3, #6
 80036ba:	d131      	bne.n	8003720 <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80036bc:	7e3b      	ldrb	r3, [r7, #24]
 80036be:	4a37      	ldr	r2, [pc, #220]	; (800379c <SX1278_config+0x150>)
 80036c0:	5cd3      	ldrb	r3, [r2, r3]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80036c6:	3303      	adds	r3, #3
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	211d      	movs	r1, #29
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff ff0a 	bl	80034e8 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 80036d4:	787b      	ldrb	r3, [r7, #1]
 80036d6:	4a30      	ldr	r2, [pc, #192]	; (8003798 <SX1278_config+0x14c>)
 80036d8:	5cd3      	ldrb	r3, [r2, r3]
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80036de:	3307      	adds	r3, #7
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	461a      	mov	r2, r3
 80036e4:	211e      	movs	r1, #30
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff fefe 	bl	80034e8 <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 80036ec:	2131      	movs	r1, #49	; 0x31
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff fedb 	bl	80034aa <SX1278_SPIRead>
 80036f4:	4603      	mov	r3, r0
 80036f6:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	f023 0307 	bic.w	r3, r3, #7
 80036fe:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	f043 0305 	orr.w	r3, r3, #5
 8003706:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	461a      	mov	r2, r3
 800370c:	2131      	movs	r1, #49	; 0x31
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff feea 	bl	80034e8 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8003714:	220c      	movs	r2, #12
 8003716:	2137      	movs	r1, #55	; 0x37
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff fee5 	bl	80034e8 <SX1278_SPIWrite>
 800371e:	e017      	b.n	8003750 <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8003720:	7e3b      	ldrb	r3, [r7, #24]
 8003722:	4a1e      	ldr	r2, [pc, #120]	; (800379c <SX1278_config+0x150>)
 8003724:	5cd3      	ldrb	r3, [r2, r3]
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800372a:	3302      	adds	r3, #2
 800372c:	b2db      	uxtb	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	211d      	movs	r1, #29
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fed8 	bl	80034e8 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8003738:	787b      	ldrb	r3, [r7, #1]
 800373a:	4a17      	ldr	r2, [pc, #92]	; (8003798 <SX1278_config+0x14c>)
 800373c:	5cd3      	ldrb	r3, [r2, r3]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8003742:	3307      	adds	r3, #7
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	211e      	movs	r1, #30
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff fecc 	bl	80034e8 <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8003750:	22ff      	movs	r2, #255	; 0xff
 8003752:	211f      	movs	r1, #31
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff fec7 	bl	80034e8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800375a:	2200      	movs	r2, #0
 800375c:	2120      	movs	r1, #32
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff fec2 	bl	80034e8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8003764:	220c      	movs	r2, #12
 8003766:	2121      	movs	r1, #33	; 0x21
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff febd 	bl	80034e8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 800376e:	2201      	movs	r2, #1
 8003770:	2141      	movs	r1, #65	; 0x41
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff feb8 	bl	80034e8 <SX1278_SPIWrite>
	module->readBytes = 0;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f80d 	bl	80037a0 <SX1278_standby>
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	08004efc 	.word	0x08004efc
 8003794:	08004f00 	.word	0x08004f00
 8003798:	08004f04 	.word	0x08004f04
 800379c:	08004f0c 	.word	0x08004f0c

080037a0 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80037a8:	2209      	movs	r2, #9
 80037aa:	2101      	movs	r1, #1
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff fe9b 	bl	80034e8 <SX1278_SPIWrite>
	module->status = STANDBY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	725a      	strb	r2, [r3, #9]
}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80037c8:	2208      	movs	r2, #8
 80037ca:	2101      	movs	r1, #1
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff fe8b 	bl	80034e8 <SX1278_SPIWrite>
	module->status = SLEEP;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	725a      	strb	r2, [r3, #9]
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80037e8:	2288      	movs	r2, #136	; 0x88
 80037ea:	2101      	movs	r1, #1
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff fe7b 	bl	80034e8 <SX1278_SPIWrite>
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8003802:	22ff      	movs	r2, #255	; 0xff
 8003804:	2112      	movs	r1, #18
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff fe6e 	bl	80034e8 <SX1278_SPIWrite>
}
 800380c:	bf00      	nop
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	460b      	mov	r3, r1
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	7afa      	ldrb	r2, [r7, #11]
 8003826:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7ff fefa 	bl	8003622 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800382e:	2284      	movs	r2, #132	; 0x84
 8003830:	214d      	movs	r1, #77	; 0x4d
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff fe58 	bl	80034e8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8003838:	22ff      	movs	r2, #255	; 0xff
 800383a:	2124      	movs	r1, #36	; 0x24
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f7ff fe53 	bl	80034e8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8003842:	2201      	movs	r2, #1
 8003844:	2140      	movs	r1, #64	; 0x40
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7ff fe4e 	bl	80034e8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 800384c:	223f      	movs	r2, #63	; 0x3f
 800384e:	2111      	movs	r1, #17
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff fe49 	bl	80034e8 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f7ff ffcf 	bl	80037fa <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800385c:	7afb      	ldrb	r3, [r7, #11]
 800385e:	461a      	mov	r2, r3
 8003860:	2122      	movs	r1, #34	; 0x22
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff fe40 	bl	80034e8 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8003868:	210f      	movs	r1, #15
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f7ff fe1d 	bl	80034aa <SX1278_SPIRead>
 8003870:	4603      	mov	r3, r0
 8003872:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	461a      	mov	r2, r3
 8003878:	210d      	movs	r1, #13
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff fe34 	bl	80034e8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8003880:	228d      	movs	r2, #141	; 0x8d
 8003882:	2101      	movs	r1, #1
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f7ff fe2f 	bl	80034e8 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8003892:	2118      	movs	r1, #24
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f7ff fe08 	bl	80034aa <SX1278_SPIRead>
 800389a:	4603      	mov	r3, r0
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d104      	bne.n	80038ae <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2203      	movs	r2, #3
 80038a8:	725a      	strb	r2, [r3, #9]
			return 1;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e013      	b.n	80038d6 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff fd68 	bl	8003394 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7ff feac 	bl	8003622 <SX1278_defaultConfig>
			return 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e003      	b.n	80038d6 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80038ce:	2001      	movs	r0, #1
 80038d0:	f7ff fdc9 	bl	8003466 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80038d4:	e7dd      	b.n	8003892 <SX1278_LoRaEntryRx+0x7e>
	}
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t * module) {
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fdc6 	bl	800347c <SX1278_hw_GetDIO0>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d030      	beq.n	8003958 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	330a      	adds	r3, #10
 80038fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f000 f94a 	bl	8003b9a <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8003906:	2110      	movs	r1, #16
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff fdce 	bl	80034aa <SX1278_SPIRead>
 800390e:	4603      	mov	r3, r0
 8003910:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8003912:	7bbb      	ldrb	r3, [r7, #14]
 8003914:	461a      	mov	r2, r3
 8003916:	210d      	movs	r1, #13
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff fde5 	bl	80034e8 <SX1278_SPIWrite>

		if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	799b      	ldrb	r3, [r3, #6]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d103      	bne.n	800392e <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	7a1b      	ldrb	r3, [r3, #8]
 800392a:	73fb      	strb	r3, [r7, #15]
 800392c:	e005      	b.n	800393a <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800392e:	2113      	movs	r1, #19
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff fdba 	bl	80034aa <SX1278_SPIRead>
 8003936:	4603      	mov	r3, r0
 8003938:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f103 020a 	add.w	r2, r3, #10
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2100      	movs	r1, #0
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff fdf8 	bl	800353a <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	7bfa      	ldrb	r2, [r7, #15]
 800394e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
		SX1278_clearLoRaIrq(module);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff ff51 	bl	80037fa <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8003966:	b580      	push	{r7, lr}
 8003968:	b086      	sub	sp, #24
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	460b      	mov	r3, r1
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	7afa      	ldrb	r2, [r7, #11]
 8003978:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module); //setting base parameter
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f7ff fe51 	bl	8003622 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8003980:	2287      	movs	r2, #135	; 0x87
 8003982:	214d      	movs	r1, #77	; 0x4d
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff fdaf 	bl	80034e8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 800398a:	2200      	movs	r2, #0
 800398c:	2124      	movs	r1, #36	; 0x24
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f7ff fdaa 	bl	80034e8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8003994:	2241      	movs	r2, #65	; 0x41
 8003996:	2140      	movs	r1, #64	; 0x40
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7ff fda5 	bl	80034e8 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7ff ff2b 	bl	80037fa <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80039a4:	22f7      	movs	r2, #247	; 0xf7
 80039a6:	2111      	movs	r1, #17
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7ff fd9d 	bl	80034e8 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80039ae:	7afb      	ldrb	r3, [r7, #11]
 80039b0:	461a      	mov	r2, r3
 80039b2:	2122      	movs	r1, #34	; 0x22
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f7ff fd97 	bl	80034e8 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80039ba:	210e      	movs	r1, #14
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff fd74 	bl	80034aa <SX1278_SPIRead>
 80039c2:	4603      	mov	r3, r0
 80039c4:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
 80039c8:	461a      	mov	r2, r3
 80039ca:	210d      	movs	r1, #13
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f7ff fd8b 	bl	80034e8 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80039d2:	2122      	movs	r1, #34	; 0x22
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f7ff fd68 	bl	80034aa <SX1278_SPIRead>
 80039da:	4603      	mov	r3, r0
 80039dc:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80039de:	7dba      	ldrb	r2, [r7, #22]
 80039e0:	7afb      	ldrb	r3, [r7, #11]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d104      	bne.n	80039f0 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2202      	movs	r2, #2
 80039ea:	725a      	strb	r2, [r3, #9]
			return 1;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e00e      	b.n	8003a0e <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1ea      	bne.n	80039d2 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fcc7 	bl	8003394 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f7ff fe0b 	bl	8003622 <SX1278_defaultConfig>
			return 0;
 8003a0c:	2300      	movs	r3, #0
		}
	}
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length,
		uint32_t timeout) {
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	4613      	mov	r3, r2
 8003a24:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff fdbd 	bl	80035ac <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8003a32:	228b      	movs	r2, #139	; 0x8b
 8003a34:	2101      	movs	r1, #1
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7ff fd56 	bl	80034e8 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fd1b 	bl	800347c <SX1278_hw_GetDIO0>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00b      	beq.n	8003a64 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8003a4c:	2112      	movs	r1, #18
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f7ff fd2b 	bl	80034aa <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f7ff fed0 	bl	80037fa <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f7ff fea0 	bl	80037a0 <SX1278_standby>
			return 1;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e013      	b.n	8003a8c <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	603b      	str	r3, [r7, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d109      	bne.n	8003a84 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fc8d 	bl	8003394 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f7ff fdd1 	bl	8003622 <SX1278_defaultConfig>
			return 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	e003      	b.n	8003a8c <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8003a84:	2001      	movs	r0, #1
 8003a86:	f7ff fcee 	bl	8003466 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8003a8a:	e7d7      	b.n	8003a3c <SX1278_LoRaTxPacket+0x26>
	}
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <SX1278_begin>:

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	4608      	mov	r0, r1
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	70fb      	strb	r3, [r7, #3]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	70bb      	strb	r3, [r7, #2]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fc42 	bl	800333c <SX1278_hw_init>
	module->frequency = frequency;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	711a      	strb	r2, [r3, #4]
	module->power = power;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	78ba      	ldrb	r2, [r7, #2]
 8003ac2:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	787a      	ldrb	r2, [r7, #1]
 8003ac8:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	7c3a      	ldrb	r2, [r7, #16]
 8003ace:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	7d3a      	ldrb	r2, [r7, #20]
 8003ad4:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff fda3 	bl	8003622 <SX1278_defaultConfig>
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <SX1278_read>:

uint8_t SX1278_available(SX1278_t * module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	4613      	mov	r3, r2
 8003af0:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8003af8:	79fa      	ldrb	r2, [r7, #7]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d003      	beq.n	8003b06 <SX1278_read+0x22>
		length = module->readBytes;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8003b04:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	330a      	adds	r3, #10
 8003b0a:	79fa      	ldrb	r2, [r7, #7]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	68b8      	ldr	r0, [r7, #8]
 8003b10:	f000 f838 	bl	8003b84 <memcpy>
	rxBuf[length] = '\0';
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	4413      	add	r3, r2
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	return length;
 8003b26:	79fb      	ldrb	r3, [r7, #7]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <__errno>:
 8003b30:	4b01      	ldr	r3, [pc, #4]	; (8003b38 <__errno+0x8>)
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	2000000c 	.word	0x2000000c

08003b3c <__libc_init_array>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	4e0d      	ldr	r6, [pc, #52]	; (8003b74 <__libc_init_array+0x38>)
 8003b40:	4c0d      	ldr	r4, [pc, #52]	; (8003b78 <__libc_init_array+0x3c>)
 8003b42:	1ba4      	subs	r4, r4, r6
 8003b44:	10a4      	asrs	r4, r4, #2
 8003b46:	2500      	movs	r5, #0
 8003b48:	42a5      	cmp	r5, r4
 8003b4a:	d109      	bne.n	8003b60 <__libc_init_array+0x24>
 8003b4c:	4e0b      	ldr	r6, [pc, #44]	; (8003b7c <__libc_init_array+0x40>)
 8003b4e:	4c0c      	ldr	r4, [pc, #48]	; (8003b80 <__libc_init_array+0x44>)
 8003b50:	f001 f92e 	bl	8004db0 <_init>
 8003b54:	1ba4      	subs	r4, r4, r6
 8003b56:	10a4      	asrs	r4, r4, #2
 8003b58:	2500      	movs	r5, #0
 8003b5a:	42a5      	cmp	r5, r4
 8003b5c:	d105      	bne.n	8003b6a <__libc_init_array+0x2e>
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
 8003b60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b64:	4798      	blx	r3
 8003b66:	3501      	adds	r5, #1
 8003b68:	e7ee      	b.n	8003b48 <__libc_init_array+0xc>
 8003b6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b6e:	4798      	blx	r3
 8003b70:	3501      	adds	r5, #1
 8003b72:	e7f2      	b.n	8003b5a <__libc_init_array+0x1e>
 8003b74:	08004fb8 	.word	0x08004fb8
 8003b78:	08004fb8 	.word	0x08004fb8
 8003b7c:	08004fb8 	.word	0x08004fb8
 8003b80:	08004fbc 	.word	0x08004fbc

08003b84 <memcpy>:
 8003b84:	b510      	push	{r4, lr}
 8003b86:	1e43      	subs	r3, r0, #1
 8003b88:	440a      	add	r2, r1
 8003b8a:	4291      	cmp	r1, r2
 8003b8c:	d100      	bne.n	8003b90 <memcpy+0xc>
 8003b8e:	bd10      	pop	{r4, pc}
 8003b90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b98:	e7f7      	b.n	8003b8a <memcpy+0x6>

08003b9a <memset>:
 8003b9a:	4402      	add	r2, r0
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d100      	bne.n	8003ba4 <memset+0xa>
 8003ba2:	4770      	bx	lr
 8003ba4:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba8:	e7f9      	b.n	8003b9e <memset+0x4>
	...

08003bac <iprintf>:
 8003bac:	b40f      	push	{r0, r1, r2, r3}
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <iprintf+0x2c>)
 8003bb0:	b513      	push	{r0, r1, r4, lr}
 8003bb2:	681c      	ldr	r4, [r3, #0]
 8003bb4:	b124      	cbz	r4, 8003bc0 <iprintf+0x14>
 8003bb6:	69a3      	ldr	r3, [r4, #24]
 8003bb8:	b913      	cbnz	r3, 8003bc0 <iprintf+0x14>
 8003bba:	4620      	mov	r0, r4
 8003bbc:	f000 fa42 	bl	8004044 <__sinit>
 8003bc0:	ab05      	add	r3, sp, #20
 8003bc2:	9a04      	ldr	r2, [sp, #16]
 8003bc4:	68a1      	ldr	r1, [r4, #8]
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f000 fd4d 	bl	8004668 <_vfiprintf_r>
 8003bce:	b002      	add	sp, #8
 8003bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bd4:	b004      	add	sp, #16
 8003bd6:	4770      	bx	lr
 8003bd8:	2000000c 	.word	0x2000000c

08003bdc <_puts_r>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	460e      	mov	r6, r1
 8003be0:	4605      	mov	r5, r0
 8003be2:	b118      	cbz	r0, 8003bec <_puts_r+0x10>
 8003be4:	6983      	ldr	r3, [r0, #24]
 8003be6:	b90b      	cbnz	r3, 8003bec <_puts_r+0x10>
 8003be8:	f000 fa2c 	bl	8004044 <__sinit>
 8003bec:	69ab      	ldr	r3, [r5, #24]
 8003bee:	68ac      	ldr	r4, [r5, #8]
 8003bf0:	b913      	cbnz	r3, 8003bf8 <_puts_r+0x1c>
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	f000 fa26 	bl	8004044 <__sinit>
 8003bf8:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <_puts_r+0xac>)
 8003bfa:	429c      	cmp	r4, r3
 8003bfc:	d117      	bne.n	8003c2e <_puts_r+0x52>
 8003bfe:	686c      	ldr	r4, [r5, #4]
 8003c00:	89a3      	ldrh	r3, [r4, #12]
 8003c02:	071b      	lsls	r3, r3, #28
 8003c04:	d51d      	bpl.n	8003c42 <_puts_r+0x66>
 8003c06:	6923      	ldr	r3, [r4, #16]
 8003c08:	b1db      	cbz	r3, 8003c42 <_puts_r+0x66>
 8003c0a:	3e01      	subs	r6, #1
 8003c0c:	68a3      	ldr	r3, [r4, #8]
 8003c0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c12:	3b01      	subs	r3, #1
 8003c14:	60a3      	str	r3, [r4, #8]
 8003c16:	b9e9      	cbnz	r1, 8003c54 <_puts_r+0x78>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	da2e      	bge.n	8003c7a <_puts_r+0x9e>
 8003c1c:	4622      	mov	r2, r4
 8003c1e:	210a      	movs	r1, #10
 8003c20:	4628      	mov	r0, r5
 8003c22:	f000 f85f 	bl	8003ce4 <__swbuf_r>
 8003c26:	3001      	adds	r0, #1
 8003c28:	d011      	beq.n	8003c4e <_puts_r+0x72>
 8003c2a:	200a      	movs	r0, #10
 8003c2c:	e011      	b.n	8003c52 <_puts_r+0x76>
 8003c2e:	4b17      	ldr	r3, [pc, #92]	; (8003c8c <_puts_r+0xb0>)
 8003c30:	429c      	cmp	r4, r3
 8003c32:	d101      	bne.n	8003c38 <_puts_r+0x5c>
 8003c34:	68ac      	ldr	r4, [r5, #8]
 8003c36:	e7e3      	b.n	8003c00 <_puts_r+0x24>
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <_puts_r+0xb4>)
 8003c3a:	429c      	cmp	r4, r3
 8003c3c:	bf08      	it	eq
 8003c3e:	68ec      	ldreq	r4, [r5, #12]
 8003c40:	e7de      	b.n	8003c00 <_puts_r+0x24>
 8003c42:	4621      	mov	r1, r4
 8003c44:	4628      	mov	r0, r5
 8003c46:	f000 f89f 	bl	8003d88 <__swsetup_r>
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d0dd      	beq.n	8003c0a <_puts_r+0x2e>
 8003c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	da04      	bge.n	8003c62 <_puts_r+0x86>
 8003c58:	69a2      	ldr	r2, [r4, #24]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	dc06      	bgt.n	8003c6c <_puts_r+0x90>
 8003c5e:	290a      	cmp	r1, #10
 8003c60:	d004      	beq.n	8003c6c <_puts_r+0x90>
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	6022      	str	r2, [r4, #0]
 8003c68:	7019      	strb	r1, [r3, #0]
 8003c6a:	e7cf      	b.n	8003c0c <_puts_r+0x30>
 8003c6c:	4622      	mov	r2, r4
 8003c6e:	4628      	mov	r0, r5
 8003c70:	f000 f838 	bl	8003ce4 <__swbuf_r>
 8003c74:	3001      	adds	r0, #1
 8003c76:	d1c9      	bne.n	8003c0c <_puts_r+0x30>
 8003c78:	e7e9      	b.n	8003c4e <_puts_r+0x72>
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	200a      	movs	r0, #10
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	6022      	str	r2, [r4, #0]
 8003c82:	7018      	strb	r0, [r3, #0]
 8003c84:	e7e5      	b.n	8003c52 <_puts_r+0x76>
 8003c86:	bf00      	nop
 8003c88:	08004f3c 	.word	0x08004f3c
 8003c8c:	08004f5c 	.word	0x08004f5c
 8003c90:	08004f1c 	.word	0x08004f1c

08003c94 <puts>:
 8003c94:	4b02      	ldr	r3, [pc, #8]	; (8003ca0 <puts+0xc>)
 8003c96:	4601      	mov	r1, r0
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	f7ff bf9f 	b.w	8003bdc <_puts_r>
 8003c9e:	bf00      	nop
 8003ca0:	2000000c 	.word	0x2000000c

08003ca4 <siprintf>:
 8003ca4:	b40e      	push	{r1, r2, r3}
 8003ca6:	b500      	push	{lr}
 8003ca8:	b09c      	sub	sp, #112	; 0x70
 8003caa:	ab1d      	add	r3, sp, #116	; 0x74
 8003cac:	9002      	str	r0, [sp, #8]
 8003cae:	9006      	str	r0, [sp, #24]
 8003cb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cb4:	4809      	ldr	r0, [pc, #36]	; (8003cdc <siprintf+0x38>)
 8003cb6:	9107      	str	r1, [sp, #28]
 8003cb8:	9104      	str	r1, [sp, #16]
 8003cba:	4909      	ldr	r1, [pc, #36]	; (8003ce0 <siprintf+0x3c>)
 8003cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cc0:	9105      	str	r1, [sp, #20]
 8003cc2:	6800      	ldr	r0, [r0, #0]
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	a902      	add	r1, sp, #8
 8003cc8:	f000 fbac 	bl	8004424 <_svfiprintf_r>
 8003ccc:	9b02      	ldr	r3, [sp, #8]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	b01c      	add	sp, #112	; 0x70
 8003cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cd8:	b003      	add	sp, #12
 8003cda:	4770      	bx	lr
 8003cdc:	2000000c 	.word	0x2000000c
 8003ce0:	ffff0208 	.word	0xffff0208

08003ce4 <__swbuf_r>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	460e      	mov	r6, r1
 8003ce8:	4614      	mov	r4, r2
 8003cea:	4605      	mov	r5, r0
 8003cec:	b118      	cbz	r0, 8003cf6 <__swbuf_r+0x12>
 8003cee:	6983      	ldr	r3, [r0, #24]
 8003cf0:	b90b      	cbnz	r3, 8003cf6 <__swbuf_r+0x12>
 8003cf2:	f000 f9a7 	bl	8004044 <__sinit>
 8003cf6:	4b21      	ldr	r3, [pc, #132]	; (8003d7c <__swbuf_r+0x98>)
 8003cf8:	429c      	cmp	r4, r3
 8003cfa:	d12a      	bne.n	8003d52 <__swbuf_r+0x6e>
 8003cfc:	686c      	ldr	r4, [r5, #4]
 8003cfe:	69a3      	ldr	r3, [r4, #24]
 8003d00:	60a3      	str	r3, [r4, #8]
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	071a      	lsls	r2, r3, #28
 8003d06:	d52e      	bpl.n	8003d66 <__swbuf_r+0x82>
 8003d08:	6923      	ldr	r3, [r4, #16]
 8003d0a:	b363      	cbz	r3, 8003d66 <__swbuf_r+0x82>
 8003d0c:	6923      	ldr	r3, [r4, #16]
 8003d0e:	6820      	ldr	r0, [r4, #0]
 8003d10:	1ac0      	subs	r0, r0, r3
 8003d12:	6963      	ldr	r3, [r4, #20]
 8003d14:	b2f6      	uxtb	r6, r6
 8003d16:	4283      	cmp	r3, r0
 8003d18:	4637      	mov	r7, r6
 8003d1a:	dc04      	bgt.n	8003d26 <__swbuf_r+0x42>
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f000 f926 	bl	8003f70 <_fflush_r>
 8003d24:	bb28      	cbnz	r0, 8003d72 <__swbuf_r+0x8e>
 8003d26:	68a3      	ldr	r3, [r4, #8]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	60a3      	str	r3, [r4, #8]
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	6022      	str	r2, [r4, #0]
 8003d32:	701e      	strb	r6, [r3, #0]
 8003d34:	6963      	ldr	r3, [r4, #20]
 8003d36:	3001      	adds	r0, #1
 8003d38:	4283      	cmp	r3, r0
 8003d3a:	d004      	beq.n	8003d46 <__swbuf_r+0x62>
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	07db      	lsls	r3, r3, #31
 8003d40:	d519      	bpl.n	8003d76 <__swbuf_r+0x92>
 8003d42:	2e0a      	cmp	r6, #10
 8003d44:	d117      	bne.n	8003d76 <__swbuf_r+0x92>
 8003d46:	4621      	mov	r1, r4
 8003d48:	4628      	mov	r0, r5
 8003d4a:	f000 f911 	bl	8003f70 <_fflush_r>
 8003d4e:	b190      	cbz	r0, 8003d76 <__swbuf_r+0x92>
 8003d50:	e00f      	b.n	8003d72 <__swbuf_r+0x8e>
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <__swbuf_r+0x9c>)
 8003d54:	429c      	cmp	r4, r3
 8003d56:	d101      	bne.n	8003d5c <__swbuf_r+0x78>
 8003d58:	68ac      	ldr	r4, [r5, #8]
 8003d5a:	e7d0      	b.n	8003cfe <__swbuf_r+0x1a>
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <__swbuf_r+0xa0>)
 8003d5e:	429c      	cmp	r4, r3
 8003d60:	bf08      	it	eq
 8003d62:	68ec      	ldreq	r4, [r5, #12]
 8003d64:	e7cb      	b.n	8003cfe <__swbuf_r+0x1a>
 8003d66:	4621      	mov	r1, r4
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f000 f80d 	bl	8003d88 <__swsetup_r>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	d0cc      	beq.n	8003d0c <__swbuf_r+0x28>
 8003d72:	f04f 37ff 	mov.w	r7, #4294967295
 8003d76:	4638      	mov	r0, r7
 8003d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	08004f3c 	.word	0x08004f3c
 8003d80:	08004f5c 	.word	0x08004f5c
 8003d84:	08004f1c 	.word	0x08004f1c

08003d88 <__swsetup_r>:
 8003d88:	4b32      	ldr	r3, [pc, #200]	; (8003e54 <__swsetup_r+0xcc>)
 8003d8a:	b570      	push	{r4, r5, r6, lr}
 8003d8c:	681d      	ldr	r5, [r3, #0]
 8003d8e:	4606      	mov	r6, r0
 8003d90:	460c      	mov	r4, r1
 8003d92:	b125      	cbz	r5, 8003d9e <__swsetup_r+0x16>
 8003d94:	69ab      	ldr	r3, [r5, #24]
 8003d96:	b913      	cbnz	r3, 8003d9e <__swsetup_r+0x16>
 8003d98:	4628      	mov	r0, r5
 8003d9a:	f000 f953 	bl	8004044 <__sinit>
 8003d9e:	4b2e      	ldr	r3, [pc, #184]	; (8003e58 <__swsetup_r+0xd0>)
 8003da0:	429c      	cmp	r4, r3
 8003da2:	d10f      	bne.n	8003dc4 <__swsetup_r+0x3c>
 8003da4:	686c      	ldr	r4, [r5, #4]
 8003da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	0715      	lsls	r5, r2, #28
 8003dae:	d42c      	bmi.n	8003e0a <__swsetup_r+0x82>
 8003db0:	06d0      	lsls	r0, r2, #27
 8003db2:	d411      	bmi.n	8003dd8 <__swsetup_r+0x50>
 8003db4:	2209      	movs	r2, #9
 8003db6:	6032      	str	r2, [r6, #0]
 8003db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dbc:	81a3      	strh	r3, [r4, #12]
 8003dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc2:	e03e      	b.n	8003e42 <__swsetup_r+0xba>
 8003dc4:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <__swsetup_r+0xd4>)
 8003dc6:	429c      	cmp	r4, r3
 8003dc8:	d101      	bne.n	8003dce <__swsetup_r+0x46>
 8003dca:	68ac      	ldr	r4, [r5, #8]
 8003dcc:	e7eb      	b.n	8003da6 <__swsetup_r+0x1e>
 8003dce:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <__swsetup_r+0xd8>)
 8003dd0:	429c      	cmp	r4, r3
 8003dd2:	bf08      	it	eq
 8003dd4:	68ec      	ldreq	r4, [r5, #12]
 8003dd6:	e7e6      	b.n	8003da6 <__swsetup_r+0x1e>
 8003dd8:	0751      	lsls	r1, r2, #29
 8003dda:	d512      	bpl.n	8003e02 <__swsetup_r+0x7a>
 8003ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dde:	b141      	cbz	r1, 8003df2 <__swsetup_r+0x6a>
 8003de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003de4:	4299      	cmp	r1, r3
 8003de6:	d002      	beq.n	8003dee <__swsetup_r+0x66>
 8003de8:	4630      	mov	r0, r6
 8003dea:	f000 fa19 	bl	8004220 <_free_r>
 8003dee:	2300      	movs	r3, #0
 8003df0:	6363      	str	r3, [r4, #52]	; 0x34
 8003df2:	89a3      	ldrh	r3, [r4, #12]
 8003df4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003df8:	81a3      	strh	r3, [r4, #12]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	6063      	str	r3, [r4, #4]
 8003dfe:	6923      	ldr	r3, [r4, #16]
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	89a3      	ldrh	r3, [r4, #12]
 8003e04:	f043 0308 	orr.w	r3, r3, #8
 8003e08:	81a3      	strh	r3, [r4, #12]
 8003e0a:	6923      	ldr	r3, [r4, #16]
 8003e0c:	b94b      	cbnz	r3, 8003e22 <__swsetup_r+0x9a>
 8003e0e:	89a3      	ldrh	r3, [r4, #12]
 8003e10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e18:	d003      	beq.n	8003e22 <__swsetup_r+0x9a>
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f000 f9bf 	bl	80041a0 <__smakebuf_r>
 8003e22:	89a2      	ldrh	r2, [r4, #12]
 8003e24:	f012 0301 	ands.w	r3, r2, #1
 8003e28:	d00c      	beq.n	8003e44 <__swsetup_r+0xbc>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60a3      	str	r3, [r4, #8]
 8003e2e:	6963      	ldr	r3, [r4, #20]
 8003e30:	425b      	negs	r3, r3
 8003e32:	61a3      	str	r3, [r4, #24]
 8003e34:	6923      	ldr	r3, [r4, #16]
 8003e36:	b953      	cbnz	r3, 8003e4e <__swsetup_r+0xc6>
 8003e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e3c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003e40:	d1ba      	bne.n	8003db8 <__swsetup_r+0x30>
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
 8003e44:	0792      	lsls	r2, r2, #30
 8003e46:	bf58      	it	pl
 8003e48:	6963      	ldrpl	r3, [r4, #20]
 8003e4a:	60a3      	str	r3, [r4, #8]
 8003e4c:	e7f2      	b.n	8003e34 <__swsetup_r+0xac>
 8003e4e:	2000      	movs	r0, #0
 8003e50:	e7f7      	b.n	8003e42 <__swsetup_r+0xba>
 8003e52:	bf00      	nop
 8003e54:	2000000c 	.word	0x2000000c
 8003e58:	08004f3c 	.word	0x08004f3c
 8003e5c:	08004f5c 	.word	0x08004f5c
 8003e60:	08004f1c 	.word	0x08004f1c

08003e64 <__sflush_r>:
 8003e64:	898a      	ldrh	r2, [r1, #12]
 8003e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6a:	4605      	mov	r5, r0
 8003e6c:	0710      	lsls	r0, r2, #28
 8003e6e:	460c      	mov	r4, r1
 8003e70:	d458      	bmi.n	8003f24 <__sflush_r+0xc0>
 8003e72:	684b      	ldr	r3, [r1, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	dc05      	bgt.n	8003e84 <__sflush_r+0x20>
 8003e78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	dc02      	bgt.n	8003e84 <__sflush_r+0x20>
 8003e7e:	2000      	movs	r0, #0
 8003e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e86:	2e00      	cmp	r6, #0
 8003e88:	d0f9      	beq.n	8003e7e <__sflush_r+0x1a>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e90:	682f      	ldr	r7, [r5, #0]
 8003e92:	6a21      	ldr	r1, [r4, #32]
 8003e94:	602b      	str	r3, [r5, #0]
 8003e96:	d032      	beq.n	8003efe <__sflush_r+0x9a>
 8003e98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e9a:	89a3      	ldrh	r3, [r4, #12]
 8003e9c:	075a      	lsls	r2, r3, #29
 8003e9e:	d505      	bpl.n	8003eac <__sflush_r+0x48>
 8003ea0:	6863      	ldr	r3, [r4, #4]
 8003ea2:	1ac0      	subs	r0, r0, r3
 8003ea4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ea6:	b10b      	cbz	r3, 8003eac <__sflush_r+0x48>
 8003ea8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003eaa:	1ac0      	subs	r0, r0, r3
 8003eac:	2300      	movs	r3, #0
 8003eae:	4602      	mov	r2, r0
 8003eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003eb2:	6a21      	ldr	r1, [r4, #32]
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	47b0      	blx	r6
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	d106      	bne.n	8003ecc <__sflush_r+0x68>
 8003ebe:	6829      	ldr	r1, [r5, #0]
 8003ec0:	291d      	cmp	r1, #29
 8003ec2:	d848      	bhi.n	8003f56 <__sflush_r+0xf2>
 8003ec4:	4a29      	ldr	r2, [pc, #164]	; (8003f6c <__sflush_r+0x108>)
 8003ec6:	40ca      	lsrs	r2, r1
 8003ec8:	07d6      	lsls	r6, r2, #31
 8003eca:	d544      	bpl.n	8003f56 <__sflush_r+0xf2>
 8003ecc:	2200      	movs	r2, #0
 8003ece:	6062      	str	r2, [r4, #4]
 8003ed0:	04d9      	lsls	r1, r3, #19
 8003ed2:	6922      	ldr	r2, [r4, #16]
 8003ed4:	6022      	str	r2, [r4, #0]
 8003ed6:	d504      	bpl.n	8003ee2 <__sflush_r+0x7e>
 8003ed8:	1c42      	adds	r2, r0, #1
 8003eda:	d101      	bne.n	8003ee0 <__sflush_r+0x7c>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	b903      	cbnz	r3, 8003ee2 <__sflush_r+0x7e>
 8003ee0:	6560      	str	r0, [r4, #84]	; 0x54
 8003ee2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ee4:	602f      	str	r7, [r5, #0]
 8003ee6:	2900      	cmp	r1, #0
 8003ee8:	d0c9      	beq.n	8003e7e <__sflush_r+0x1a>
 8003eea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003eee:	4299      	cmp	r1, r3
 8003ef0:	d002      	beq.n	8003ef8 <__sflush_r+0x94>
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	f000 f994 	bl	8004220 <_free_r>
 8003ef8:	2000      	movs	r0, #0
 8003efa:	6360      	str	r0, [r4, #52]	; 0x34
 8003efc:	e7c0      	b.n	8003e80 <__sflush_r+0x1c>
 8003efe:	2301      	movs	r3, #1
 8003f00:	4628      	mov	r0, r5
 8003f02:	47b0      	blx	r6
 8003f04:	1c41      	adds	r1, r0, #1
 8003f06:	d1c8      	bne.n	8003e9a <__sflush_r+0x36>
 8003f08:	682b      	ldr	r3, [r5, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0c5      	beq.n	8003e9a <__sflush_r+0x36>
 8003f0e:	2b1d      	cmp	r3, #29
 8003f10:	d001      	beq.n	8003f16 <__sflush_r+0xb2>
 8003f12:	2b16      	cmp	r3, #22
 8003f14:	d101      	bne.n	8003f1a <__sflush_r+0xb6>
 8003f16:	602f      	str	r7, [r5, #0]
 8003f18:	e7b1      	b.n	8003e7e <__sflush_r+0x1a>
 8003f1a:	89a3      	ldrh	r3, [r4, #12]
 8003f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f20:	81a3      	strh	r3, [r4, #12]
 8003f22:	e7ad      	b.n	8003e80 <__sflush_r+0x1c>
 8003f24:	690f      	ldr	r7, [r1, #16]
 8003f26:	2f00      	cmp	r7, #0
 8003f28:	d0a9      	beq.n	8003e7e <__sflush_r+0x1a>
 8003f2a:	0793      	lsls	r3, r2, #30
 8003f2c:	680e      	ldr	r6, [r1, #0]
 8003f2e:	bf08      	it	eq
 8003f30:	694b      	ldreq	r3, [r1, #20]
 8003f32:	600f      	str	r7, [r1, #0]
 8003f34:	bf18      	it	ne
 8003f36:	2300      	movne	r3, #0
 8003f38:	eba6 0807 	sub.w	r8, r6, r7
 8003f3c:	608b      	str	r3, [r1, #8]
 8003f3e:	f1b8 0f00 	cmp.w	r8, #0
 8003f42:	dd9c      	ble.n	8003e7e <__sflush_r+0x1a>
 8003f44:	4643      	mov	r3, r8
 8003f46:	463a      	mov	r2, r7
 8003f48:	6a21      	ldr	r1, [r4, #32]
 8003f4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	47b0      	blx	r6
 8003f50:	2800      	cmp	r0, #0
 8003f52:	dc06      	bgt.n	8003f62 <__sflush_r+0xfe>
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f5a:	81a3      	strh	r3, [r4, #12]
 8003f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f60:	e78e      	b.n	8003e80 <__sflush_r+0x1c>
 8003f62:	4407      	add	r7, r0
 8003f64:	eba8 0800 	sub.w	r8, r8, r0
 8003f68:	e7e9      	b.n	8003f3e <__sflush_r+0xda>
 8003f6a:	bf00      	nop
 8003f6c:	20400001 	.word	0x20400001

08003f70 <_fflush_r>:
 8003f70:	b538      	push	{r3, r4, r5, lr}
 8003f72:	690b      	ldr	r3, [r1, #16]
 8003f74:	4605      	mov	r5, r0
 8003f76:	460c      	mov	r4, r1
 8003f78:	b1db      	cbz	r3, 8003fb2 <_fflush_r+0x42>
 8003f7a:	b118      	cbz	r0, 8003f84 <_fflush_r+0x14>
 8003f7c:	6983      	ldr	r3, [r0, #24]
 8003f7e:	b90b      	cbnz	r3, 8003f84 <_fflush_r+0x14>
 8003f80:	f000 f860 	bl	8004044 <__sinit>
 8003f84:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <_fflush_r+0x48>)
 8003f86:	429c      	cmp	r4, r3
 8003f88:	d109      	bne.n	8003f9e <_fflush_r+0x2e>
 8003f8a:	686c      	ldr	r4, [r5, #4]
 8003f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f90:	b17b      	cbz	r3, 8003fb2 <_fflush_r+0x42>
 8003f92:	4621      	mov	r1, r4
 8003f94:	4628      	mov	r0, r5
 8003f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f9a:	f7ff bf63 	b.w	8003e64 <__sflush_r>
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <_fflush_r+0x4c>)
 8003fa0:	429c      	cmp	r4, r3
 8003fa2:	d101      	bne.n	8003fa8 <_fflush_r+0x38>
 8003fa4:	68ac      	ldr	r4, [r5, #8]
 8003fa6:	e7f1      	b.n	8003f8c <_fflush_r+0x1c>
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <_fflush_r+0x50>)
 8003faa:	429c      	cmp	r4, r3
 8003fac:	bf08      	it	eq
 8003fae:	68ec      	ldreq	r4, [r5, #12]
 8003fb0:	e7ec      	b.n	8003f8c <_fflush_r+0x1c>
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	bd38      	pop	{r3, r4, r5, pc}
 8003fb6:	bf00      	nop
 8003fb8:	08004f3c 	.word	0x08004f3c
 8003fbc:	08004f5c 	.word	0x08004f5c
 8003fc0:	08004f1c 	.word	0x08004f1c

08003fc4 <std>:
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	b510      	push	{r4, lr}
 8003fc8:	4604      	mov	r4, r0
 8003fca:	e9c0 3300 	strd	r3, r3, [r0]
 8003fce:	6083      	str	r3, [r0, #8]
 8003fd0:	8181      	strh	r1, [r0, #12]
 8003fd2:	6643      	str	r3, [r0, #100]	; 0x64
 8003fd4:	81c2      	strh	r2, [r0, #14]
 8003fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fda:	6183      	str	r3, [r0, #24]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	2208      	movs	r2, #8
 8003fe0:	305c      	adds	r0, #92	; 0x5c
 8003fe2:	f7ff fdda 	bl	8003b9a <memset>
 8003fe6:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <std+0x38>)
 8003fe8:	6263      	str	r3, [r4, #36]	; 0x24
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <std+0x3c>)
 8003fec:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fee:	4b05      	ldr	r3, [pc, #20]	; (8004004 <std+0x40>)
 8003ff0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <std+0x44>)
 8003ff4:	6224      	str	r4, [r4, #32]
 8003ff6:	6323      	str	r3, [r4, #48]	; 0x30
 8003ff8:	bd10      	pop	{r4, pc}
 8003ffa:	bf00      	nop
 8003ffc:	08004bc5 	.word	0x08004bc5
 8004000:	08004be7 	.word	0x08004be7
 8004004:	08004c1f 	.word	0x08004c1f
 8004008:	08004c43 	.word	0x08004c43

0800400c <_cleanup_r>:
 800400c:	4901      	ldr	r1, [pc, #4]	; (8004014 <_cleanup_r+0x8>)
 800400e:	f000 b885 	b.w	800411c <_fwalk_reent>
 8004012:	bf00      	nop
 8004014:	08003f71 	.word	0x08003f71

08004018 <__sfmoreglue>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	1e4a      	subs	r2, r1, #1
 800401c:	2568      	movs	r5, #104	; 0x68
 800401e:	4355      	muls	r5, r2
 8004020:	460e      	mov	r6, r1
 8004022:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004026:	f000 f949 	bl	80042bc <_malloc_r>
 800402a:	4604      	mov	r4, r0
 800402c:	b140      	cbz	r0, 8004040 <__sfmoreglue+0x28>
 800402e:	2100      	movs	r1, #0
 8004030:	e9c0 1600 	strd	r1, r6, [r0]
 8004034:	300c      	adds	r0, #12
 8004036:	60a0      	str	r0, [r4, #8]
 8004038:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800403c:	f7ff fdad 	bl	8003b9a <memset>
 8004040:	4620      	mov	r0, r4
 8004042:	bd70      	pop	{r4, r5, r6, pc}

08004044 <__sinit>:
 8004044:	6983      	ldr	r3, [r0, #24]
 8004046:	b510      	push	{r4, lr}
 8004048:	4604      	mov	r4, r0
 800404a:	bb33      	cbnz	r3, 800409a <__sinit+0x56>
 800404c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004050:	6503      	str	r3, [r0, #80]	; 0x50
 8004052:	4b12      	ldr	r3, [pc, #72]	; (800409c <__sinit+0x58>)
 8004054:	4a12      	ldr	r2, [pc, #72]	; (80040a0 <__sinit+0x5c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6282      	str	r2, [r0, #40]	; 0x28
 800405a:	4298      	cmp	r0, r3
 800405c:	bf04      	itt	eq
 800405e:	2301      	moveq	r3, #1
 8004060:	6183      	streq	r3, [r0, #24]
 8004062:	f000 f81f 	bl	80040a4 <__sfp>
 8004066:	6060      	str	r0, [r4, #4]
 8004068:	4620      	mov	r0, r4
 800406a:	f000 f81b 	bl	80040a4 <__sfp>
 800406e:	60a0      	str	r0, [r4, #8]
 8004070:	4620      	mov	r0, r4
 8004072:	f000 f817 	bl	80040a4 <__sfp>
 8004076:	2200      	movs	r2, #0
 8004078:	60e0      	str	r0, [r4, #12]
 800407a:	2104      	movs	r1, #4
 800407c:	6860      	ldr	r0, [r4, #4]
 800407e:	f7ff ffa1 	bl	8003fc4 <std>
 8004082:	2201      	movs	r2, #1
 8004084:	2109      	movs	r1, #9
 8004086:	68a0      	ldr	r0, [r4, #8]
 8004088:	f7ff ff9c 	bl	8003fc4 <std>
 800408c:	2202      	movs	r2, #2
 800408e:	2112      	movs	r1, #18
 8004090:	68e0      	ldr	r0, [r4, #12]
 8004092:	f7ff ff97 	bl	8003fc4 <std>
 8004096:	2301      	movs	r3, #1
 8004098:	61a3      	str	r3, [r4, #24]
 800409a:	bd10      	pop	{r4, pc}
 800409c:	08004f18 	.word	0x08004f18
 80040a0:	0800400d 	.word	0x0800400d

080040a4 <__sfp>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <__sfp+0x70>)
 80040a8:	681e      	ldr	r6, [r3, #0]
 80040aa:	69b3      	ldr	r3, [r6, #24]
 80040ac:	4607      	mov	r7, r0
 80040ae:	b913      	cbnz	r3, 80040b6 <__sfp+0x12>
 80040b0:	4630      	mov	r0, r6
 80040b2:	f7ff ffc7 	bl	8004044 <__sinit>
 80040b6:	3648      	adds	r6, #72	; 0x48
 80040b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80040bc:	3b01      	subs	r3, #1
 80040be:	d503      	bpl.n	80040c8 <__sfp+0x24>
 80040c0:	6833      	ldr	r3, [r6, #0]
 80040c2:	b133      	cbz	r3, 80040d2 <__sfp+0x2e>
 80040c4:	6836      	ldr	r6, [r6, #0]
 80040c6:	e7f7      	b.n	80040b8 <__sfp+0x14>
 80040c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80040cc:	b16d      	cbz	r5, 80040ea <__sfp+0x46>
 80040ce:	3468      	adds	r4, #104	; 0x68
 80040d0:	e7f4      	b.n	80040bc <__sfp+0x18>
 80040d2:	2104      	movs	r1, #4
 80040d4:	4638      	mov	r0, r7
 80040d6:	f7ff ff9f 	bl	8004018 <__sfmoreglue>
 80040da:	6030      	str	r0, [r6, #0]
 80040dc:	2800      	cmp	r0, #0
 80040de:	d1f1      	bne.n	80040c4 <__sfp+0x20>
 80040e0:	230c      	movs	r3, #12
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	4604      	mov	r4, r0
 80040e6:	4620      	mov	r0, r4
 80040e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <__sfp+0x74>)
 80040ec:	6665      	str	r5, [r4, #100]	; 0x64
 80040ee:	e9c4 5500 	strd	r5, r5, [r4]
 80040f2:	60a5      	str	r5, [r4, #8]
 80040f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80040f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80040fc:	2208      	movs	r2, #8
 80040fe:	4629      	mov	r1, r5
 8004100:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004104:	f7ff fd49 	bl	8003b9a <memset>
 8004108:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800410c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004110:	e7e9      	b.n	80040e6 <__sfp+0x42>
 8004112:	bf00      	nop
 8004114:	08004f18 	.word	0x08004f18
 8004118:	ffff0001 	.word	0xffff0001

0800411c <_fwalk_reent>:
 800411c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004120:	4680      	mov	r8, r0
 8004122:	4689      	mov	r9, r1
 8004124:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004128:	2600      	movs	r6, #0
 800412a:	b914      	cbnz	r4, 8004132 <_fwalk_reent+0x16>
 800412c:	4630      	mov	r0, r6
 800412e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004132:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004136:	3f01      	subs	r7, #1
 8004138:	d501      	bpl.n	800413e <_fwalk_reent+0x22>
 800413a:	6824      	ldr	r4, [r4, #0]
 800413c:	e7f5      	b.n	800412a <_fwalk_reent+0xe>
 800413e:	89ab      	ldrh	r3, [r5, #12]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d907      	bls.n	8004154 <_fwalk_reent+0x38>
 8004144:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004148:	3301      	adds	r3, #1
 800414a:	d003      	beq.n	8004154 <_fwalk_reent+0x38>
 800414c:	4629      	mov	r1, r5
 800414e:	4640      	mov	r0, r8
 8004150:	47c8      	blx	r9
 8004152:	4306      	orrs	r6, r0
 8004154:	3568      	adds	r5, #104	; 0x68
 8004156:	e7ee      	b.n	8004136 <_fwalk_reent+0x1a>

08004158 <__swhatbuf_r>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	460e      	mov	r6, r1
 800415c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004160:	2900      	cmp	r1, #0
 8004162:	b096      	sub	sp, #88	; 0x58
 8004164:	4614      	mov	r4, r2
 8004166:	461d      	mov	r5, r3
 8004168:	da07      	bge.n	800417a <__swhatbuf_r+0x22>
 800416a:	2300      	movs	r3, #0
 800416c:	602b      	str	r3, [r5, #0]
 800416e:	89b3      	ldrh	r3, [r6, #12]
 8004170:	061a      	lsls	r2, r3, #24
 8004172:	d410      	bmi.n	8004196 <__swhatbuf_r+0x3e>
 8004174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004178:	e00e      	b.n	8004198 <__swhatbuf_r+0x40>
 800417a:	466a      	mov	r2, sp
 800417c:	f000 fd88 	bl	8004c90 <_fstat_r>
 8004180:	2800      	cmp	r0, #0
 8004182:	dbf2      	blt.n	800416a <__swhatbuf_r+0x12>
 8004184:	9a01      	ldr	r2, [sp, #4]
 8004186:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800418a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800418e:	425a      	negs	r2, r3
 8004190:	415a      	adcs	r2, r3
 8004192:	602a      	str	r2, [r5, #0]
 8004194:	e7ee      	b.n	8004174 <__swhatbuf_r+0x1c>
 8004196:	2340      	movs	r3, #64	; 0x40
 8004198:	2000      	movs	r0, #0
 800419a:	6023      	str	r3, [r4, #0]
 800419c:	b016      	add	sp, #88	; 0x58
 800419e:	bd70      	pop	{r4, r5, r6, pc}

080041a0 <__smakebuf_r>:
 80041a0:	898b      	ldrh	r3, [r1, #12]
 80041a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041a4:	079d      	lsls	r5, r3, #30
 80041a6:	4606      	mov	r6, r0
 80041a8:	460c      	mov	r4, r1
 80041aa:	d507      	bpl.n	80041bc <__smakebuf_r+0x1c>
 80041ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	6123      	str	r3, [r4, #16]
 80041b4:	2301      	movs	r3, #1
 80041b6:	6163      	str	r3, [r4, #20]
 80041b8:	b002      	add	sp, #8
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	ab01      	add	r3, sp, #4
 80041be:	466a      	mov	r2, sp
 80041c0:	f7ff ffca 	bl	8004158 <__swhatbuf_r>
 80041c4:	9900      	ldr	r1, [sp, #0]
 80041c6:	4605      	mov	r5, r0
 80041c8:	4630      	mov	r0, r6
 80041ca:	f000 f877 	bl	80042bc <_malloc_r>
 80041ce:	b948      	cbnz	r0, 80041e4 <__smakebuf_r+0x44>
 80041d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041d4:	059a      	lsls	r2, r3, #22
 80041d6:	d4ef      	bmi.n	80041b8 <__smakebuf_r+0x18>
 80041d8:	f023 0303 	bic.w	r3, r3, #3
 80041dc:	f043 0302 	orr.w	r3, r3, #2
 80041e0:	81a3      	strh	r3, [r4, #12]
 80041e2:	e7e3      	b.n	80041ac <__smakebuf_r+0xc>
 80041e4:	4b0d      	ldr	r3, [pc, #52]	; (800421c <__smakebuf_r+0x7c>)
 80041e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80041e8:	89a3      	ldrh	r3, [r4, #12]
 80041ea:	6020      	str	r0, [r4, #0]
 80041ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f0:	81a3      	strh	r3, [r4, #12]
 80041f2:	9b00      	ldr	r3, [sp, #0]
 80041f4:	6163      	str	r3, [r4, #20]
 80041f6:	9b01      	ldr	r3, [sp, #4]
 80041f8:	6120      	str	r0, [r4, #16]
 80041fa:	b15b      	cbz	r3, 8004214 <__smakebuf_r+0x74>
 80041fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004200:	4630      	mov	r0, r6
 8004202:	f000 fd57 	bl	8004cb4 <_isatty_r>
 8004206:	b128      	cbz	r0, 8004214 <__smakebuf_r+0x74>
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	f023 0303 	bic.w	r3, r3, #3
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	81a3      	strh	r3, [r4, #12]
 8004214:	89a3      	ldrh	r3, [r4, #12]
 8004216:	431d      	orrs	r5, r3
 8004218:	81a5      	strh	r5, [r4, #12]
 800421a:	e7cd      	b.n	80041b8 <__smakebuf_r+0x18>
 800421c:	0800400d 	.word	0x0800400d

08004220 <_free_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	4605      	mov	r5, r0
 8004224:	2900      	cmp	r1, #0
 8004226:	d045      	beq.n	80042b4 <_free_r+0x94>
 8004228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800422c:	1f0c      	subs	r4, r1, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	bfb8      	it	lt
 8004232:	18e4      	addlt	r4, r4, r3
 8004234:	f000 fd79 	bl	8004d2a <__malloc_lock>
 8004238:	4a1f      	ldr	r2, [pc, #124]	; (80042b8 <_free_r+0x98>)
 800423a:	6813      	ldr	r3, [r2, #0]
 800423c:	4610      	mov	r0, r2
 800423e:	b933      	cbnz	r3, 800424e <_free_r+0x2e>
 8004240:	6063      	str	r3, [r4, #4]
 8004242:	6014      	str	r4, [r2, #0]
 8004244:	4628      	mov	r0, r5
 8004246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800424a:	f000 bd6f 	b.w	8004d2c <__malloc_unlock>
 800424e:	42a3      	cmp	r3, r4
 8004250:	d90c      	bls.n	800426c <_free_r+0x4c>
 8004252:	6821      	ldr	r1, [r4, #0]
 8004254:	1862      	adds	r2, r4, r1
 8004256:	4293      	cmp	r3, r2
 8004258:	bf04      	itt	eq
 800425a:	681a      	ldreq	r2, [r3, #0]
 800425c:	685b      	ldreq	r3, [r3, #4]
 800425e:	6063      	str	r3, [r4, #4]
 8004260:	bf04      	itt	eq
 8004262:	1852      	addeq	r2, r2, r1
 8004264:	6022      	streq	r2, [r4, #0]
 8004266:	6004      	str	r4, [r0, #0]
 8004268:	e7ec      	b.n	8004244 <_free_r+0x24>
 800426a:	4613      	mov	r3, r2
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	b10a      	cbz	r2, 8004274 <_free_r+0x54>
 8004270:	42a2      	cmp	r2, r4
 8004272:	d9fa      	bls.n	800426a <_free_r+0x4a>
 8004274:	6819      	ldr	r1, [r3, #0]
 8004276:	1858      	adds	r0, r3, r1
 8004278:	42a0      	cmp	r0, r4
 800427a:	d10b      	bne.n	8004294 <_free_r+0x74>
 800427c:	6820      	ldr	r0, [r4, #0]
 800427e:	4401      	add	r1, r0
 8004280:	1858      	adds	r0, r3, r1
 8004282:	4282      	cmp	r2, r0
 8004284:	6019      	str	r1, [r3, #0]
 8004286:	d1dd      	bne.n	8004244 <_free_r+0x24>
 8004288:	6810      	ldr	r0, [r2, #0]
 800428a:	6852      	ldr	r2, [r2, #4]
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	4401      	add	r1, r0
 8004290:	6019      	str	r1, [r3, #0]
 8004292:	e7d7      	b.n	8004244 <_free_r+0x24>
 8004294:	d902      	bls.n	800429c <_free_r+0x7c>
 8004296:	230c      	movs	r3, #12
 8004298:	602b      	str	r3, [r5, #0]
 800429a:	e7d3      	b.n	8004244 <_free_r+0x24>
 800429c:	6820      	ldr	r0, [r4, #0]
 800429e:	1821      	adds	r1, r4, r0
 80042a0:	428a      	cmp	r2, r1
 80042a2:	bf04      	itt	eq
 80042a4:	6811      	ldreq	r1, [r2, #0]
 80042a6:	6852      	ldreq	r2, [r2, #4]
 80042a8:	6062      	str	r2, [r4, #4]
 80042aa:	bf04      	itt	eq
 80042ac:	1809      	addeq	r1, r1, r0
 80042ae:	6021      	streq	r1, [r4, #0]
 80042b0:	605c      	str	r4, [r3, #4]
 80042b2:	e7c7      	b.n	8004244 <_free_r+0x24>
 80042b4:	bd38      	pop	{r3, r4, r5, pc}
 80042b6:	bf00      	nop
 80042b8:	20000090 	.word	0x20000090

080042bc <_malloc_r>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	1ccd      	adds	r5, r1, #3
 80042c0:	f025 0503 	bic.w	r5, r5, #3
 80042c4:	3508      	adds	r5, #8
 80042c6:	2d0c      	cmp	r5, #12
 80042c8:	bf38      	it	cc
 80042ca:	250c      	movcc	r5, #12
 80042cc:	2d00      	cmp	r5, #0
 80042ce:	4606      	mov	r6, r0
 80042d0:	db01      	blt.n	80042d6 <_malloc_r+0x1a>
 80042d2:	42a9      	cmp	r1, r5
 80042d4:	d903      	bls.n	80042de <_malloc_r+0x22>
 80042d6:	230c      	movs	r3, #12
 80042d8:	6033      	str	r3, [r6, #0]
 80042da:	2000      	movs	r0, #0
 80042dc:	bd70      	pop	{r4, r5, r6, pc}
 80042de:	f000 fd24 	bl	8004d2a <__malloc_lock>
 80042e2:	4a21      	ldr	r2, [pc, #132]	; (8004368 <_malloc_r+0xac>)
 80042e4:	6814      	ldr	r4, [r2, #0]
 80042e6:	4621      	mov	r1, r4
 80042e8:	b991      	cbnz	r1, 8004310 <_malloc_r+0x54>
 80042ea:	4c20      	ldr	r4, [pc, #128]	; (800436c <_malloc_r+0xb0>)
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	b91b      	cbnz	r3, 80042f8 <_malloc_r+0x3c>
 80042f0:	4630      	mov	r0, r6
 80042f2:	f000 fc57 	bl	8004ba4 <_sbrk_r>
 80042f6:	6020      	str	r0, [r4, #0]
 80042f8:	4629      	mov	r1, r5
 80042fa:	4630      	mov	r0, r6
 80042fc:	f000 fc52 	bl	8004ba4 <_sbrk_r>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d124      	bne.n	800434e <_malloc_r+0x92>
 8004304:	230c      	movs	r3, #12
 8004306:	6033      	str	r3, [r6, #0]
 8004308:	4630      	mov	r0, r6
 800430a:	f000 fd0f 	bl	8004d2c <__malloc_unlock>
 800430e:	e7e4      	b.n	80042da <_malloc_r+0x1e>
 8004310:	680b      	ldr	r3, [r1, #0]
 8004312:	1b5b      	subs	r3, r3, r5
 8004314:	d418      	bmi.n	8004348 <_malloc_r+0x8c>
 8004316:	2b0b      	cmp	r3, #11
 8004318:	d90f      	bls.n	800433a <_malloc_r+0x7e>
 800431a:	600b      	str	r3, [r1, #0]
 800431c:	50cd      	str	r5, [r1, r3]
 800431e:	18cc      	adds	r4, r1, r3
 8004320:	4630      	mov	r0, r6
 8004322:	f000 fd03 	bl	8004d2c <__malloc_unlock>
 8004326:	f104 000b 	add.w	r0, r4, #11
 800432a:	1d23      	adds	r3, r4, #4
 800432c:	f020 0007 	bic.w	r0, r0, #7
 8004330:	1ac3      	subs	r3, r0, r3
 8004332:	d0d3      	beq.n	80042dc <_malloc_r+0x20>
 8004334:	425a      	negs	r2, r3
 8004336:	50e2      	str	r2, [r4, r3]
 8004338:	e7d0      	b.n	80042dc <_malloc_r+0x20>
 800433a:	428c      	cmp	r4, r1
 800433c:	684b      	ldr	r3, [r1, #4]
 800433e:	bf16      	itet	ne
 8004340:	6063      	strne	r3, [r4, #4]
 8004342:	6013      	streq	r3, [r2, #0]
 8004344:	460c      	movne	r4, r1
 8004346:	e7eb      	b.n	8004320 <_malloc_r+0x64>
 8004348:	460c      	mov	r4, r1
 800434a:	6849      	ldr	r1, [r1, #4]
 800434c:	e7cc      	b.n	80042e8 <_malloc_r+0x2c>
 800434e:	1cc4      	adds	r4, r0, #3
 8004350:	f024 0403 	bic.w	r4, r4, #3
 8004354:	42a0      	cmp	r0, r4
 8004356:	d005      	beq.n	8004364 <_malloc_r+0xa8>
 8004358:	1a21      	subs	r1, r4, r0
 800435a:	4630      	mov	r0, r6
 800435c:	f000 fc22 	bl	8004ba4 <_sbrk_r>
 8004360:	3001      	adds	r0, #1
 8004362:	d0cf      	beq.n	8004304 <_malloc_r+0x48>
 8004364:	6025      	str	r5, [r4, #0]
 8004366:	e7db      	b.n	8004320 <_malloc_r+0x64>
 8004368:	20000090 	.word	0x20000090
 800436c:	20000094 	.word	0x20000094

08004370 <__ssputs_r>:
 8004370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004374:	688e      	ldr	r6, [r1, #8]
 8004376:	429e      	cmp	r6, r3
 8004378:	4682      	mov	sl, r0
 800437a:	460c      	mov	r4, r1
 800437c:	4690      	mov	r8, r2
 800437e:	4699      	mov	r9, r3
 8004380:	d837      	bhi.n	80043f2 <__ssputs_r+0x82>
 8004382:	898a      	ldrh	r2, [r1, #12]
 8004384:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004388:	d031      	beq.n	80043ee <__ssputs_r+0x7e>
 800438a:	6825      	ldr	r5, [r4, #0]
 800438c:	6909      	ldr	r1, [r1, #16]
 800438e:	1a6f      	subs	r7, r5, r1
 8004390:	6965      	ldr	r5, [r4, #20]
 8004392:	2302      	movs	r3, #2
 8004394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004398:	fb95 f5f3 	sdiv	r5, r5, r3
 800439c:	f109 0301 	add.w	r3, r9, #1
 80043a0:	443b      	add	r3, r7
 80043a2:	429d      	cmp	r5, r3
 80043a4:	bf38      	it	cc
 80043a6:	461d      	movcc	r5, r3
 80043a8:	0553      	lsls	r3, r2, #21
 80043aa:	d530      	bpl.n	800440e <__ssputs_r+0x9e>
 80043ac:	4629      	mov	r1, r5
 80043ae:	f7ff ff85 	bl	80042bc <_malloc_r>
 80043b2:	4606      	mov	r6, r0
 80043b4:	b950      	cbnz	r0, 80043cc <__ssputs_r+0x5c>
 80043b6:	230c      	movs	r3, #12
 80043b8:	f8ca 3000 	str.w	r3, [sl]
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043c2:	81a3      	strh	r3, [r4, #12]
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295
 80043c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043cc:	463a      	mov	r2, r7
 80043ce:	6921      	ldr	r1, [r4, #16]
 80043d0:	f7ff fbd8 	bl	8003b84 <memcpy>
 80043d4:	89a3      	ldrh	r3, [r4, #12]
 80043d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043de:	81a3      	strh	r3, [r4, #12]
 80043e0:	6126      	str	r6, [r4, #16]
 80043e2:	6165      	str	r5, [r4, #20]
 80043e4:	443e      	add	r6, r7
 80043e6:	1bed      	subs	r5, r5, r7
 80043e8:	6026      	str	r6, [r4, #0]
 80043ea:	60a5      	str	r5, [r4, #8]
 80043ec:	464e      	mov	r6, r9
 80043ee:	454e      	cmp	r6, r9
 80043f0:	d900      	bls.n	80043f4 <__ssputs_r+0x84>
 80043f2:	464e      	mov	r6, r9
 80043f4:	4632      	mov	r2, r6
 80043f6:	4641      	mov	r1, r8
 80043f8:	6820      	ldr	r0, [r4, #0]
 80043fa:	f000 fc7d 	bl	8004cf8 <memmove>
 80043fe:	68a3      	ldr	r3, [r4, #8]
 8004400:	1b9b      	subs	r3, r3, r6
 8004402:	60a3      	str	r3, [r4, #8]
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	441e      	add	r6, r3
 8004408:	6026      	str	r6, [r4, #0]
 800440a:	2000      	movs	r0, #0
 800440c:	e7dc      	b.n	80043c8 <__ssputs_r+0x58>
 800440e:	462a      	mov	r2, r5
 8004410:	f000 fc8d 	bl	8004d2e <_realloc_r>
 8004414:	4606      	mov	r6, r0
 8004416:	2800      	cmp	r0, #0
 8004418:	d1e2      	bne.n	80043e0 <__ssputs_r+0x70>
 800441a:	6921      	ldr	r1, [r4, #16]
 800441c:	4650      	mov	r0, sl
 800441e:	f7ff feff 	bl	8004220 <_free_r>
 8004422:	e7c8      	b.n	80043b6 <__ssputs_r+0x46>

08004424 <_svfiprintf_r>:
 8004424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004428:	461d      	mov	r5, r3
 800442a:	898b      	ldrh	r3, [r1, #12]
 800442c:	061f      	lsls	r7, r3, #24
 800442e:	b09d      	sub	sp, #116	; 0x74
 8004430:	4680      	mov	r8, r0
 8004432:	460c      	mov	r4, r1
 8004434:	4616      	mov	r6, r2
 8004436:	d50f      	bpl.n	8004458 <_svfiprintf_r+0x34>
 8004438:	690b      	ldr	r3, [r1, #16]
 800443a:	b96b      	cbnz	r3, 8004458 <_svfiprintf_r+0x34>
 800443c:	2140      	movs	r1, #64	; 0x40
 800443e:	f7ff ff3d 	bl	80042bc <_malloc_r>
 8004442:	6020      	str	r0, [r4, #0]
 8004444:	6120      	str	r0, [r4, #16]
 8004446:	b928      	cbnz	r0, 8004454 <_svfiprintf_r+0x30>
 8004448:	230c      	movs	r3, #12
 800444a:	f8c8 3000 	str.w	r3, [r8]
 800444e:	f04f 30ff 	mov.w	r0, #4294967295
 8004452:	e0c8      	b.n	80045e6 <_svfiprintf_r+0x1c2>
 8004454:	2340      	movs	r3, #64	; 0x40
 8004456:	6163      	str	r3, [r4, #20]
 8004458:	2300      	movs	r3, #0
 800445a:	9309      	str	r3, [sp, #36]	; 0x24
 800445c:	2320      	movs	r3, #32
 800445e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004462:	2330      	movs	r3, #48	; 0x30
 8004464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004468:	9503      	str	r5, [sp, #12]
 800446a:	f04f 0b01 	mov.w	fp, #1
 800446e:	4637      	mov	r7, r6
 8004470:	463d      	mov	r5, r7
 8004472:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004476:	b10b      	cbz	r3, 800447c <_svfiprintf_r+0x58>
 8004478:	2b25      	cmp	r3, #37	; 0x25
 800447a:	d13e      	bne.n	80044fa <_svfiprintf_r+0xd6>
 800447c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004480:	d00b      	beq.n	800449a <_svfiprintf_r+0x76>
 8004482:	4653      	mov	r3, sl
 8004484:	4632      	mov	r2, r6
 8004486:	4621      	mov	r1, r4
 8004488:	4640      	mov	r0, r8
 800448a:	f7ff ff71 	bl	8004370 <__ssputs_r>
 800448e:	3001      	adds	r0, #1
 8004490:	f000 80a4 	beq.w	80045dc <_svfiprintf_r+0x1b8>
 8004494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004496:	4453      	add	r3, sl
 8004498:	9309      	str	r3, [sp, #36]	; 0x24
 800449a:	783b      	ldrb	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 809d 	beq.w	80045dc <_svfiprintf_r+0x1b8>
 80044a2:	2300      	movs	r3, #0
 80044a4:	f04f 32ff 	mov.w	r2, #4294967295
 80044a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044ac:	9304      	str	r3, [sp, #16]
 80044ae:	9307      	str	r3, [sp, #28]
 80044b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044b4:	931a      	str	r3, [sp, #104]	; 0x68
 80044b6:	462f      	mov	r7, r5
 80044b8:	2205      	movs	r2, #5
 80044ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80044be:	4850      	ldr	r0, [pc, #320]	; (8004600 <_svfiprintf_r+0x1dc>)
 80044c0:	f7fb fea6 	bl	8000210 <memchr>
 80044c4:	9b04      	ldr	r3, [sp, #16]
 80044c6:	b9d0      	cbnz	r0, 80044fe <_svfiprintf_r+0xda>
 80044c8:	06d9      	lsls	r1, r3, #27
 80044ca:	bf44      	itt	mi
 80044cc:	2220      	movmi	r2, #32
 80044ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80044d2:	071a      	lsls	r2, r3, #28
 80044d4:	bf44      	itt	mi
 80044d6:	222b      	movmi	r2, #43	; 0x2b
 80044d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80044dc:	782a      	ldrb	r2, [r5, #0]
 80044de:	2a2a      	cmp	r2, #42	; 0x2a
 80044e0:	d015      	beq.n	800450e <_svfiprintf_r+0xea>
 80044e2:	9a07      	ldr	r2, [sp, #28]
 80044e4:	462f      	mov	r7, r5
 80044e6:	2000      	movs	r0, #0
 80044e8:	250a      	movs	r5, #10
 80044ea:	4639      	mov	r1, r7
 80044ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044f0:	3b30      	subs	r3, #48	; 0x30
 80044f2:	2b09      	cmp	r3, #9
 80044f4:	d94d      	bls.n	8004592 <_svfiprintf_r+0x16e>
 80044f6:	b1b8      	cbz	r0, 8004528 <_svfiprintf_r+0x104>
 80044f8:	e00f      	b.n	800451a <_svfiprintf_r+0xf6>
 80044fa:	462f      	mov	r7, r5
 80044fc:	e7b8      	b.n	8004470 <_svfiprintf_r+0x4c>
 80044fe:	4a40      	ldr	r2, [pc, #256]	; (8004600 <_svfiprintf_r+0x1dc>)
 8004500:	1a80      	subs	r0, r0, r2
 8004502:	fa0b f000 	lsl.w	r0, fp, r0
 8004506:	4318      	orrs	r0, r3
 8004508:	9004      	str	r0, [sp, #16]
 800450a:	463d      	mov	r5, r7
 800450c:	e7d3      	b.n	80044b6 <_svfiprintf_r+0x92>
 800450e:	9a03      	ldr	r2, [sp, #12]
 8004510:	1d11      	adds	r1, r2, #4
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	9103      	str	r1, [sp, #12]
 8004516:	2a00      	cmp	r2, #0
 8004518:	db01      	blt.n	800451e <_svfiprintf_r+0xfa>
 800451a:	9207      	str	r2, [sp, #28]
 800451c:	e004      	b.n	8004528 <_svfiprintf_r+0x104>
 800451e:	4252      	negs	r2, r2
 8004520:	f043 0302 	orr.w	r3, r3, #2
 8004524:	9207      	str	r2, [sp, #28]
 8004526:	9304      	str	r3, [sp, #16]
 8004528:	783b      	ldrb	r3, [r7, #0]
 800452a:	2b2e      	cmp	r3, #46	; 0x2e
 800452c:	d10c      	bne.n	8004548 <_svfiprintf_r+0x124>
 800452e:	787b      	ldrb	r3, [r7, #1]
 8004530:	2b2a      	cmp	r3, #42	; 0x2a
 8004532:	d133      	bne.n	800459c <_svfiprintf_r+0x178>
 8004534:	9b03      	ldr	r3, [sp, #12]
 8004536:	1d1a      	adds	r2, r3, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	9203      	str	r2, [sp, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	bfb8      	it	lt
 8004540:	f04f 33ff 	movlt.w	r3, #4294967295
 8004544:	3702      	adds	r7, #2
 8004546:	9305      	str	r3, [sp, #20]
 8004548:	4d2e      	ldr	r5, [pc, #184]	; (8004604 <_svfiprintf_r+0x1e0>)
 800454a:	7839      	ldrb	r1, [r7, #0]
 800454c:	2203      	movs	r2, #3
 800454e:	4628      	mov	r0, r5
 8004550:	f7fb fe5e 	bl	8000210 <memchr>
 8004554:	b138      	cbz	r0, 8004566 <_svfiprintf_r+0x142>
 8004556:	2340      	movs	r3, #64	; 0x40
 8004558:	1b40      	subs	r0, r0, r5
 800455a:	fa03 f000 	lsl.w	r0, r3, r0
 800455e:	9b04      	ldr	r3, [sp, #16]
 8004560:	4303      	orrs	r3, r0
 8004562:	3701      	adds	r7, #1
 8004564:	9304      	str	r3, [sp, #16]
 8004566:	7839      	ldrb	r1, [r7, #0]
 8004568:	4827      	ldr	r0, [pc, #156]	; (8004608 <_svfiprintf_r+0x1e4>)
 800456a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800456e:	2206      	movs	r2, #6
 8004570:	1c7e      	adds	r6, r7, #1
 8004572:	f7fb fe4d 	bl	8000210 <memchr>
 8004576:	2800      	cmp	r0, #0
 8004578:	d038      	beq.n	80045ec <_svfiprintf_r+0x1c8>
 800457a:	4b24      	ldr	r3, [pc, #144]	; (800460c <_svfiprintf_r+0x1e8>)
 800457c:	bb13      	cbnz	r3, 80045c4 <_svfiprintf_r+0x1a0>
 800457e:	9b03      	ldr	r3, [sp, #12]
 8004580:	3307      	adds	r3, #7
 8004582:	f023 0307 	bic.w	r3, r3, #7
 8004586:	3308      	adds	r3, #8
 8004588:	9303      	str	r3, [sp, #12]
 800458a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800458c:	444b      	add	r3, r9
 800458e:	9309      	str	r3, [sp, #36]	; 0x24
 8004590:	e76d      	b.n	800446e <_svfiprintf_r+0x4a>
 8004592:	fb05 3202 	mla	r2, r5, r2, r3
 8004596:	2001      	movs	r0, #1
 8004598:	460f      	mov	r7, r1
 800459a:	e7a6      	b.n	80044ea <_svfiprintf_r+0xc6>
 800459c:	2300      	movs	r3, #0
 800459e:	3701      	adds	r7, #1
 80045a0:	9305      	str	r3, [sp, #20]
 80045a2:	4619      	mov	r1, r3
 80045a4:	250a      	movs	r5, #10
 80045a6:	4638      	mov	r0, r7
 80045a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045ac:	3a30      	subs	r2, #48	; 0x30
 80045ae:	2a09      	cmp	r2, #9
 80045b0:	d903      	bls.n	80045ba <_svfiprintf_r+0x196>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0c8      	beq.n	8004548 <_svfiprintf_r+0x124>
 80045b6:	9105      	str	r1, [sp, #20]
 80045b8:	e7c6      	b.n	8004548 <_svfiprintf_r+0x124>
 80045ba:	fb05 2101 	mla	r1, r5, r1, r2
 80045be:	2301      	movs	r3, #1
 80045c0:	4607      	mov	r7, r0
 80045c2:	e7f0      	b.n	80045a6 <_svfiprintf_r+0x182>
 80045c4:	ab03      	add	r3, sp, #12
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	4622      	mov	r2, r4
 80045ca:	4b11      	ldr	r3, [pc, #68]	; (8004610 <_svfiprintf_r+0x1ec>)
 80045cc:	a904      	add	r1, sp, #16
 80045ce:	4640      	mov	r0, r8
 80045d0:	f3af 8000 	nop.w
 80045d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80045d8:	4681      	mov	r9, r0
 80045da:	d1d6      	bne.n	800458a <_svfiprintf_r+0x166>
 80045dc:	89a3      	ldrh	r3, [r4, #12]
 80045de:	065b      	lsls	r3, r3, #25
 80045e0:	f53f af35 	bmi.w	800444e <_svfiprintf_r+0x2a>
 80045e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045e6:	b01d      	add	sp, #116	; 0x74
 80045e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ec:	ab03      	add	r3, sp, #12
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	4622      	mov	r2, r4
 80045f2:	4b07      	ldr	r3, [pc, #28]	; (8004610 <_svfiprintf_r+0x1ec>)
 80045f4:	a904      	add	r1, sp, #16
 80045f6:	4640      	mov	r0, r8
 80045f8:	f000 f9c2 	bl	8004980 <_printf_i>
 80045fc:	e7ea      	b.n	80045d4 <_svfiprintf_r+0x1b0>
 80045fe:	bf00      	nop
 8004600:	08004f7c 	.word	0x08004f7c
 8004604:	08004f82 	.word	0x08004f82
 8004608:	08004f86 	.word	0x08004f86
 800460c:	00000000 	.word	0x00000000
 8004610:	08004371 	.word	0x08004371

08004614 <__sfputc_r>:
 8004614:	6893      	ldr	r3, [r2, #8]
 8004616:	3b01      	subs	r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	b410      	push	{r4}
 800461c:	6093      	str	r3, [r2, #8]
 800461e:	da08      	bge.n	8004632 <__sfputc_r+0x1e>
 8004620:	6994      	ldr	r4, [r2, #24]
 8004622:	42a3      	cmp	r3, r4
 8004624:	db01      	blt.n	800462a <__sfputc_r+0x16>
 8004626:	290a      	cmp	r1, #10
 8004628:	d103      	bne.n	8004632 <__sfputc_r+0x1e>
 800462a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800462e:	f7ff bb59 	b.w	8003ce4 <__swbuf_r>
 8004632:	6813      	ldr	r3, [r2, #0]
 8004634:	1c58      	adds	r0, r3, #1
 8004636:	6010      	str	r0, [r2, #0]
 8004638:	7019      	strb	r1, [r3, #0]
 800463a:	4608      	mov	r0, r1
 800463c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004640:	4770      	bx	lr

08004642 <__sfputs_r>:
 8004642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004644:	4606      	mov	r6, r0
 8004646:	460f      	mov	r7, r1
 8004648:	4614      	mov	r4, r2
 800464a:	18d5      	adds	r5, r2, r3
 800464c:	42ac      	cmp	r4, r5
 800464e:	d101      	bne.n	8004654 <__sfputs_r+0x12>
 8004650:	2000      	movs	r0, #0
 8004652:	e007      	b.n	8004664 <__sfputs_r+0x22>
 8004654:	463a      	mov	r2, r7
 8004656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800465a:	4630      	mov	r0, r6
 800465c:	f7ff ffda 	bl	8004614 <__sfputc_r>
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	d1f3      	bne.n	800464c <__sfputs_r+0xa>
 8004664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004668 <_vfiprintf_r>:
 8004668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466c:	460c      	mov	r4, r1
 800466e:	b09d      	sub	sp, #116	; 0x74
 8004670:	4617      	mov	r7, r2
 8004672:	461d      	mov	r5, r3
 8004674:	4606      	mov	r6, r0
 8004676:	b118      	cbz	r0, 8004680 <_vfiprintf_r+0x18>
 8004678:	6983      	ldr	r3, [r0, #24]
 800467a:	b90b      	cbnz	r3, 8004680 <_vfiprintf_r+0x18>
 800467c:	f7ff fce2 	bl	8004044 <__sinit>
 8004680:	4b7c      	ldr	r3, [pc, #496]	; (8004874 <_vfiprintf_r+0x20c>)
 8004682:	429c      	cmp	r4, r3
 8004684:	d158      	bne.n	8004738 <_vfiprintf_r+0xd0>
 8004686:	6874      	ldr	r4, [r6, #4]
 8004688:	89a3      	ldrh	r3, [r4, #12]
 800468a:	0718      	lsls	r0, r3, #28
 800468c:	d55e      	bpl.n	800474c <_vfiprintf_r+0xe4>
 800468e:	6923      	ldr	r3, [r4, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d05b      	beq.n	800474c <_vfiprintf_r+0xe4>
 8004694:	2300      	movs	r3, #0
 8004696:	9309      	str	r3, [sp, #36]	; 0x24
 8004698:	2320      	movs	r3, #32
 800469a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800469e:	2330      	movs	r3, #48	; 0x30
 80046a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046a4:	9503      	str	r5, [sp, #12]
 80046a6:	f04f 0b01 	mov.w	fp, #1
 80046aa:	46b8      	mov	r8, r7
 80046ac:	4645      	mov	r5, r8
 80046ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046b2:	b10b      	cbz	r3, 80046b8 <_vfiprintf_r+0x50>
 80046b4:	2b25      	cmp	r3, #37	; 0x25
 80046b6:	d154      	bne.n	8004762 <_vfiprintf_r+0xfa>
 80046b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80046bc:	d00b      	beq.n	80046d6 <_vfiprintf_r+0x6e>
 80046be:	4653      	mov	r3, sl
 80046c0:	463a      	mov	r2, r7
 80046c2:	4621      	mov	r1, r4
 80046c4:	4630      	mov	r0, r6
 80046c6:	f7ff ffbc 	bl	8004642 <__sfputs_r>
 80046ca:	3001      	adds	r0, #1
 80046cc:	f000 80c2 	beq.w	8004854 <_vfiprintf_r+0x1ec>
 80046d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d2:	4453      	add	r3, sl
 80046d4:	9309      	str	r3, [sp, #36]	; 0x24
 80046d6:	f898 3000 	ldrb.w	r3, [r8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80ba 	beq.w	8004854 <_vfiprintf_r+0x1ec>
 80046e0:	2300      	movs	r3, #0
 80046e2:	f04f 32ff 	mov.w	r2, #4294967295
 80046e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046ea:	9304      	str	r3, [sp, #16]
 80046ec:	9307      	str	r3, [sp, #28]
 80046ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046f2:	931a      	str	r3, [sp, #104]	; 0x68
 80046f4:	46a8      	mov	r8, r5
 80046f6:	2205      	movs	r2, #5
 80046f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80046fc:	485e      	ldr	r0, [pc, #376]	; (8004878 <_vfiprintf_r+0x210>)
 80046fe:	f7fb fd87 	bl	8000210 <memchr>
 8004702:	9b04      	ldr	r3, [sp, #16]
 8004704:	bb78      	cbnz	r0, 8004766 <_vfiprintf_r+0xfe>
 8004706:	06d9      	lsls	r1, r3, #27
 8004708:	bf44      	itt	mi
 800470a:	2220      	movmi	r2, #32
 800470c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004710:	071a      	lsls	r2, r3, #28
 8004712:	bf44      	itt	mi
 8004714:	222b      	movmi	r2, #43	; 0x2b
 8004716:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800471a:	782a      	ldrb	r2, [r5, #0]
 800471c:	2a2a      	cmp	r2, #42	; 0x2a
 800471e:	d02a      	beq.n	8004776 <_vfiprintf_r+0x10e>
 8004720:	9a07      	ldr	r2, [sp, #28]
 8004722:	46a8      	mov	r8, r5
 8004724:	2000      	movs	r0, #0
 8004726:	250a      	movs	r5, #10
 8004728:	4641      	mov	r1, r8
 800472a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800472e:	3b30      	subs	r3, #48	; 0x30
 8004730:	2b09      	cmp	r3, #9
 8004732:	d969      	bls.n	8004808 <_vfiprintf_r+0x1a0>
 8004734:	b360      	cbz	r0, 8004790 <_vfiprintf_r+0x128>
 8004736:	e024      	b.n	8004782 <_vfiprintf_r+0x11a>
 8004738:	4b50      	ldr	r3, [pc, #320]	; (800487c <_vfiprintf_r+0x214>)
 800473a:	429c      	cmp	r4, r3
 800473c:	d101      	bne.n	8004742 <_vfiprintf_r+0xda>
 800473e:	68b4      	ldr	r4, [r6, #8]
 8004740:	e7a2      	b.n	8004688 <_vfiprintf_r+0x20>
 8004742:	4b4f      	ldr	r3, [pc, #316]	; (8004880 <_vfiprintf_r+0x218>)
 8004744:	429c      	cmp	r4, r3
 8004746:	bf08      	it	eq
 8004748:	68f4      	ldreq	r4, [r6, #12]
 800474a:	e79d      	b.n	8004688 <_vfiprintf_r+0x20>
 800474c:	4621      	mov	r1, r4
 800474e:	4630      	mov	r0, r6
 8004750:	f7ff fb1a 	bl	8003d88 <__swsetup_r>
 8004754:	2800      	cmp	r0, #0
 8004756:	d09d      	beq.n	8004694 <_vfiprintf_r+0x2c>
 8004758:	f04f 30ff 	mov.w	r0, #4294967295
 800475c:	b01d      	add	sp, #116	; 0x74
 800475e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004762:	46a8      	mov	r8, r5
 8004764:	e7a2      	b.n	80046ac <_vfiprintf_r+0x44>
 8004766:	4a44      	ldr	r2, [pc, #272]	; (8004878 <_vfiprintf_r+0x210>)
 8004768:	1a80      	subs	r0, r0, r2
 800476a:	fa0b f000 	lsl.w	r0, fp, r0
 800476e:	4318      	orrs	r0, r3
 8004770:	9004      	str	r0, [sp, #16]
 8004772:	4645      	mov	r5, r8
 8004774:	e7be      	b.n	80046f4 <_vfiprintf_r+0x8c>
 8004776:	9a03      	ldr	r2, [sp, #12]
 8004778:	1d11      	adds	r1, r2, #4
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	9103      	str	r1, [sp, #12]
 800477e:	2a00      	cmp	r2, #0
 8004780:	db01      	blt.n	8004786 <_vfiprintf_r+0x11e>
 8004782:	9207      	str	r2, [sp, #28]
 8004784:	e004      	b.n	8004790 <_vfiprintf_r+0x128>
 8004786:	4252      	negs	r2, r2
 8004788:	f043 0302 	orr.w	r3, r3, #2
 800478c:	9207      	str	r2, [sp, #28]
 800478e:	9304      	str	r3, [sp, #16]
 8004790:	f898 3000 	ldrb.w	r3, [r8]
 8004794:	2b2e      	cmp	r3, #46	; 0x2e
 8004796:	d10e      	bne.n	80047b6 <_vfiprintf_r+0x14e>
 8004798:	f898 3001 	ldrb.w	r3, [r8, #1]
 800479c:	2b2a      	cmp	r3, #42	; 0x2a
 800479e:	d138      	bne.n	8004812 <_vfiprintf_r+0x1aa>
 80047a0:	9b03      	ldr	r3, [sp, #12]
 80047a2:	1d1a      	adds	r2, r3, #4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	9203      	str	r2, [sp, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bfb8      	it	lt
 80047ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80047b0:	f108 0802 	add.w	r8, r8, #2
 80047b4:	9305      	str	r3, [sp, #20]
 80047b6:	4d33      	ldr	r5, [pc, #204]	; (8004884 <_vfiprintf_r+0x21c>)
 80047b8:	f898 1000 	ldrb.w	r1, [r8]
 80047bc:	2203      	movs	r2, #3
 80047be:	4628      	mov	r0, r5
 80047c0:	f7fb fd26 	bl	8000210 <memchr>
 80047c4:	b140      	cbz	r0, 80047d8 <_vfiprintf_r+0x170>
 80047c6:	2340      	movs	r3, #64	; 0x40
 80047c8:	1b40      	subs	r0, r0, r5
 80047ca:	fa03 f000 	lsl.w	r0, r3, r0
 80047ce:	9b04      	ldr	r3, [sp, #16]
 80047d0:	4303      	orrs	r3, r0
 80047d2:	f108 0801 	add.w	r8, r8, #1
 80047d6:	9304      	str	r3, [sp, #16]
 80047d8:	f898 1000 	ldrb.w	r1, [r8]
 80047dc:	482a      	ldr	r0, [pc, #168]	; (8004888 <_vfiprintf_r+0x220>)
 80047de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047e2:	2206      	movs	r2, #6
 80047e4:	f108 0701 	add.w	r7, r8, #1
 80047e8:	f7fb fd12 	bl	8000210 <memchr>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	d037      	beq.n	8004860 <_vfiprintf_r+0x1f8>
 80047f0:	4b26      	ldr	r3, [pc, #152]	; (800488c <_vfiprintf_r+0x224>)
 80047f2:	bb1b      	cbnz	r3, 800483c <_vfiprintf_r+0x1d4>
 80047f4:	9b03      	ldr	r3, [sp, #12]
 80047f6:	3307      	adds	r3, #7
 80047f8:	f023 0307 	bic.w	r3, r3, #7
 80047fc:	3308      	adds	r3, #8
 80047fe:	9303      	str	r3, [sp, #12]
 8004800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004802:	444b      	add	r3, r9
 8004804:	9309      	str	r3, [sp, #36]	; 0x24
 8004806:	e750      	b.n	80046aa <_vfiprintf_r+0x42>
 8004808:	fb05 3202 	mla	r2, r5, r2, r3
 800480c:	2001      	movs	r0, #1
 800480e:	4688      	mov	r8, r1
 8004810:	e78a      	b.n	8004728 <_vfiprintf_r+0xc0>
 8004812:	2300      	movs	r3, #0
 8004814:	f108 0801 	add.w	r8, r8, #1
 8004818:	9305      	str	r3, [sp, #20]
 800481a:	4619      	mov	r1, r3
 800481c:	250a      	movs	r5, #10
 800481e:	4640      	mov	r0, r8
 8004820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004824:	3a30      	subs	r2, #48	; 0x30
 8004826:	2a09      	cmp	r2, #9
 8004828:	d903      	bls.n	8004832 <_vfiprintf_r+0x1ca>
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0c3      	beq.n	80047b6 <_vfiprintf_r+0x14e>
 800482e:	9105      	str	r1, [sp, #20]
 8004830:	e7c1      	b.n	80047b6 <_vfiprintf_r+0x14e>
 8004832:	fb05 2101 	mla	r1, r5, r1, r2
 8004836:	2301      	movs	r3, #1
 8004838:	4680      	mov	r8, r0
 800483a:	e7f0      	b.n	800481e <_vfiprintf_r+0x1b6>
 800483c:	ab03      	add	r3, sp, #12
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	4622      	mov	r2, r4
 8004842:	4b13      	ldr	r3, [pc, #76]	; (8004890 <_vfiprintf_r+0x228>)
 8004844:	a904      	add	r1, sp, #16
 8004846:	4630      	mov	r0, r6
 8004848:	f3af 8000 	nop.w
 800484c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004850:	4681      	mov	r9, r0
 8004852:	d1d5      	bne.n	8004800 <_vfiprintf_r+0x198>
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	065b      	lsls	r3, r3, #25
 8004858:	f53f af7e 	bmi.w	8004758 <_vfiprintf_r+0xf0>
 800485c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800485e:	e77d      	b.n	800475c <_vfiprintf_r+0xf4>
 8004860:	ab03      	add	r3, sp, #12
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	4622      	mov	r2, r4
 8004866:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <_vfiprintf_r+0x228>)
 8004868:	a904      	add	r1, sp, #16
 800486a:	4630      	mov	r0, r6
 800486c:	f000 f888 	bl	8004980 <_printf_i>
 8004870:	e7ec      	b.n	800484c <_vfiprintf_r+0x1e4>
 8004872:	bf00      	nop
 8004874:	08004f3c 	.word	0x08004f3c
 8004878:	08004f7c 	.word	0x08004f7c
 800487c:	08004f5c 	.word	0x08004f5c
 8004880:	08004f1c 	.word	0x08004f1c
 8004884:	08004f82 	.word	0x08004f82
 8004888:	08004f86 	.word	0x08004f86
 800488c:	00000000 	.word	0x00000000
 8004890:	08004643 	.word	0x08004643

08004894 <_printf_common>:
 8004894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004898:	4691      	mov	r9, r2
 800489a:	461f      	mov	r7, r3
 800489c:	688a      	ldr	r2, [r1, #8]
 800489e:	690b      	ldr	r3, [r1, #16]
 80048a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048a4:	4293      	cmp	r3, r2
 80048a6:	bfb8      	it	lt
 80048a8:	4613      	movlt	r3, r2
 80048aa:	f8c9 3000 	str.w	r3, [r9]
 80048ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048b2:	4606      	mov	r6, r0
 80048b4:	460c      	mov	r4, r1
 80048b6:	b112      	cbz	r2, 80048be <_printf_common+0x2a>
 80048b8:	3301      	adds	r3, #1
 80048ba:	f8c9 3000 	str.w	r3, [r9]
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	0699      	lsls	r1, r3, #26
 80048c2:	bf42      	ittt	mi
 80048c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048c8:	3302      	addmi	r3, #2
 80048ca:	f8c9 3000 	strmi.w	r3, [r9]
 80048ce:	6825      	ldr	r5, [r4, #0]
 80048d0:	f015 0506 	ands.w	r5, r5, #6
 80048d4:	d107      	bne.n	80048e6 <_printf_common+0x52>
 80048d6:	f104 0a19 	add.w	sl, r4, #25
 80048da:	68e3      	ldr	r3, [r4, #12]
 80048dc:	f8d9 2000 	ldr.w	r2, [r9]
 80048e0:	1a9b      	subs	r3, r3, r2
 80048e2:	42ab      	cmp	r3, r5
 80048e4:	dc28      	bgt.n	8004938 <_printf_common+0xa4>
 80048e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048ea:	6822      	ldr	r2, [r4, #0]
 80048ec:	3300      	adds	r3, #0
 80048ee:	bf18      	it	ne
 80048f0:	2301      	movne	r3, #1
 80048f2:	0692      	lsls	r2, r2, #26
 80048f4:	d42d      	bmi.n	8004952 <_printf_common+0xbe>
 80048f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048fa:	4639      	mov	r1, r7
 80048fc:	4630      	mov	r0, r6
 80048fe:	47c0      	blx	r8
 8004900:	3001      	adds	r0, #1
 8004902:	d020      	beq.n	8004946 <_printf_common+0xb2>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	68e5      	ldr	r5, [r4, #12]
 8004908:	f8d9 2000 	ldr.w	r2, [r9]
 800490c:	f003 0306 	and.w	r3, r3, #6
 8004910:	2b04      	cmp	r3, #4
 8004912:	bf08      	it	eq
 8004914:	1aad      	subeq	r5, r5, r2
 8004916:	68a3      	ldr	r3, [r4, #8]
 8004918:	6922      	ldr	r2, [r4, #16]
 800491a:	bf0c      	ite	eq
 800491c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004920:	2500      	movne	r5, #0
 8004922:	4293      	cmp	r3, r2
 8004924:	bfc4      	itt	gt
 8004926:	1a9b      	subgt	r3, r3, r2
 8004928:	18ed      	addgt	r5, r5, r3
 800492a:	f04f 0900 	mov.w	r9, #0
 800492e:	341a      	adds	r4, #26
 8004930:	454d      	cmp	r5, r9
 8004932:	d11a      	bne.n	800496a <_printf_common+0xd6>
 8004934:	2000      	movs	r0, #0
 8004936:	e008      	b.n	800494a <_printf_common+0xb6>
 8004938:	2301      	movs	r3, #1
 800493a:	4652      	mov	r2, sl
 800493c:	4639      	mov	r1, r7
 800493e:	4630      	mov	r0, r6
 8004940:	47c0      	blx	r8
 8004942:	3001      	adds	r0, #1
 8004944:	d103      	bne.n	800494e <_printf_common+0xba>
 8004946:	f04f 30ff 	mov.w	r0, #4294967295
 800494a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494e:	3501      	adds	r5, #1
 8004950:	e7c3      	b.n	80048da <_printf_common+0x46>
 8004952:	18e1      	adds	r1, r4, r3
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	2030      	movs	r0, #48	; 0x30
 8004958:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800495c:	4422      	add	r2, r4
 800495e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004962:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004966:	3302      	adds	r3, #2
 8004968:	e7c5      	b.n	80048f6 <_printf_common+0x62>
 800496a:	2301      	movs	r3, #1
 800496c:	4622      	mov	r2, r4
 800496e:	4639      	mov	r1, r7
 8004970:	4630      	mov	r0, r6
 8004972:	47c0      	blx	r8
 8004974:	3001      	adds	r0, #1
 8004976:	d0e6      	beq.n	8004946 <_printf_common+0xb2>
 8004978:	f109 0901 	add.w	r9, r9, #1
 800497c:	e7d8      	b.n	8004930 <_printf_common+0x9c>
	...

08004980 <_printf_i>:
 8004980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004984:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004988:	460c      	mov	r4, r1
 800498a:	7e09      	ldrb	r1, [r1, #24]
 800498c:	b085      	sub	sp, #20
 800498e:	296e      	cmp	r1, #110	; 0x6e
 8004990:	4617      	mov	r7, r2
 8004992:	4606      	mov	r6, r0
 8004994:	4698      	mov	r8, r3
 8004996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004998:	f000 80b3 	beq.w	8004b02 <_printf_i+0x182>
 800499c:	d822      	bhi.n	80049e4 <_printf_i+0x64>
 800499e:	2963      	cmp	r1, #99	; 0x63
 80049a0:	d036      	beq.n	8004a10 <_printf_i+0x90>
 80049a2:	d80a      	bhi.n	80049ba <_printf_i+0x3a>
 80049a4:	2900      	cmp	r1, #0
 80049a6:	f000 80b9 	beq.w	8004b1c <_printf_i+0x19c>
 80049aa:	2958      	cmp	r1, #88	; 0x58
 80049ac:	f000 8083 	beq.w	8004ab6 <_printf_i+0x136>
 80049b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80049b8:	e032      	b.n	8004a20 <_printf_i+0xa0>
 80049ba:	2964      	cmp	r1, #100	; 0x64
 80049bc:	d001      	beq.n	80049c2 <_printf_i+0x42>
 80049be:	2969      	cmp	r1, #105	; 0x69
 80049c0:	d1f6      	bne.n	80049b0 <_printf_i+0x30>
 80049c2:	6820      	ldr	r0, [r4, #0]
 80049c4:	6813      	ldr	r3, [r2, #0]
 80049c6:	0605      	lsls	r5, r0, #24
 80049c8:	f103 0104 	add.w	r1, r3, #4
 80049cc:	d52a      	bpl.n	8004a24 <_printf_i+0xa4>
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6011      	str	r1, [r2, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	da03      	bge.n	80049de <_printf_i+0x5e>
 80049d6:	222d      	movs	r2, #45	; 0x2d
 80049d8:	425b      	negs	r3, r3
 80049da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049de:	486f      	ldr	r0, [pc, #444]	; (8004b9c <_printf_i+0x21c>)
 80049e0:	220a      	movs	r2, #10
 80049e2:	e039      	b.n	8004a58 <_printf_i+0xd8>
 80049e4:	2973      	cmp	r1, #115	; 0x73
 80049e6:	f000 809d 	beq.w	8004b24 <_printf_i+0x1a4>
 80049ea:	d808      	bhi.n	80049fe <_printf_i+0x7e>
 80049ec:	296f      	cmp	r1, #111	; 0x6f
 80049ee:	d020      	beq.n	8004a32 <_printf_i+0xb2>
 80049f0:	2970      	cmp	r1, #112	; 0x70
 80049f2:	d1dd      	bne.n	80049b0 <_printf_i+0x30>
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	f043 0320 	orr.w	r3, r3, #32
 80049fa:	6023      	str	r3, [r4, #0]
 80049fc:	e003      	b.n	8004a06 <_printf_i+0x86>
 80049fe:	2975      	cmp	r1, #117	; 0x75
 8004a00:	d017      	beq.n	8004a32 <_printf_i+0xb2>
 8004a02:	2978      	cmp	r1, #120	; 0x78
 8004a04:	d1d4      	bne.n	80049b0 <_printf_i+0x30>
 8004a06:	2378      	movs	r3, #120	; 0x78
 8004a08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a0c:	4864      	ldr	r0, [pc, #400]	; (8004ba0 <_printf_i+0x220>)
 8004a0e:	e055      	b.n	8004abc <_printf_i+0x13c>
 8004a10:	6813      	ldr	r3, [r2, #0]
 8004a12:	1d19      	adds	r1, r3, #4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6011      	str	r1, [r2, #0]
 8004a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a20:	2301      	movs	r3, #1
 8004a22:	e08c      	b.n	8004b3e <_printf_i+0x1be>
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6011      	str	r1, [r2, #0]
 8004a28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a2c:	bf18      	it	ne
 8004a2e:	b21b      	sxthne	r3, r3
 8004a30:	e7cf      	b.n	80049d2 <_printf_i+0x52>
 8004a32:	6813      	ldr	r3, [r2, #0]
 8004a34:	6825      	ldr	r5, [r4, #0]
 8004a36:	1d18      	adds	r0, r3, #4
 8004a38:	6010      	str	r0, [r2, #0]
 8004a3a:	0628      	lsls	r0, r5, #24
 8004a3c:	d501      	bpl.n	8004a42 <_printf_i+0xc2>
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	e002      	b.n	8004a48 <_printf_i+0xc8>
 8004a42:	0668      	lsls	r0, r5, #25
 8004a44:	d5fb      	bpl.n	8004a3e <_printf_i+0xbe>
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	4854      	ldr	r0, [pc, #336]	; (8004b9c <_printf_i+0x21c>)
 8004a4a:	296f      	cmp	r1, #111	; 0x6f
 8004a4c:	bf14      	ite	ne
 8004a4e:	220a      	movne	r2, #10
 8004a50:	2208      	moveq	r2, #8
 8004a52:	2100      	movs	r1, #0
 8004a54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a58:	6865      	ldr	r5, [r4, #4]
 8004a5a:	60a5      	str	r5, [r4, #8]
 8004a5c:	2d00      	cmp	r5, #0
 8004a5e:	f2c0 8095 	blt.w	8004b8c <_printf_i+0x20c>
 8004a62:	6821      	ldr	r1, [r4, #0]
 8004a64:	f021 0104 	bic.w	r1, r1, #4
 8004a68:	6021      	str	r1, [r4, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d13d      	bne.n	8004aea <_printf_i+0x16a>
 8004a6e:	2d00      	cmp	r5, #0
 8004a70:	f040 808e 	bne.w	8004b90 <_printf_i+0x210>
 8004a74:	4665      	mov	r5, ip
 8004a76:	2a08      	cmp	r2, #8
 8004a78:	d10b      	bne.n	8004a92 <_printf_i+0x112>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	07db      	lsls	r3, r3, #31
 8004a7e:	d508      	bpl.n	8004a92 <_printf_i+0x112>
 8004a80:	6923      	ldr	r3, [r4, #16]
 8004a82:	6862      	ldr	r2, [r4, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	bfde      	ittt	le
 8004a88:	2330      	movle	r3, #48	; 0x30
 8004a8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a92:	ebac 0305 	sub.w	r3, ip, r5
 8004a96:	6123      	str	r3, [r4, #16]
 8004a98:	f8cd 8000 	str.w	r8, [sp]
 8004a9c:	463b      	mov	r3, r7
 8004a9e:	aa03      	add	r2, sp, #12
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	f7ff fef6 	bl	8004894 <_printf_common>
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d14d      	bne.n	8004b48 <_printf_i+0x1c8>
 8004aac:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab0:	b005      	add	sp, #20
 8004ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ab6:	4839      	ldr	r0, [pc, #228]	; (8004b9c <_printf_i+0x21c>)
 8004ab8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004abc:	6813      	ldr	r3, [r2, #0]
 8004abe:	6821      	ldr	r1, [r4, #0]
 8004ac0:	1d1d      	adds	r5, r3, #4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6015      	str	r5, [r2, #0]
 8004ac6:	060a      	lsls	r2, r1, #24
 8004ac8:	d50b      	bpl.n	8004ae2 <_printf_i+0x162>
 8004aca:	07ca      	lsls	r2, r1, #31
 8004acc:	bf44      	itt	mi
 8004ace:	f041 0120 	orrmi.w	r1, r1, #32
 8004ad2:	6021      	strmi	r1, [r4, #0]
 8004ad4:	b91b      	cbnz	r3, 8004ade <_printf_i+0x15e>
 8004ad6:	6822      	ldr	r2, [r4, #0]
 8004ad8:	f022 0220 	bic.w	r2, r2, #32
 8004adc:	6022      	str	r2, [r4, #0]
 8004ade:	2210      	movs	r2, #16
 8004ae0:	e7b7      	b.n	8004a52 <_printf_i+0xd2>
 8004ae2:	064d      	lsls	r5, r1, #25
 8004ae4:	bf48      	it	mi
 8004ae6:	b29b      	uxthmi	r3, r3
 8004ae8:	e7ef      	b.n	8004aca <_printf_i+0x14a>
 8004aea:	4665      	mov	r5, ip
 8004aec:	fbb3 f1f2 	udiv	r1, r3, r2
 8004af0:	fb02 3311 	mls	r3, r2, r1, r3
 8004af4:	5cc3      	ldrb	r3, [r0, r3]
 8004af6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004afa:	460b      	mov	r3, r1
 8004afc:	2900      	cmp	r1, #0
 8004afe:	d1f5      	bne.n	8004aec <_printf_i+0x16c>
 8004b00:	e7b9      	b.n	8004a76 <_printf_i+0xf6>
 8004b02:	6813      	ldr	r3, [r2, #0]
 8004b04:	6825      	ldr	r5, [r4, #0]
 8004b06:	6961      	ldr	r1, [r4, #20]
 8004b08:	1d18      	adds	r0, r3, #4
 8004b0a:	6010      	str	r0, [r2, #0]
 8004b0c:	0628      	lsls	r0, r5, #24
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	d501      	bpl.n	8004b16 <_printf_i+0x196>
 8004b12:	6019      	str	r1, [r3, #0]
 8004b14:	e002      	b.n	8004b1c <_printf_i+0x19c>
 8004b16:	066a      	lsls	r2, r5, #25
 8004b18:	d5fb      	bpl.n	8004b12 <_printf_i+0x192>
 8004b1a:	8019      	strh	r1, [r3, #0]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	6123      	str	r3, [r4, #16]
 8004b20:	4665      	mov	r5, ip
 8004b22:	e7b9      	b.n	8004a98 <_printf_i+0x118>
 8004b24:	6813      	ldr	r3, [r2, #0]
 8004b26:	1d19      	adds	r1, r3, #4
 8004b28:	6011      	str	r1, [r2, #0]
 8004b2a:	681d      	ldr	r5, [r3, #0]
 8004b2c:	6862      	ldr	r2, [r4, #4]
 8004b2e:	2100      	movs	r1, #0
 8004b30:	4628      	mov	r0, r5
 8004b32:	f7fb fb6d 	bl	8000210 <memchr>
 8004b36:	b108      	cbz	r0, 8004b3c <_printf_i+0x1bc>
 8004b38:	1b40      	subs	r0, r0, r5
 8004b3a:	6060      	str	r0, [r4, #4]
 8004b3c:	6863      	ldr	r3, [r4, #4]
 8004b3e:	6123      	str	r3, [r4, #16]
 8004b40:	2300      	movs	r3, #0
 8004b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b46:	e7a7      	b.n	8004a98 <_printf_i+0x118>
 8004b48:	6923      	ldr	r3, [r4, #16]
 8004b4a:	462a      	mov	r2, r5
 8004b4c:	4639      	mov	r1, r7
 8004b4e:	4630      	mov	r0, r6
 8004b50:	47c0      	blx	r8
 8004b52:	3001      	adds	r0, #1
 8004b54:	d0aa      	beq.n	8004aac <_printf_i+0x12c>
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	079b      	lsls	r3, r3, #30
 8004b5a:	d413      	bmi.n	8004b84 <_printf_i+0x204>
 8004b5c:	68e0      	ldr	r0, [r4, #12]
 8004b5e:	9b03      	ldr	r3, [sp, #12]
 8004b60:	4298      	cmp	r0, r3
 8004b62:	bfb8      	it	lt
 8004b64:	4618      	movlt	r0, r3
 8004b66:	e7a3      	b.n	8004ab0 <_printf_i+0x130>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	464a      	mov	r2, r9
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	4630      	mov	r0, r6
 8004b70:	47c0      	blx	r8
 8004b72:	3001      	adds	r0, #1
 8004b74:	d09a      	beq.n	8004aac <_printf_i+0x12c>
 8004b76:	3501      	adds	r5, #1
 8004b78:	68e3      	ldr	r3, [r4, #12]
 8004b7a:	9a03      	ldr	r2, [sp, #12]
 8004b7c:	1a9b      	subs	r3, r3, r2
 8004b7e:	42ab      	cmp	r3, r5
 8004b80:	dcf2      	bgt.n	8004b68 <_printf_i+0x1e8>
 8004b82:	e7eb      	b.n	8004b5c <_printf_i+0x1dc>
 8004b84:	2500      	movs	r5, #0
 8004b86:	f104 0919 	add.w	r9, r4, #25
 8004b8a:	e7f5      	b.n	8004b78 <_printf_i+0x1f8>
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1ac      	bne.n	8004aea <_printf_i+0x16a>
 8004b90:	7803      	ldrb	r3, [r0, #0]
 8004b92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b9a:	e76c      	b.n	8004a76 <_printf_i+0xf6>
 8004b9c:	08004f8d 	.word	0x08004f8d
 8004ba0:	08004f9e 	.word	0x08004f9e

08004ba4 <_sbrk_r>:
 8004ba4:	b538      	push	{r3, r4, r5, lr}
 8004ba6:	4c06      	ldr	r4, [pc, #24]	; (8004bc0 <_sbrk_r+0x1c>)
 8004ba8:	2300      	movs	r3, #0
 8004baa:	4605      	mov	r5, r0
 8004bac:	4608      	mov	r0, r1
 8004bae:	6023      	str	r3, [r4, #0]
 8004bb0:	f7fc f8f0 	bl	8000d94 <_sbrk>
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	d102      	bne.n	8004bbe <_sbrk_r+0x1a>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	b103      	cbz	r3, 8004bbe <_sbrk_r+0x1a>
 8004bbc:	602b      	str	r3, [r5, #0]
 8004bbe:	bd38      	pop	{r3, r4, r5, pc}
 8004bc0:	20000134 	.word	0x20000134

08004bc4 <__sread>:
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bcc:	f000 f8d6 	bl	8004d7c <_read_r>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	bfab      	itete	ge
 8004bd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8004bd8:	181b      	addge	r3, r3, r0
 8004bda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bde:	bfac      	ite	ge
 8004be0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004be2:	81a3      	strhlt	r3, [r4, #12]
 8004be4:	bd10      	pop	{r4, pc}

08004be6 <__swrite>:
 8004be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bea:	461f      	mov	r7, r3
 8004bec:	898b      	ldrh	r3, [r1, #12]
 8004bee:	05db      	lsls	r3, r3, #23
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	4616      	mov	r6, r2
 8004bf6:	d505      	bpl.n	8004c04 <__swrite+0x1e>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c00:	f000 f868 	bl	8004cd4 <_lseek_r>
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	4632      	mov	r2, r6
 8004c12:	463b      	mov	r3, r7
 8004c14:	4628      	mov	r0, r5
 8004c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1a:	f000 b817 	b.w	8004c4c <_write_r>

08004c1e <__sseek>:
 8004c1e:	b510      	push	{r4, lr}
 8004c20:	460c      	mov	r4, r1
 8004c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c26:	f000 f855 	bl	8004cd4 <_lseek_r>
 8004c2a:	1c43      	adds	r3, r0, #1
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	bf15      	itete	ne
 8004c30:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c3a:	81a3      	strheq	r3, [r4, #12]
 8004c3c:	bf18      	it	ne
 8004c3e:	81a3      	strhne	r3, [r4, #12]
 8004c40:	bd10      	pop	{r4, pc}

08004c42 <__sclose>:
 8004c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c46:	f000 b813 	b.w	8004c70 <_close_r>
	...

08004c4c <_write_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4c07      	ldr	r4, [pc, #28]	; (8004c6c <_write_r+0x20>)
 8004c50:	4605      	mov	r5, r0
 8004c52:	4608      	mov	r0, r1
 8004c54:	4611      	mov	r1, r2
 8004c56:	2200      	movs	r2, #0
 8004c58:	6022      	str	r2, [r4, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f7fc f849 	bl	8000cf2 <_write>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d102      	bne.n	8004c6a <_write_r+0x1e>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	b103      	cbz	r3, 8004c6a <_write_r+0x1e>
 8004c68:	602b      	str	r3, [r5, #0]
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	20000134 	.word	0x20000134

08004c70 <_close_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	4c06      	ldr	r4, [pc, #24]	; (8004c8c <_close_r+0x1c>)
 8004c74:	2300      	movs	r3, #0
 8004c76:	4605      	mov	r5, r0
 8004c78:	4608      	mov	r0, r1
 8004c7a:	6023      	str	r3, [r4, #0]
 8004c7c:	f7fc f855 	bl	8000d2a <_close>
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	d102      	bne.n	8004c8a <_close_r+0x1a>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	b103      	cbz	r3, 8004c8a <_close_r+0x1a>
 8004c88:	602b      	str	r3, [r5, #0]
 8004c8a:	bd38      	pop	{r3, r4, r5, pc}
 8004c8c:	20000134 	.word	0x20000134

08004c90 <_fstat_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	4c07      	ldr	r4, [pc, #28]	; (8004cb0 <_fstat_r+0x20>)
 8004c94:	2300      	movs	r3, #0
 8004c96:	4605      	mov	r5, r0
 8004c98:	4608      	mov	r0, r1
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	f7fc f850 	bl	8000d42 <_fstat>
 8004ca2:	1c43      	adds	r3, r0, #1
 8004ca4:	d102      	bne.n	8004cac <_fstat_r+0x1c>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	b103      	cbz	r3, 8004cac <_fstat_r+0x1c>
 8004caa:	602b      	str	r3, [r5, #0]
 8004cac:	bd38      	pop	{r3, r4, r5, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000134 	.word	0x20000134

08004cb4 <_isatty_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4c06      	ldr	r4, [pc, #24]	; (8004cd0 <_isatty_r+0x1c>)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	4605      	mov	r5, r0
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	6023      	str	r3, [r4, #0]
 8004cc0:	f7fc f84f 	bl	8000d62 <_isatty>
 8004cc4:	1c43      	adds	r3, r0, #1
 8004cc6:	d102      	bne.n	8004cce <_isatty_r+0x1a>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	b103      	cbz	r3, 8004cce <_isatty_r+0x1a>
 8004ccc:	602b      	str	r3, [r5, #0]
 8004cce:	bd38      	pop	{r3, r4, r5, pc}
 8004cd0:	20000134 	.word	0x20000134

08004cd4 <_lseek_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	4c07      	ldr	r4, [pc, #28]	; (8004cf4 <_lseek_r+0x20>)
 8004cd8:	4605      	mov	r5, r0
 8004cda:	4608      	mov	r0, r1
 8004cdc:	4611      	mov	r1, r2
 8004cde:	2200      	movs	r2, #0
 8004ce0:	6022      	str	r2, [r4, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f7fc f848 	bl	8000d78 <_lseek>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d102      	bne.n	8004cf2 <_lseek_r+0x1e>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	b103      	cbz	r3, 8004cf2 <_lseek_r+0x1e>
 8004cf0:	602b      	str	r3, [r5, #0]
 8004cf2:	bd38      	pop	{r3, r4, r5, pc}
 8004cf4:	20000134 	.word	0x20000134

08004cf8 <memmove>:
 8004cf8:	4288      	cmp	r0, r1
 8004cfa:	b510      	push	{r4, lr}
 8004cfc:	eb01 0302 	add.w	r3, r1, r2
 8004d00:	d807      	bhi.n	8004d12 <memmove+0x1a>
 8004d02:	1e42      	subs	r2, r0, #1
 8004d04:	4299      	cmp	r1, r3
 8004d06:	d00a      	beq.n	8004d1e <memmove+0x26>
 8004d08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d0c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004d10:	e7f8      	b.n	8004d04 <memmove+0xc>
 8004d12:	4283      	cmp	r3, r0
 8004d14:	d9f5      	bls.n	8004d02 <memmove+0xa>
 8004d16:	1881      	adds	r1, r0, r2
 8004d18:	1ad2      	subs	r2, r2, r3
 8004d1a:	42d3      	cmn	r3, r2
 8004d1c:	d100      	bne.n	8004d20 <memmove+0x28>
 8004d1e:	bd10      	pop	{r4, pc}
 8004d20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d24:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004d28:	e7f7      	b.n	8004d1a <memmove+0x22>

08004d2a <__malloc_lock>:
 8004d2a:	4770      	bx	lr

08004d2c <__malloc_unlock>:
 8004d2c:	4770      	bx	lr

08004d2e <_realloc_r>:
 8004d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d30:	4607      	mov	r7, r0
 8004d32:	4614      	mov	r4, r2
 8004d34:	460e      	mov	r6, r1
 8004d36:	b921      	cbnz	r1, 8004d42 <_realloc_r+0x14>
 8004d38:	4611      	mov	r1, r2
 8004d3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d3e:	f7ff babd 	b.w	80042bc <_malloc_r>
 8004d42:	b922      	cbnz	r2, 8004d4e <_realloc_r+0x20>
 8004d44:	f7ff fa6c 	bl	8004220 <_free_r>
 8004d48:	4625      	mov	r5, r4
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d4e:	f000 f827 	bl	8004da0 <_malloc_usable_size_r>
 8004d52:	42a0      	cmp	r0, r4
 8004d54:	d20f      	bcs.n	8004d76 <_realloc_r+0x48>
 8004d56:	4621      	mov	r1, r4
 8004d58:	4638      	mov	r0, r7
 8004d5a:	f7ff faaf 	bl	80042bc <_malloc_r>
 8004d5e:	4605      	mov	r5, r0
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d0f2      	beq.n	8004d4a <_realloc_r+0x1c>
 8004d64:	4631      	mov	r1, r6
 8004d66:	4622      	mov	r2, r4
 8004d68:	f7fe ff0c 	bl	8003b84 <memcpy>
 8004d6c:	4631      	mov	r1, r6
 8004d6e:	4638      	mov	r0, r7
 8004d70:	f7ff fa56 	bl	8004220 <_free_r>
 8004d74:	e7e9      	b.n	8004d4a <_realloc_r+0x1c>
 8004d76:	4635      	mov	r5, r6
 8004d78:	e7e7      	b.n	8004d4a <_realloc_r+0x1c>
	...

08004d7c <_read_r>:
 8004d7c:	b538      	push	{r3, r4, r5, lr}
 8004d7e:	4c07      	ldr	r4, [pc, #28]	; (8004d9c <_read_r+0x20>)
 8004d80:	4605      	mov	r5, r0
 8004d82:	4608      	mov	r0, r1
 8004d84:	4611      	mov	r1, r2
 8004d86:	2200      	movs	r2, #0
 8004d88:	6022      	str	r2, [r4, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f7fb ff94 	bl	8000cb8 <_read>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d102      	bne.n	8004d9a <_read_r+0x1e>
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	b103      	cbz	r3, 8004d9a <_read_r+0x1e>
 8004d98:	602b      	str	r3, [r5, #0]
 8004d9a:	bd38      	pop	{r3, r4, r5, pc}
 8004d9c:	20000134 	.word	0x20000134

08004da0 <_malloc_usable_size_r>:
 8004da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da4:	1f18      	subs	r0, r3, #4
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bfbc      	itt	lt
 8004daa:	580b      	ldrlt	r3, [r1, r0]
 8004dac:	18c0      	addlt	r0, r0, r3
 8004dae:	4770      	bx	lr

08004db0 <_init>:
 8004db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db2:	bf00      	nop
 8004db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db6:	bc08      	pop	{r3}
 8004db8:	469e      	mov	lr, r3
 8004dba:	4770      	bx	lr

08004dbc <_fini>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	bf00      	nop
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr
