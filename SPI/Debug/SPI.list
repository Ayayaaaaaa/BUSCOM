
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032f4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080034b8  080034b8  000134b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034d0  080034d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080034d0  080034d0  000134d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034d8  080034d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034d8  080034d8  000134d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034dc  080034dc  000134dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  080034ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080034ec  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009676  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018e2  00000000  00000000  000296b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000918  00000000  00000000  0002af98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000840  00000000  00000000  0002b8b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000208b0  00000000  00000000  0002c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c81  00000000  00000000  0004c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5a2e  00000000  00000000  00054621  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011a04f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002480  00000000  00000000  0011a0cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080034a0 	.word	0x080034a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080034a0 	.word	0x080034a0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08e      	sub	sp, #56	; 0x38
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fad3 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f825 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8f1 	bl	80006f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f8c5 	bl	80006a4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800051a:	f000 f88d 	bl	8000638 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SX1272_Init();
 800051e:	f002 fe7f 	bl	8003220 <SX1272_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t u8RCVLen = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t au8RxBuffer[50];
  au8RxBuffer[0] = 0; //! using byte 0 as a flag
 8000528:	2300      	movs	r3, #0
 800052a:	713b      	strb	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	u8RCVLen = SX1272_Receive(au8RxBuffer);
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	4618      	mov	r0, r3
 8000530:	f002 ff32 	bl	8003398 <SX1272_Receive>
 8000534:	4603      	mov	r3, r0
 8000536:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if(au8RxBuffer[0] != 0) {
 800053a:	793b      	ldrb	r3, [r7, #4]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d0f5      	beq.n	800052c <main+0x28>
	  HAL_UART_Transmit(&huart2, au8RxBuffer, u8RCVLen, HAL_MAX_DELAY);
 8000540:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000544:	b29a      	uxth	r2, r3
 8000546:	1d39      	adds	r1, r7, #4
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
 800054c:	4802      	ldr	r0, [pc, #8]	; (8000558 <main+0x54>)
 800054e:	f002 fa08 	bl	8002962 <HAL_UART_Transmit>
	  au8RxBuffer[0] = 0; //! using byte 0 as a flag
 8000552:	2300      	movs	r3, #0
 8000554:	713b      	strb	r3, [r7, #4]
	u8RCVLen = SX1272_Receive(au8RxBuffer);
 8000556:	e7e9      	b.n	800052c <main+0x28>
 8000558:	20000080 	.word	0x20000080

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	2234      	movs	r2, #52	; 0x34
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f002 ff90 	bl	8003490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <SystemClock_Config+0xd4>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a29      	ldr	r2, [pc, #164]	; (8000630 <SystemClock_Config+0xd4>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <SystemClock_Config+0xd4>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800059c:	2300      	movs	r3, #0
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	4b24      	ldr	r3, [pc, #144]	; (8000634 <SystemClock_Config+0xd8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a8:	4a22      	ldr	r2, [pc, #136]	; (8000634 <SystemClock_Config+0xd8>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b20      	ldr	r3, [pc, #128]	; (8000634 <SystemClock_Config+0xd8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005d0:	2310      	movs	r3, #16
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 308;
 80005d4:	f44f 739a 	mov.w	r3, #308	; 0x134
 80005d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005da:	2304      	movs	r3, #4
 80005dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 f890 	bl	8001710 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005f6:	f000 f91d 	bl	8000834 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2302      	movs	r3, #2
 8000600:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2102      	movs	r1, #2
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fdc0 	bl	800119c <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000622:	f000 f907 	bl	8000834 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_SPI1_Init+0x64>)
 800063e:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <MX_SPI1_Init+0x68>)
 8000640:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_SPI1_Init+0x64>)
 8000644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000648:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_SPI1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_SPI1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_SPI1_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_SPI1_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_SPI1_Init+0x64>)
 8000664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000668:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_SPI1_Init+0x64>)
 800066c:	2210      	movs	r2, #16
 800066e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MX_SPI1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_SPI1_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_SPI1_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_SPI1_Init+0x64>)
 8000684:	220a      	movs	r2, #10
 8000686:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_SPI1_Init+0x64>)
 800068a:	f001 fa9b 	bl	8001bc4 <HAL_SPI_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000694:	f000 f8ce 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000028 	.word	0x20000028
 80006a0:	40013000 	.word	0x40013000

080006a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_USART2_UART_Init+0x50>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006dc:	f002 f8f4 	bl	80028c8 <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e6:	f000 f8a5 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000080 	.word	0x20000080
 80006f4:	40004400 	.word	0x40004400

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b43      	ldr	r3, [pc, #268]	; (8000820 <MX_GPIO_Init+0x128>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a42      	ldr	r2, [pc, #264]	; (8000820 <MX_GPIO_Init+0x128>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b40      	ldr	r3, [pc, #256]	; (8000820 <MX_GPIO_Init+0x128>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b3c      	ldr	r3, [pc, #240]	; (8000820 <MX_GPIO_Init+0x128>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a3b      	ldr	r2, [pc, #236]	; (8000820 <MX_GPIO_Init+0x128>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b39      	ldr	r3, [pc, #228]	; (8000820 <MX_GPIO_Init+0x128>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b35      	ldr	r3, [pc, #212]	; (8000820 <MX_GPIO_Init+0x128>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a34      	ldr	r2, [pc, #208]	; (8000820 <MX_GPIO_Init+0x128>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b32      	ldr	r3, [pc, #200]	; (8000820 <MX_GPIO_Init+0x128>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <MX_GPIO_Init+0x128>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a2d      	ldr	r2, [pc, #180]	; (8000820 <MX_GPIO_Init+0x128>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <MX_GPIO_Init+0x128>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2101      	movs	r1, #1
 8000782:	4828      	ldr	r0, [pc, #160]	; (8000824 <MX_GPIO_Init+0x12c>)
 8000784:	f000 fcf0 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2140      	movs	r1, #64	; 0x40
 800078c:	4826      	ldr	r0, [pc, #152]	; (8000828 <MX_GPIO_Init+0x130>)
 800078e:	f000 fceb 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <MX_GPIO_Init+0x134>)
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	4822      	ldr	r0, [pc, #136]	; (8000830 <MX_GPIO_Init+0x138>)
 80007a8:	f000 fb4c 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80007ac:	2301      	movs	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4818      	ldr	r0, [pc, #96]	; (8000824 <MX_GPIO_Init+0x12c>)
 80007c4:	f000 fb3e 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80007c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	4811      	ldr	r0, [pc, #68]	; (8000824 <MX_GPIO_Init+0x12c>)
 80007de:	f000 fb31 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO1_Pin DIO3_Pin DIO2_Pin */
  GPIO_InitStruct.Pin = DIO1_Pin|DIO3_Pin|DIO2_Pin;
 80007e2:	2338      	movs	r3, #56	; 0x38
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <MX_GPIO_Init+0x130>)
 80007f6:	f000 fb25 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80007fa:	2340      	movs	r3, #64	; 0x40
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_GPIO_Init+0x130>)
 8000812:	f000 fb17 	bl	8000e44 <HAL_GPIO_Init>

}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	; 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000
 8000828:	40020400 	.word	0x40020400
 800082c:	10210000 	.word	0x10210000
 8000830:	40020800 	.word	0x40020800

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <HAL_MspInit+0x4c>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x4c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000882:	2007      	movs	r0, #7
 8000884:	f000 fa7a 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a1d      	ldr	r2, [pc, #116]	; (8000928 <HAL_SPI_MspInit+0x94>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d133      	bne.n	800091e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <HAL_SPI_MspInit+0x98>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a1b      	ldr	r2, [pc, #108]	; (800092c <HAL_SPI_MspInit+0x98>)
 80008c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <HAL_SPI_MspInit+0x98>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_SPI_MspInit+0x98>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <HAL_SPI_MspInit+0x98>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_SPI_MspInit+0x98>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 80008ee:	23e0      	movs	r3, #224	; 0xe0
 80008f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008fe:	2305      	movs	r3, #5
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <HAL_SPI_MspInit+0x9c>)
 800090a:	f000 fa9b 	bl	8000e44 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	2023      	movs	r0, #35	; 0x23
 8000914:	f000 fa3d 	bl	8000d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000918:	2023      	movs	r0, #35	; 0x23
 800091a:	f000 fa56 	bl	8000dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	; 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40013000 	.word	0x40013000
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a19      	ldr	r2, [pc, #100]	; (80009b8 <HAL_UART_MspInit+0x84>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d12b      	bne.n	80009ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_UART_MspInit+0x88>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <HAL_UART_MspInit+0x88>)
 8000960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_UART_MspInit+0x88>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <HAL_UART_MspInit+0x88>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a10      	ldr	r2, [pc, #64]	; (80009bc <HAL_UART_MspInit+0x88>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_UART_MspInit+0x88>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800098e:	230c      	movs	r3, #12
 8000990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800099e:	2307      	movs	r3, #7
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <HAL_UART_MspInit+0x8c>)
 80009aa:	f000 fa4b 	bl	8000e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	3728      	adds	r7, #40	; 0x28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40004400 	.word	0x40004400
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020000 	.word	0x40020000

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a18:	f000 f89e 	bl	8000b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <SPI1_IRQHandler+0x10>)
 8000a26:	f001 fd11 	bl	800244c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000028 	.word	0x20000028

08000a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <SystemInit+0x28>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <SystemInit+0x28>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SystemInit+0x28>)
 8000a4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a66:	e003      	b.n	8000a70 <LoopCopyDataInit>

08000a68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a6e:	3104      	adds	r1, #4

08000a70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a78:	d3f6      	bcc.n	8000a68 <CopyDataInit>
  ldr  r2, =_sbss
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a7c:	e002      	b.n	8000a84 <LoopFillZerobss>

08000a7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a80:	f842 3b04 	str.w	r3, [r2], #4

08000a84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a88:	d3f9      	bcc.n	8000a7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a8a:	f7ff ffd3 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f002 fcdb 	bl	8003448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a92:	f7ff fd37 	bl	8000504 <main>
  bx  lr    
 8000a96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a9c:	080034e0 	.word	0x080034e0
  ldr  r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000aa4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000aa8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000aac:	200000c4 	.word	0x200000c4

08000ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <HAL_Init+0x40>)
 8000abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_Init+0x40>)
 8000aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_Init+0x40>)
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f94d 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 f808 	bl	8000af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae8:	f7ff feac 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023c00 	.word	0x40023c00

08000af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_InitTick+0x54>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_InitTick+0x58>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f965 	bl	8000de6 <HAL_SYSTICK_Config>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00e      	b.n	8000b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	d80a      	bhi.n	8000b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f000 f92d 	bl	8000d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b38:	4a06      	ldr	r2, [pc, #24]	; (8000b54 <HAL_InitTick+0x5c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e000      	b.n	8000b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000004 	.word	0x20000004

08000b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x20>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x24>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_IncTick+0x24>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	200000c0 	.word	0x200000c0

08000b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <HAL_GetTick+0x14>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	200000c0 	.word	0x200000c0

08000b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba0:	f7ff ffee 	bl	8000b80 <HAL_GetTick>
 8000ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb0:	d005      	beq.n	8000bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_Delay+0x40>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4413      	add	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bbe:	bf00      	nop
 8000bc0:	f7ff ffde 	bl	8000b80 <HAL_GetTick>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d8f7      	bhi.n	8000bc0 <HAL_Delay+0x28>
  {
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000008 	.word	0x20000008

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	; (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f7ff ff8e 	bl	8000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff29 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff3e 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff8e 	bl	8000cd0 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5d 	bl	8000c7c <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff31 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffa2 	bl	8000d38 <SysTick_Config>
 8000df4:	4603      	mov	r3, r0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d004      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e00c      	b.n	8000e36 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2205      	movs	r2, #5
 8000e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 0201 	bic.w	r2, r2, #1
 8000e32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	e165      	b.n	800112c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e60:	2201      	movs	r2, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f040 8154 	bne.w	8001126 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d00b      	beq.n	8000e9e <HAL_GPIO_Init+0x5a>
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d007      	beq.n	8000e9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e92:	2b11      	cmp	r3, #17
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b12      	cmp	r3, #18
 8000e9c:	d130      	bne.n	8000f00 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	68da      	ldr	r2, [r3, #12]
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	091b      	lsrs	r3, r3, #4
 8000eea:	f003 0201 	and.w	r2, r3, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0xfc>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b12      	cmp	r3, #18
 8000f3e:	d123      	bne.n	8000f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	08da      	lsrs	r2, r3, #3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3208      	adds	r2, #8
 8000f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	220f      	movs	r2, #15
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	691a      	ldr	r2, [r3, #16]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	08da      	lsrs	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3208      	adds	r2, #8
 8000f82:	69b9      	ldr	r1, [r7, #24]
 8000f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0203 	and.w	r2, r3, #3
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 80ae 	beq.w	8001126 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b5c      	ldr	r3, [pc, #368]	; (8001140 <HAL_GPIO_Init+0x2fc>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a5b      	ldr	r2, [pc, #364]	; (8001140 <HAL_GPIO_Init+0x2fc>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b59      	ldr	r3, [pc, #356]	; (8001140 <HAL_GPIO_Init+0x2fc>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe6:	4a57      	ldr	r2, [pc, #348]	; (8001144 <HAL_GPIO_Init+0x300>)
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	3302      	adds	r3, #2
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4e      	ldr	r2, [pc, #312]	; (8001148 <HAL_GPIO_Init+0x304>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x21a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4d      	ldr	r2, [pc, #308]	; (800114c <HAL_GPIO_Init+0x308>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x216>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4c      	ldr	r2, [pc, #304]	; (8001150 <HAL_GPIO_Init+0x30c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x212>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4b      	ldr	r2, [pc, #300]	; (8001154 <HAL_GPIO_Init+0x310>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x20e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4a      	ldr	r2, [pc, #296]	; (8001158 <HAL_GPIO_Init+0x314>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x20a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a49      	ldr	r2, [pc, #292]	; (800115c <HAL_GPIO_Init+0x318>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x206>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a48      	ldr	r2, [pc, #288]	; (8001160 <HAL_GPIO_Init+0x31c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x202>
 8001042:	2306      	movs	r3, #6
 8001044:	e00c      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 8001046:	2307      	movs	r3, #7
 8001048:	e00a      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 800104a:	2305      	movs	r3, #5
 800104c:	e008      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 800104e:	2304      	movs	r3, #4
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 8001052:	2303      	movs	r3, #3
 8001054:	e004      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 8001056:	2302      	movs	r3, #2
 8001058:	e002      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 800105e:	2300      	movs	r3, #0
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	f002 0203 	and.w	r2, r2, #3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4093      	lsls	r3, r2
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001070:	4934      	ldr	r1, [pc, #208]	; (8001144 <HAL_GPIO_Init+0x300>)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800107e:	4b39      	ldr	r3, [pc, #228]	; (8001164 <HAL_GPIO_Init+0x320>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a2:	4a30      	ldr	r2, [pc, #192]	; (8001164 <HAL_GPIO_Init+0x320>)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010a8:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <HAL_GPIO_Init+0x320>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010cc:	4a25      	ldr	r2, [pc, #148]	; (8001164 <HAL_GPIO_Init+0x320>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d2:	4b24      	ldr	r3, [pc, #144]	; (8001164 <HAL_GPIO_Init+0x320>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010f6:	4a1b      	ldr	r2, [pc, #108]	; (8001164 <HAL_GPIO_Init+0x320>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_GPIO_Init+0x320>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001120:	4a10      	ldr	r2, [pc, #64]	; (8001164 <HAL_GPIO_Init+0x320>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3301      	adds	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	2b0f      	cmp	r3, #15
 8001130:	f67f ae96 	bls.w	8000e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001134:	bf00      	nop
 8001136:	3724      	adds	r7, #36	; 0x24
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	40023800 	.word	0x40023800
 8001144:	40013800 	.word	0x40013800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020400 	.word	0x40020400
 8001150:	40020800 	.word	0x40020800
 8001154:	40020c00 	.word	0x40020c00
 8001158:	40021000 	.word	0x40021000
 800115c:	40021400 	.word	0x40021400
 8001160:	40021800 	.word	0x40021800
 8001164:	40013c00 	.word	0x40013c00

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001184:	e003      	b.n	800118e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	041a      	lsls	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	619a      	str	r2, [r3, #24]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e0cc      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011b0:	4b68      	ldr	r3, [pc, #416]	; (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 030f 	and.w	r3, r3, #15
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d90c      	bls.n	80011d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011be:	4b65      	ldr	r3, [pc, #404]	; (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c6:	4b63      	ldr	r3, [pc, #396]	; (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d001      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e0b8      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d020      	beq.n	8001226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011f0:	4b59      	ldr	r3, [pc, #356]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4a58      	ldr	r2, [pc, #352]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001208:	4b53      	ldr	r3, [pc, #332]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4a52      	ldr	r2, [pc, #328]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800120e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001214:	4b50      	ldr	r3, [pc, #320]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	494d      	ldr	r1, [pc, #308]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	4313      	orrs	r3, r2
 8001224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d044      	beq.n	80012bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d107      	bne.n	800124a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	4b47      	ldr	r3, [pc, #284]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d119      	bne.n	800127a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e07f      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d003      	beq.n	800125a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001256:	2b03      	cmp	r3, #3
 8001258:	d107      	bne.n	800126a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800125a:	4b3f      	ldr	r3, [pc, #252]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d109      	bne.n	800127a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e06f      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126a:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e067      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f023 0203 	bic.w	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4934      	ldr	r1, [pc, #208]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 8001288:	4313      	orrs	r3, r2
 800128a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800128c:	f7ff fc78 	bl	8000b80 <HAL_GetTick>
 8001290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001292:	e00a      	b.n	80012aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001294:	f7ff fc74 	bl	8000b80 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e04f      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012aa:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 020c 	and.w	r2, r3, #12
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d1eb      	bne.n	8001294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012bc:	4b25      	ldr	r3, [pc, #148]	; (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d20c      	bcs.n	80012e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d001      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e032      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d008      	beq.n	8001302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	4916      	ldr	r1, [pc, #88]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d009      	beq.n	8001322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	490e      	ldr	r1, [pc, #56]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	4313      	orrs	r3, r2
 8001320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001322:	f000 f855 	bl	80013d0 <HAL_RCC_GetSysClockFreq>
 8001326:	4601      	mov	r1, r0
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <HAL_RCC_ClockConfig+0x1c0>)
 8001334:	5cd3      	ldrb	r3, [r2, r3]
 8001336:	fa21 f303 	lsr.w	r3, r1, r3
 800133a:	4a09      	ldr	r2, [pc, #36]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HAL_RCC_ClockConfig+0x1c8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fbd8 	bl	8000af8 <HAL_InitTick>

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023c00 	.word	0x40023c00
 8001358:	40023800 	.word	0x40023800
 800135c:	080034b8 	.word	0x080034b8
 8001360:	20000000 	.word	0x20000000
 8001364:	20000004 	.word	0x20000004

08001368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_RCC_GetHCLKFreq+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000000 	.word	0x20000000

08001380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001384:	f7ff fff0 	bl	8001368 <HAL_RCC_GetHCLKFreq>
 8001388:	4601      	mov	r1, r0
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	0a9b      	lsrs	r3, r3, #10
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	4a03      	ldr	r2, [pc, #12]	; (80013a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	fa21 f303 	lsr.w	r3, r1, r3
}
 800139c:	4618      	mov	r0, r3
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40023800 	.word	0x40023800
 80013a4:	080034c8 	.word	0x080034c8

080013a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013ac:	f7ff ffdc 	bl	8001368 <HAL_RCC_GetHCLKFreq>
 80013b0:	4601      	mov	r1, r0
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	0b5b      	lsrs	r3, r3, #13
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	4a03      	ldr	r2, [pc, #12]	; (80013cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80013be:	5cd3      	ldrb	r3, [r2, r3]
 80013c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40023800 	.word	0x40023800
 80013cc:	080034c8 	.word	0x080034c8

080013d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013ea:	4bc6      	ldr	r3, [pc, #792]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	f200 817e 	bhi.w	80016f4 <HAL_RCC_GetSysClockFreq+0x324>
 80013f8:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <HAL_RCC_GetSysClockFreq+0x30>)
 80013fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fe:	bf00      	nop
 8001400:	08001435 	.word	0x08001435
 8001404:	080016f5 	.word	0x080016f5
 8001408:	080016f5 	.word	0x080016f5
 800140c:	080016f5 	.word	0x080016f5
 8001410:	0800143b 	.word	0x0800143b
 8001414:	080016f5 	.word	0x080016f5
 8001418:	080016f5 	.word	0x080016f5
 800141c:	080016f5 	.word	0x080016f5
 8001420:	08001441 	.word	0x08001441
 8001424:	080016f5 	.word	0x080016f5
 8001428:	080016f5 	.word	0x080016f5
 800142c:	080016f5 	.word	0x080016f5
 8001430:	0800159d 	.word	0x0800159d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001434:	4bb4      	ldr	r3, [pc, #720]	; (8001708 <HAL_RCC_GetSysClockFreq+0x338>)
 8001436:	613b      	str	r3, [r7, #16]
       break;
 8001438:	e15f      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800143a:	4bb4      	ldr	r3, [pc, #720]	; (800170c <HAL_RCC_GetSysClockFreq+0x33c>)
 800143c:	613b      	str	r3, [r7, #16]
      break;
 800143e:	e15c      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001440:	4bb0      	ldr	r3, [pc, #704]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001448:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800144a:	4bae      	ldr	r3, [pc, #696]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d04a      	beq.n	80014ec <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001456:	4bab      	ldr	r3, [pc, #684]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	099b      	lsrs	r3, r3, #6
 800145c:	f04f 0400 	mov.w	r4, #0
 8001460:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	ea03 0501 	and.w	r5, r3, r1
 800146c:	ea04 0602 	and.w	r6, r4, r2
 8001470:	4629      	mov	r1, r5
 8001472:	4632      	mov	r2, r6
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	f04f 0400 	mov.w	r4, #0
 800147c:	0154      	lsls	r4, r2, #5
 800147e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001482:	014b      	lsls	r3, r1, #5
 8001484:	4619      	mov	r1, r3
 8001486:	4622      	mov	r2, r4
 8001488:	1b49      	subs	r1, r1, r5
 800148a:	eb62 0206 	sbc.w	r2, r2, r6
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	f04f 0400 	mov.w	r4, #0
 8001496:	0194      	lsls	r4, r2, #6
 8001498:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800149c:	018b      	lsls	r3, r1, #6
 800149e:	1a5b      	subs	r3, r3, r1
 80014a0:	eb64 0402 	sbc.w	r4, r4, r2
 80014a4:	f04f 0100 	mov.w	r1, #0
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	00e2      	lsls	r2, r4, #3
 80014ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80014b2:	00d9      	lsls	r1, r3, #3
 80014b4:	460b      	mov	r3, r1
 80014b6:	4614      	mov	r4, r2
 80014b8:	195b      	adds	r3, r3, r5
 80014ba:	eb44 0406 	adc.w	r4, r4, r6
 80014be:	f04f 0100 	mov.w	r1, #0
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	0262      	lsls	r2, r4, #9
 80014c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80014cc:	0259      	lsls	r1, r3, #9
 80014ce:	460b      	mov	r3, r1
 80014d0:	4614      	mov	r4, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	4621      	mov	r1, r4
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f04f 0400 	mov.w	r4, #0
 80014dc:	461a      	mov	r2, r3
 80014de:	4623      	mov	r3, r4
 80014e0:	f7fe fe90 	bl	8000204 <__aeabi_uldivmod>
 80014e4:	4603      	mov	r3, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	e049      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ec:	4b85      	ldr	r3, [pc, #532]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	099b      	lsrs	r3, r3, #6
 80014f2:	f04f 0400 	mov.w	r4, #0
 80014f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	ea03 0501 	and.w	r5, r3, r1
 8001502:	ea04 0602 	and.w	r6, r4, r2
 8001506:	4629      	mov	r1, r5
 8001508:	4632      	mov	r2, r6
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	f04f 0400 	mov.w	r4, #0
 8001512:	0154      	lsls	r4, r2, #5
 8001514:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001518:	014b      	lsls	r3, r1, #5
 800151a:	4619      	mov	r1, r3
 800151c:	4622      	mov	r2, r4
 800151e:	1b49      	subs	r1, r1, r5
 8001520:	eb62 0206 	sbc.w	r2, r2, r6
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	f04f 0400 	mov.w	r4, #0
 800152c:	0194      	lsls	r4, r2, #6
 800152e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001532:	018b      	lsls	r3, r1, #6
 8001534:	1a5b      	subs	r3, r3, r1
 8001536:	eb64 0402 	sbc.w	r4, r4, r2
 800153a:	f04f 0100 	mov.w	r1, #0
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	00e2      	lsls	r2, r4, #3
 8001544:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001548:	00d9      	lsls	r1, r3, #3
 800154a:	460b      	mov	r3, r1
 800154c:	4614      	mov	r4, r2
 800154e:	195b      	adds	r3, r3, r5
 8001550:	eb44 0406 	adc.w	r4, r4, r6
 8001554:	f04f 0100 	mov.w	r1, #0
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	02a2      	lsls	r2, r4, #10
 800155e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001562:	0299      	lsls	r1, r3, #10
 8001564:	460b      	mov	r3, r1
 8001566:	4614      	mov	r4, r2
 8001568:	4618      	mov	r0, r3
 800156a:	4621      	mov	r1, r4
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f04f 0400 	mov.w	r4, #0
 8001572:	461a      	mov	r2, r3
 8001574:	4623      	mov	r3, r4
 8001576:	f7fe fe45 	bl	8000204 <__aeabi_uldivmod>
 800157a:	4603      	mov	r3, r0
 800157c:	460c      	mov	r4, r1
 800157e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001580:	4b60      	ldr	r3, [pc, #384]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	0c1b      	lsrs	r3, r3, #16
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	3301      	adds	r3, #1
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	fbb2 f3f3 	udiv	r3, r2, r3
 8001598:	613b      	str	r3, [r7, #16]
      break;
 800159a:	e0ae      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800159c:	4b59      	ldr	r3, [pc, #356]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015a4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015a6:	4b57      	ldr	r3, [pc, #348]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d04a      	beq.n	8001648 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b2:	4b54      	ldr	r3, [pc, #336]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	099b      	lsrs	r3, r3, #6
 80015b8:	f04f 0400 	mov.w	r4, #0
 80015bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	ea03 0501 	and.w	r5, r3, r1
 80015c8:	ea04 0602 	and.w	r6, r4, r2
 80015cc:	4629      	mov	r1, r5
 80015ce:	4632      	mov	r2, r6
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	f04f 0400 	mov.w	r4, #0
 80015d8:	0154      	lsls	r4, r2, #5
 80015da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015de:	014b      	lsls	r3, r1, #5
 80015e0:	4619      	mov	r1, r3
 80015e2:	4622      	mov	r2, r4
 80015e4:	1b49      	subs	r1, r1, r5
 80015e6:	eb62 0206 	sbc.w	r2, r2, r6
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	f04f 0400 	mov.w	r4, #0
 80015f2:	0194      	lsls	r4, r2, #6
 80015f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015f8:	018b      	lsls	r3, r1, #6
 80015fa:	1a5b      	subs	r3, r3, r1
 80015fc:	eb64 0402 	sbc.w	r4, r4, r2
 8001600:	f04f 0100 	mov.w	r1, #0
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	00e2      	lsls	r2, r4, #3
 800160a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800160e:	00d9      	lsls	r1, r3, #3
 8001610:	460b      	mov	r3, r1
 8001612:	4614      	mov	r4, r2
 8001614:	195b      	adds	r3, r3, r5
 8001616:	eb44 0406 	adc.w	r4, r4, r6
 800161a:	f04f 0100 	mov.w	r1, #0
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	0262      	lsls	r2, r4, #9
 8001624:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001628:	0259      	lsls	r1, r3, #9
 800162a:	460b      	mov	r3, r1
 800162c:	4614      	mov	r4, r2
 800162e:	4618      	mov	r0, r3
 8001630:	4621      	mov	r1, r4
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f04f 0400 	mov.w	r4, #0
 8001638:	461a      	mov	r2, r3
 800163a:	4623      	mov	r3, r4
 800163c:	f7fe fde2 	bl	8000204 <__aeabi_uldivmod>
 8001640:	4603      	mov	r3, r0
 8001642:	460c      	mov	r4, r1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e049      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001648:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	099b      	lsrs	r3, r3, #6
 800164e:	f04f 0400 	mov.w	r4, #0
 8001652:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	ea03 0501 	and.w	r5, r3, r1
 800165e:	ea04 0602 	and.w	r6, r4, r2
 8001662:	4629      	mov	r1, r5
 8001664:	4632      	mov	r2, r6
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	f04f 0400 	mov.w	r4, #0
 800166e:	0154      	lsls	r4, r2, #5
 8001670:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001674:	014b      	lsls	r3, r1, #5
 8001676:	4619      	mov	r1, r3
 8001678:	4622      	mov	r2, r4
 800167a:	1b49      	subs	r1, r1, r5
 800167c:	eb62 0206 	sbc.w	r2, r2, r6
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	f04f 0400 	mov.w	r4, #0
 8001688:	0194      	lsls	r4, r2, #6
 800168a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800168e:	018b      	lsls	r3, r1, #6
 8001690:	1a5b      	subs	r3, r3, r1
 8001692:	eb64 0402 	sbc.w	r4, r4, r2
 8001696:	f04f 0100 	mov.w	r1, #0
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	00e2      	lsls	r2, r4, #3
 80016a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016a4:	00d9      	lsls	r1, r3, #3
 80016a6:	460b      	mov	r3, r1
 80016a8:	4614      	mov	r4, r2
 80016aa:	195b      	adds	r3, r3, r5
 80016ac:	eb44 0406 	adc.w	r4, r4, r6
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	02a2      	lsls	r2, r4, #10
 80016ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016be:	0299      	lsls	r1, r3, #10
 80016c0:	460b      	mov	r3, r1
 80016c2:	4614      	mov	r4, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	4621      	mov	r1, r4
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f04f 0400 	mov.w	r4, #0
 80016ce:	461a      	mov	r2, r3
 80016d0:	4623      	mov	r3, r4
 80016d2:	f7fe fd97 	bl	8000204 <__aeabi_uldivmod>
 80016d6:	4603      	mov	r3, r0
 80016d8:	460c      	mov	r4, r1
 80016da:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	0f1b      	lsrs	r3, r3, #28
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f0:	613b      	str	r3, [r7, #16]
      break;
 80016f2:	e002      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <HAL_RCC_GetSysClockFreq+0x338>)
 80016f6:	613b      	str	r3, [r7, #16]
      break;
 80016f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016fa:	693b      	ldr	r3, [r7, #16]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	00f42400 	.word	0x00f42400
 800170c:	007a1200 	.word	0x007a1200

08001710 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 8083 	beq.w	8001830 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800172a:	4b95      	ldr	r3, [pc, #596]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b04      	cmp	r3, #4
 8001734:	d019      	beq.n	800176a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001736:	4b92      	ldr	r3, [pc, #584]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800173e:	2b08      	cmp	r3, #8
 8001740:	d106      	bne.n	8001750 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001742:	4b8f      	ldr	r3, [pc, #572]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800174e:	d00c      	beq.n	800176a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001750:	4b8b      	ldr	r3, [pc, #556]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001758:	2b0c      	cmp	r3, #12
 800175a:	d112      	bne.n	8001782 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175c:	4b88      	ldr	r3, [pc, #544]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001768:	d10b      	bne.n	8001782 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176a:	4b85      	ldr	r3, [pc, #532]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d05b      	beq.n	800182e <HAL_RCC_OscConfig+0x11e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d157      	bne.n	800182e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e216      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178a:	d106      	bne.n	800179a <HAL_RCC_OscConfig+0x8a>
 800178c:	4b7c      	ldr	r3, [pc, #496]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a7b      	ldr	r2, [pc, #492]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	e01d      	b.n	80017d6 <HAL_RCC_OscConfig+0xc6>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a2:	d10c      	bne.n	80017be <HAL_RCC_OscConfig+0xae>
 80017a4:	4b76      	ldr	r3, [pc, #472]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a75      	ldr	r2, [pc, #468]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b73      	ldr	r3, [pc, #460]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a72      	ldr	r2, [pc, #456]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	e00b      	b.n	80017d6 <HAL_RCC_OscConfig+0xc6>
 80017be:	4b70      	ldr	r3, [pc, #448]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a6f      	ldr	r2, [pc, #444]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b6d      	ldr	r3, [pc, #436]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a6c      	ldr	r2, [pc, #432]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d013      	beq.n	8001806 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017de:	f7ff f9cf 	bl	8000b80 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e6:	f7ff f9cb 	bl	8000b80 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b64      	cmp	r3, #100	; 0x64
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e1db      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f8:	4b61      	ldr	r3, [pc, #388]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0xd6>
 8001804:	e014      	b.n	8001830 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001806:	f7ff f9bb 	bl	8000b80 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800180e:	f7ff f9b7 	bl	8000b80 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b64      	cmp	r3, #100	; 0x64
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e1c7      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001820:	4b57      	ldr	r3, [pc, #348]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f0      	bne.n	800180e <HAL_RCC_OscConfig+0xfe>
 800182c:	e000      	b.n	8001830 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d06f      	beq.n	800191c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800183c:	4b50      	ldr	r3, [pc, #320]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b00      	cmp	r3, #0
 8001846:	d017      	beq.n	8001878 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001848:	4b4d      	ldr	r3, [pc, #308]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001850:	2b08      	cmp	r3, #8
 8001852:	d105      	bne.n	8001860 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001854:	4b4a      	ldr	r3, [pc, #296]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00b      	beq.n	8001878 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001860:	4b47      	ldr	r3, [pc, #284]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001868:	2b0c      	cmp	r3, #12
 800186a:	d11c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186c:	4b44      	ldr	r3, [pc, #272]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d116      	bne.n	80018a6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001878:	4b41      	ldr	r3, [pc, #260]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_OscConfig+0x180>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d001      	beq.n	8001890 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e18f      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4938      	ldr	r1, [pc, #224]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a4:	e03a      	b.n	800191c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d020      	beq.n	80018f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ae:	4b35      	ldr	r3, [pc, #212]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff f964 	bl	8000b80 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018bc:	f7ff f960 	bl	8000b80 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e170      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ce:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4925      	ldr	r1, [pc, #148]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
 80018ee:	e015      	b.n	800191c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f0:	4b24      	ldr	r3, [pc, #144]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff f943 	bl	8000b80 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018fe:	f7ff f93f 	bl	8000b80 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e14f      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f0      	bne.n	80018fe <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d037      	beq.n	8001998 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d016      	beq.n	800195e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <HAL_RCC_OscConfig+0x278>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001936:	f7ff f923 	bl	8000b80 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193e:	f7ff f91f 	bl	8000b80 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e12f      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x22e>
 800195c:	e01c      	b.n	8001998 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_RCC_OscConfig+0x278>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001964:	f7ff f90c 	bl	8000b80 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196a:	e00f      	b.n	800198c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196c:	f7ff f908 	bl	8000b80 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d908      	bls.n	800198c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e118      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	42470000 	.word	0x42470000
 8001988:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198c:	4b8a      	ldr	r3, [pc, #552]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 800198e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1e9      	bne.n	800196c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 8097 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019aa:	4b83      	ldr	r3, [pc, #524]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10f      	bne.n	80019d6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b7f      	ldr	r3, [pc, #508]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a7e      	ldr	r2, [pc, #504]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b7c      	ldr	r3, [pc, #496]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019d2:	2301      	movs	r3, #1
 80019d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d6:	4b79      	ldr	r3, [pc, #484]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d118      	bne.n	8001a14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e2:	4b76      	ldr	r3, [pc, #472]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a75      	ldr	r2, [pc, #468]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ee:	f7ff f8c7 	bl	8000b80 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f6:	f7ff f8c3 	bl	8000b80 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0d3      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	4b6c      	ldr	r3, [pc, #432]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x31a>
 8001a1c:	4b66      	ldr	r3, [pc, #408]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	4a65      	ldr	r2, [pc, #404]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6713      	str	r3, [r2, #112]	; 0x70
 8001a28:	e01c      	b.n	8001a64 <HAL_RCC_OscConfig+0x354>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x33c>
 8001a32:	4b61      	ldr	r3, [pc, #388]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a36:	4a60      	ldr	r2, [pc, #384]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3e:	4b5e      	ldr	r3, [pc, #376]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a42:	4a5d      	ldr	r2, [pc, #372]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4a:	e00b      	b.n	8001a64 <HAL_RCC_OscConfig+0x354>
 8001a4c:	4b5a      	ldr	r3, [pc, #360]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	4a59      	ldr	r2, [pc, #356]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	6713      	str	r3, [r2, #112]	; 0x70
 8001a58:	4b57      	ldr	r3, [pc, #348]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5c:	4a56      	ldr	r2, [pc, #344]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a5e:	f023 0304 	bic.w	r3, r3, #4
 8001a62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d015      	beq.n	8001a98 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6c:	f7ff f888 	bl	8000b80 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a72:	e00a      	b.n	8001a8a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a74:	f7ff f884 	bl	8000b80 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e092      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8a:	4b4b      	ldr	r3, [pc, #300]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0ee      	beq.n	8001a74 <HAL_RCC_OscConfig+0x364>
 8001a96:	e014      	b.n	8001ac2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff f872 	bl	8000b80 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa0:	f7ff f86e 	bl	8000b80 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e07c      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab6:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1ee      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d105      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac8:	4b3b      	ldr	r3, [pc, #236]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	4a3a      	ldr	r2, [pc, #232]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d068      	beq.n	8001bae <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001adc:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d060      	beq.n	8001baa <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d145      	bne.n	8001b7c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af0:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <HAL_RCC_OscConfig+0x4b0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff f843 	bl	8000b80 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff f83f 	bl	8000b80 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e04f      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69da      	ldr	r2, [r3, #28]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	019b      	lsls	r3, r3, #6
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	085b      	lsrs	r3, r3, #1
 8001b34:	3b01      	subs	r3, #1
 8001b36:	041b      	lsls	r3, r3, #16
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	061b      	lsls	r3, r3, #24
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	071b      	lsls	r3, r3, #28
 8001b48:	491b      	ldr	r1, [pc, #108]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <HAL_RCC_OscConfig+0x4b0>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff f814 	bl	8000b80 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5c:	f7ff f810 	bl	8000b80 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e020      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x44c>
 8001b7a:	e018      	b.n	8001bae <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7c:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <HAL_RCC_OscConfig+0x4b0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7fe fffd 	bl	8000b80 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7fe fff9 	bl	8000b80 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e009      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f0      	bne.n	8001b8a <HAL_RCC_OscConfig+0x47a>
 8001ba8:	e001      	b.n	8001bae <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000
 8001bc0:	42470060 	.word	0x42470060

08001bc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e056      	b.n	8001c84 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d106      	bne.n	8001bf6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7fe fe4f 	bl	8000894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c0c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	ea42 0103 	orr.w	r1, r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	0c1b      	lsrs	r3, r3, #16
 8001c54:	f003 0104 	and.w	r1, r3, #4
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_SPI_Transmit+0x22>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e11e      	b.n	8001eec <HAL_SPI_Transmit+0x260>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cb6:	f7fe ff63 	bl	8000b80 <HAL_GetTick>
 8001cba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d002      	beq.n	8001cd2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cd0:	e103      	b.n	8001eda <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_SPI_Transmit+0x52>
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d102      	bne.n	8001ce4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ce2:	e0fa      	b.n	8001eda <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	88fa      	ldrh	r2, [r7, #6]
 8001cfc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	88fa      	ldrh	r2, [r7, #6]
 8001d02:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d2a:	d107      	bne.n	8001d3c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d46:	2b40      	cmp	r3, #64	; 0x40
 8001d48:	d007      	beq.n	8001d5a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d62:	d14b      	bne.n	8001dfc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_SPI_Transmit+0xe6>
 8001d6c:	8afb      	ldrh	r3, [r7, #22]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d13e      	bne.n	8001df0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	881a      	ldrh	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	1c9a      	adds	r2, r3, #2
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d96:	e02b      	b.n	8001df0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d112      	bne.n	8001dcc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	881a      	ldrh	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	1c9a      	adds	r2, r3, #2
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8001dca:	e011      	b.n	8001df0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dcc:	f7fe fed8 	bl	8000b80 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d803      	bhi.n	8001de4 <HAL_SPI_Transmit+0x158>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de2:	d102      	bne.n	8001dea <HAL_SPI_Transmit+0x15e>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001dee:	e074      	b.n	8001eda <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1ce      	bne.n	8001d98 <HAL_SPI_Transmit+0x10c>
 8001dfa:	e04c      	b.n	8001e96 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <HAL_SPI_Transmit+0x17e>
 8001e04:	8afb      	ldrh	r3, [r7, #22]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d140      	bne.n	8001e8c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	330c      	adds	r3, #12
 8001e14:	7812      	ldrb	r2, [r2, #0]
 8001e16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e30:	e02c      	b.n	8001e8c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d113      	bne.n	8001e68 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	330c      	adds	r3, #12
 8001e4a:	7812      	ldrb	r2, [r2, #0]
 8001e4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e66:	e011      	b.n	8001e8c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e68:	f7fe fe8a 	bl	8000b80 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d803      	bhi.n	8001e80 <HAL_SPI_Transmit+0x1f4>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7e:	d102      	bne.n	8001e86 <HAL_SPI_Transmit+0x1fa>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d102      	bne.n	8001e8c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e8a:	e026      	b.n	8001eda <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1cd      	bne.n	8001e32 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	6839      	ldr	r1, [r7, #0]
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fcd2 	bl	8002844 <SPI_EndRxTxTransaction>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10a      	bne.n	8001eca <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	77fb      	strb	r3, [r7, #31]
 8001ed6:	e000      	b.n	8001eda <HAL_SPI_Transmit+0x24e>
  }

error:
 8001ed8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001eea:	7ffb      	ldrb	r3, [r7, #31]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af02      	add	r7, sp, #8
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	4613      	mov	r3, r2
 8001f02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f10:	d112      	bne.n	8001f38 <HAL_SPI_Receive+0x44>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10e      	bne.n	8001f38 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f22:	88fa      	ldrh	r2, [r7, #6]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f8e9 	bl	8002106 <HAL_SPI_TransmitReceive>
 8001f34:	4603      	mov	r3, r0
 8001f36:	e0e2      	b.n	80020fe <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_SPI_Receive+0x52>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e0db      	b.n	80020fe <HAL_SPI_Receive+0x20a>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f4e:	f7fe fe17 	bl	8000b80 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d002      	beq.n	8001f66 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001f60:	2302      	movs	r3, #2
 8001f62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f64:	e0c2      	b.n	80020ec <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_SPI_Receive+0x7e>
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f76:	e0b9      	b.n	80020ec <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	88fa      	ldrh	r2, [r7, #6]
 8001f90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	88fa      	ldrh	r2, [r7, #6]
 8001f96:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fbe:	d107      	bne.n	8001fd0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fda:	2b40      	cmp	r3, #64	; 0x40
 8001fdc:	d007      	beq.n	8001fee <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d162      	bne.n	80020bc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001ff6:	e02e      	b.n	8002056 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b01      	cmp	r3, #1
 8002004:	d115      	bne.n	8002032 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f103 020c 	add.w	r2, r3, #12
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002012:	7812      	ldrb	r2, [r2, #0]
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002026:	b29b      	uxth	r3, r3
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002030:	e011      	b.n	8002056 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002032:	f7fe fda5 	bl	8000b80 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d803      	bhi.n	800204a <HAL_SPI_Receive+0x156>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d102      	bne.n	8002050 <HAL_SPI_Receive+0x15c>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002054:	e04a      	b.n	80020ec <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1cb      	bne.n	8001ff8 <HAL_SPI_Receive+0x104>
 8002060:	e031      	b.n	80020c6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d113      	bne.n	8002098 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	b292      	uxth	r2, r2
 800207c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	1c9a      	adds	r2, r3, #2
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002096:	e011      	b.n	80020bc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002098:	f7fe fd72 	bl	8000b80 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d803      	bhi.n	80020b0 <HAL_SPI_Receive+0x1bc>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ae:	d102      	bne.n	80020b6 <HAL_SPI_Receive+0x1c2>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d102      	bne.n	80020bc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80020ba:	e017      	b.n	80020ec <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1cd      	bne.n	8002062 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	6839      	ldr	r1, [r7, #0]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fb54 	bl	8002778 <SPI_EndRxTransaction>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	75fb      	strb	r3, [r7, #23]
 80020e8:	e000      	b.n	80020ec <HAL_SPI_Receive+0x1f8>
  }

error :
 80020ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b08c      	sub	sp, #48	; 0x30
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002114:	2301      	movs	r3, #1
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_SPI_TransmitReceive+0x26>
 8002128:	2302      	movs	r3, #2
 800212a:	e18a      	b.n	8002442 <HAL_SPI_TransmitReceive+0x33c>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002134:	f7fe fd24 	bl	8000b80 <HAL_GetTick>
 8002138:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800214e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002152:	2b01      	cmp	r3, #1
 8002154:	d00f      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x70>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800215c:	d107      	bne.n	800216e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d103      	bne.n	800216e <HAL_SPI_TransmitReceive+0x68>
 8002166:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800216a:	2b04      	cmp	r3, #4
 800216c:	d003      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800216e:	2302      	movs	r3, #2
 8002170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002174:	e15b      	b.n	800242e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_SPI_TransmitReceive+0x82>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_SPI_TransmitReceive+0x82>
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d103      	bne.n	8002190 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800218e:	e14e      	b.n	800242e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b04      	cmp	r3, #4
 800219a:	d003      	beq.n	80021a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2205      	movs	r2, #5
 80021a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	887a      	ldrh	r2, [r7, #2]
 80021ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	887a      	ldrh	r2, [r7, #2]
 80021c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e4:	2b40      	cmp	r3, #64	; 0x40
 80021e6:	d007      	beq.n	80021f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002200:	d178      	bne.n	80022f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_SPI_TransmitReceive+0x10a>
 800220a:	8b7b      	ldrh	r3, [r7, #26]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d166      	bne.n	80022de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	881a      	ldrh	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	1c9a      	adds	r2, r3, #2
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002234:	e053      	b.n	80022de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b02      	cmp	r3, #2
 8002242:	d11b      	bne.n	800227c <HAL_SPI_TransmitReceive+0x176>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d016      	beq.n	800227c <HAL_SPI_TransmitReceive+0x176>
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	2b01      	cmp	r3, #1
 8002252:	d113      	bne.n	800227c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	881a      	ldrh	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	1c9a      	adds	r2, r3, #2
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d119      	bne.n	80022be <HAL_SPI_TransmitReceive+0x1b8>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d014      	beq.n	80022be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229e:	b292      	uxth	r2, r2
 80022a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	1c9a      	adds	r2, r3, #2
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022ba:	2301      	movs	r3, #1
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022be:	f7fe fc5f 	bl	8000b80 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d807      	bhi.n	80022de <HAL_SPI_TransmitReceive+0x1d8>
 80022ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d003      	beq.n	80022de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80022dc:	e0a7      	b.n	800242e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1a6      	bne.n	8002236 <HAL_SPI_TransmitReceive+0x130>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1a1      	bne.n	8002236 <HAL_SPI_TransmitReceive+0x130>
 80022f2:	e07c      	b.n	80023ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_SPI_TransmitReceive+0x1fc>
 80022fc:	8b7b      	ldrh	r3, [r7, #26]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d16b      	bne.n	80023da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	330c      	adds	r3, #12
 800230c:	7812      	ldrb	r2, [r2, #0]
 800230e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002328:	e057      	b.n	80023da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b02      	cmp	r3, #2
 8002336:	d11c      	bne.n	8002372 <HAL_SPI_TransmitReceive+0x26c>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d017      	beq.n	8002372 <HAL_SPI_TransmitReceive+0x26c>
 8002342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002344:	2b01      	cmp	r3, #1
 8002346:	d114      	bne.n	8002372 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	330c      	adds	r3, #12
 8002352:	7812      	ldrb	r2, [r2, #0]
 8002354:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	d119      	bne.n	80023b4 <HAL_SPI_TransmitReceive+0x2ae>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d014      	beq.n	80023b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023b0:	2301      	movs	r3, #1
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023b4:	f7fe fbe4 	bl	8000b80 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d803      	bhi.n	80023cc <HAL_SPI_TransmitReceive+0x2c6>
 80023c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ca:	d102      	bne.n	80023d2 <HAL_SPI_TransmitReceive+0x2cc>
 80023cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d103      	bne.n	80023da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023d8:	e029      	b.n	800242e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1a2      	bne.n	800232a <HAL_SPI_TransmitReceive+0x224>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d19d      	bne.n	800232a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fa26 	bl	8002844 <SPI_EndRxTxTransaction>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d006      	beq.n	800240c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800240a:	e010      	b.n	800242e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	e000      	b.n	800242e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800242c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800243e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002442:	4618      	mov	r0, r3
 8002444:	3730      	adds	r7, #48	; 0x30
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	099b      	lsrs	r3, r3, #6
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10f      	bne.n	8002490 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	099b      	lsrs	r3, r3, #6
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d004      	beq.n	8002490 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	4798      	blx	r3
    return;
 800248e:	e0d8      	b.n	8002642 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	085b      	lsrs	r3, r3, #1
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_SPI_IRQHandler+0x66>
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	09db      	lsrs	r3, r3, #7
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d004      	beq.n	80024b2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
    return;
 80024b0:	e0c7      	b.n	8002642 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10c      	bne.n	80024d8 <HAL_SPI_IRQHandler+0x8c>
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80b5 	beq.w	8002642 <HAL_SPI_IRQHandler+0x1f6>
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80ae 	beq.w	8002642 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	099b      	lsrs	r3, r3, #6
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d023      	beq.n	800253a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d011      	beq.n	8002522 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	f043 0204 	orr.w	r2, r3, #4
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	e00b      	b.n	800253a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	693b      	ldr	r3, [r7, #16]
        return;
 8002538:	e083      	b.n	8002642 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d014      	beq.n	8002570 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00c      	beq.n	8002596 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	f043 0208 	orr.w	r2, r3, #8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002588:	2300      	movs	r3, #0
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	2b00      	cmp	r3, #0
 800259c:	d050      	beq.n	8002640 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025ac:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d104      	bne.n	80025ca <HAL_SPI_IRQHandler+0x17e>
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d034      	beq.n	8002634 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0203 	bic.w	r2, r2, #3
 80025d8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d011      	beq.n	8002606 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e6:	4a18      	ldr	r2, [pc, #96]	; (8002648 <HAL_SPI_IRQHandler+0x1fc>)
 80025e8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fc05 	bl	8000dfe <HAL_DMA_Abort_IT>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260a:	2b00      	cmp	r3, #0
 800260c:	d016      	beq.n	800263c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002612:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <HAL_SPI_IRQHandler+0x1fc>)
 8002614:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fbef 	bl	8000dfe <HAL_DMA_Abort_IT>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002632:	e003      	b.n	800263c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f809 	bl	800264c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800263a:	e000      	b.n	800263e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800263c:	bf00      	nop
    return;
 800263e:	bf00      	nop
 8002640:	bf00      	nop
  }
}
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	0800267d 	.word	0x0800267d

0800264c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800266e:	b2db      	uxtb	r3, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002688:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f7ff ffd8 	bl	800264c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	4613      	mov	r3, r2
 80026b2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026b4:	e04c      	b.n	8002750 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026bc:	d048      	beq.n	8002750 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80026be:	f7fe fa5f 	bl	8000b80 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d902      	bls.n	80026d4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d13d      	bne.n	8002750 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ec:	d111      	bne.n	8002712 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026f6:	d004      	beq.n	8002702 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002700:	d107      	bne.n	8002712 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002710:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800271a:	d10f      	bne.n	800273c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800273a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e00f      	b.n	8002770 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	4013      	ands	r3, r2
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	429a      	cmp	r2, r3
 800275e:	bf0c      	ite	eq
 8002760:	2301      	moveq	r3, #1
 8002762:	2300      	movne	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	429a      	cmp	r2, r3
 800276c:	d1a3      	bne.n	80026b6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800278c:	d111      	bne.n	80027b2 <SPI_EndRxTransaction+0x3a>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002796:	d004      	beq.n	80027a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a0:	d107      	bne.n	80027b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ba:	d12a      	bne.n	8002812 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c4:	d012      	beq.n	80027ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2200      	movs	r2, #0
 80027ce:	2180      	movs	r1, #128	; 0x80
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f7ff ff67 	bl	80026a4 <SPI_WaitFlagStateUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d02d      	beq.n	8002838 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	f043 0220 	orr.w	r2, r3, #32
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e026      	b.n	800283a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2200      	movs	r2, #0
 80027f4:	2101      	movs	r1, #1
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f7ff ff54 	bl	80026a4 <SPI_WaitFlagStateUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d01a      	beq.n	8002838 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	f043 0220 	orr.w	r2, r3, #32
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e013      	b.n	800283a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2200      	movs	r2, #0
 800281a:	2101      	movs	r1, #1
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f7ff ff41 	bl	80026a4 <SPI_WaitFlagStateUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d007      	beq.n	8002838 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282c:	f043 0220 	orr.w	r2, r3, #32
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e000      	b.n	800283a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af02      	add	r7, sp, #8
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <SPI_EndRxTxTransaction+0x7c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1b      	ldr	r2, [pc, #108]	; (80028c4 <SPI_EndRxTxTransaction+0x80>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0d5b      	lsrs	r3, r3, #21
 800285c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800286e:	d112      	bne.n	8002896 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2200      	movs	r2, #0
 8002878:	2180      	movs	r1, #128	; 0x80
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f7ff ff12 	bl	80026a4 <SPI_WaitFlagStateUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d016      	beq.n	80028b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288a:	f043 0220 	orr.w	r2, r3, #32
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e00f      	b.n	80028b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	3b01      	subs	r3, #1
 80028a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b80      	cmp	r3, #128	; 0x80
 80028ae:	d0f2      	beq.n	8002896 <SPI_EndRxTxTransaction+0x52>
 80028b0:	e000      	b.n	80028b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80028b2:	bf00      	nop
  }

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000000 	.word	0x20000000
 80028c4:	165e9f81 	.word	0x165e9f81

080028c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e03f      	b.n	800295a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe f820 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2224      	movs	r2, #36	; 0x24
 80028f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800290a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f90b 	bl	8002b28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b088      	sub	sp, #32
 8002966:	af02      	add	r7, sp, #8
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	4613      	mov	r3, r2
 8002970:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b20      	cmp	r3, #32
 8002980:	f040 8083 	bne.w	8002a8a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_UART_Transmit+0x2e>
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e07b      	b.n	8002a8c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_UART_Transmit+0x40>
 800299e:	2302      	movs	r3, #2
 80029a0:	e074      	b.n	8002a8c <HAL_UART_Transmit+0x12a>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2221      	movs	r2, #33	; 0x21
 80029b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80029b8:	f7fe f8e2 	bl	8000b80 <HAL_GetTick>
 80029bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	88fa      	ldrh	r2, [r7, #6]
 80029c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	88fa      	ldrh	r2, [r7, #6]
 80029c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80029d2:	e042      	b.n	8002a5a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ea:	d122      	bne.n	8002a32 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2200      	movs	r2, #0
 80029f4:	2180      	movs	r1, #128	; 0x80
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f84c 	bl	8002a94 <UART_WaitOnFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e042      	b.n	8002a8c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a18:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	3302      	adds	r3, #2
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	e017      	b.n	8002a5a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	e013      	b.n	8002a5a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2180      	movs	r1, #128	; 0x80
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f829 	bl	8002a94 <UART_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e01f      	b.n	8002a8c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	60ba      	str	r2, [r7, #8]
 8002a52:	781a      	ldrb	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1b7      	bne.n	80029d4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2140      	movs	r1, #64	; 0x40
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f810 	bl	8002a94 <UART_WaitOnFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e006      	b.n	8002a8c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e000      	b.n	8002a8c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
  }
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa4:	e02c      	b.n	8002b00 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d028      	beq.n	8002b00 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d007      	beq.n	8002ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ab4:	f7fe f864 	bl	8000b80 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d21d      	bcs.n	8002b00 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ad2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e00f      	b.n	8002b20 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d0c3      	beq.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b6a:	f023 030c 	bic.w	r3, r3, #12
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	68f9      	ldr	r1, [r7, #12]
 8002b74:	430b      	orrs	r3, r1
 8002b76:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b96:	f040 818b 	bne.w	8002eb0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4ac1      	ldr	r2, [pc, #772]	; (8002ea4 <UART_SetConfig+0x37c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d005      	beq.n	8002bb0 <UART_SetConfig+0x88>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4abf      	ldr	r2, [pc, #764]	; (8002ea8 <UART_SetConfig+0x380>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	f040 80bd 	bne.w	8002d2a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bb0:	f7fe fbfa 	bl	80013a8 <HAL_RCC_GetPCLK2Freq>
 8002bb4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	461d      	mov	r5, r3
 8002bba:	f04f 0600 	mov.w	r6, #0
 8002bbe:	46a8      	mov	r8, r5
 8002bc0:	46b1      	mov	r9, r6
 8002bc2:	eb18 0308 	adds.w	r3, r8, r8
 8002bc6:	eb49 0409 	adc.w	r4, r9, r9
 8002bca:	4698      	mov	r8, r3
 8002bcc:	46a1      	mov	r9, r4
 8002bce:	eb18 0805 	adds.w	r8, r8, r5
 8002bd2:	eb49 0906 	adc.w	r9, r9, r6
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002be2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002be6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bea:	4688      	mov	r8, r1
 8002bec:	4691      	mov	r9, r2
 8002bee:	eb18 0005 	adds.w	r0, r8, r5
 8002bf2:	eb49 0106 	adc.w	r1, r9, r6
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	461d      	mov	r5, r3
 8002bfc:	f04f 0600 	mov.w	r6, #0
 8002c00:	196b      	adds	r3, r5, r5
 8002c02:	eb46 0406 	adc.w	r4, r6, r6
 8002c06:	461a      	mov	r2, r3
 8002c08:	4623      	mov	r3, r4
 8002c0a:	f7fd fafb 	bl	8000204 <__aeabi_uldivmod>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	460c      	mov	r4, r1
 8002c12:	461a      	mov	r2, r3
 8002c14:	4ba5      	ldr	r3, [pc, #660]	; (8002eac <UART_SetConfig+0x384>)
 8002c16:	fba3 2302 	umull	r2, r3, r3, r2
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	461d      	mov	r5, r3
 8002c24:	f04f 0600 	mov.w	r6, #0
 8002c28:	46a9      	mov	r9, r5
 8002c2a:	46b2      	mov	sl, r6
 8002c2c:	eb19 0309 	adds.w	r3, r9, r9
 8002c30:	eb4a 040a 	adc.w	r4, sl, sl
 8002c34:	4699      	mov	r9, r3
 8002c36:	46a2      	mov	sl, r4
 8002c38:	eb19 0905 	adds.w	r9, r9, r5
 8002c3c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c40:	f04f 0100 	mov.w	r1, #0
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c54:	4689      	mov	r9, r1
 8002c56:	4692      	mov	sl, r2
 8002c58:	eb19 0005 	adds.w	r0, r9, r5
 8002c5c:	eb4a 0106 	adc.w	r1, sl, r6
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	461d      	mov	r5, r3
 8002c66:	f04f 0600 	mov.w	r6, #0
 8002c6a:	196b      	adds	r3, r5, r5
 8002c6c:	eb46 0406 	adc.w	r4, r6, r6
 8002c70:	461a      	mov	r2, r3
 8002c72:	4623      	mov	r3, r4
 8002c74:	f7fd fac6 	bl	8000204 <__aeabi_uldivmod>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b8b      	ldr	r3, [pc, #556]	; (8002eac <UART_SetConfig+0x384>)
 8002c80:	fba3 1302 	umull	r1, r3, r3, r2
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	2164      	movs	r1, #100	; 0x64
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	3332      	adds	r3, #50	; 0x32
 8002c92:	4a86      	ldr	r2, [pc, #536]	; (8002eac <UART_SetConfig+0x384>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ca0:	4498      	add	r8, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	461d      	mov	r5, r3
 8002ca6:	f04f 0600 	mov.w	r6, #0
 8002caa:	46a9      	mov	r9, r5
 8002cac:	46b2      	mov	sl, r6
 8002cae:	eb19 0309 	adds.w	r3, r9, r9
 8002cb2:	eb4a 040a 	adc.w	r4, sl, sl
 8002cb6:	4699      	mov	r9, r3
 8002cb8:	46a2      	mov	sl, r4
 8002cba:	eb19 0905 	adds.w	r9, r9, r5
 8002cbe:	eb4a 0a06 	adc.w	sl, sl, r6
 8002cc2:	f04f 0100 	mov.w	r1, #0
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cd6:	4689      	mov	r9, r1
 8002cd8:	4692      	mov	sl, r2
 8002cda:	eb19 0005 	adds.w	r0, r9, r5
 8002cde:	eb4a 0106 	adc.w	r1, sl, r6
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	461d      	mov	r5, r3
 8002ce8:	f04f 0600 	mov.w	r6, #0
 8002cec:	196b      	adds	r3, r5, r5
 8002cee:	eb46 0406 	adc.w	r4, r6, r6
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4623      	mov	r3, r4
 8002cf6:	f7fd fa85 	bl	8000204 <__aeabi_uldivmod>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4b6a      	ldr	r3, [pc, #424]	; (8002eac <UART_SetConfig+0x384>)
 8002d02:	fba3 1302 	umull	r1, r3, r3, r2
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	2164      	movs	r1, #100	; 0x64
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	3332      	adds	r3, #50	; 0x32
 8002d14:	4a65      	ldr	r2, [pc, #404]	; (8002eac <UART_SetConfig+0x384>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	f003 0207 	and.w	r2, r3, #7
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4442      	add	r2, r8
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	e26f      	b.n	800320a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d2a:	f7fe fb29 	bl	8001380 <HAL_RCC_GetPCLK1Freq>
 8002d2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	461d      	mov	r5, r3
 8002d34:	f04f 0600 	mov.w	r6, #0
 8002d38:	46a8      	mov	r8, r5
 8002d3a:	46b1      	mov	r9, r6
 8002d3c:	eb18 0308 	adds.w	r3, r8, r8
 8002d40:	eb49 0409 	adc.w	r4, r9, r9
 8002d44:	4698      	mov	r8, r3
 8002d46:	46a1      	mov	r9, r4
 8002d48:	eb18 0805 	adds.w	r8, r8, r5
 8002d4c:	eb49 0906 	adc.w	r9, r9, r6
 8002d50:	f04f 0100 	mov.w	r1, #0
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d64:	4688      	mov	r8, r1
 8002d66:	4691      	mov	r9, r2
 8002d68:	eb18 0005 	adds.w	r0, r8, r5
 8002d6c:	eb49 0106 	adc.w	r1, r9, r6
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	461d      	mov	r5, r3
 8002d76:	f04f 0600 	mov.w	r6, #0
 8002d7a:	196b      	adds	r3, r5, r5
 8002d7c:	eb46 0406 	adc.w	r4, r6, r6
 8002d80:	461a      	mov	r2, r3
 8002d82:	4623      	mov	r3, r4
 8002d84:	f7fd fa3e 	bl	8000204 <__aeabi_uldivmod>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	460c      	mov	r4, r1
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b47      	ldr	r3, [pc, #284]	; (8002eac <UART_SetConfig+0x384>)
 8002d90:	fba3 2302 	umull	r2, r3, r3, r2
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	461d      	mov	r5, r3
 8002d9e:	f04f 0600 	mov.w	r6, #0
 8002da2:	46a9      	mov	r9, r5
 8002da4:	46b2      	mov	sl, r6
 8002da6:	eb19 0309 	adds.w	r3, r9, r9
 8002daa:	eb4a 040a 	adc.w	r4, sl, sl
 8002dae:	4699      	mov	r9, r3
 8002db0:	46a2      	mov	sl, r4
 8002db2:	eb19 0905 	adds.w	r9, r9, r5
 8002db6:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dba:	f04f 0100 	mov.w	r1, #0
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dce:	4689      	mov	r9, r1
 8002dd0:	4692      	mov	sl, r2
 8002dd2:	eb19 0005 	adds.w	r0, r9, r5
 8002dd6:	eb4a 0106 	adc.w	r1, sl, r6
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	461d      	mov	r5, r3
 8002de0:	f04f 0600 	mov.w	r6, #0
 8002de4:	196b      	adds	r3, r5, r5
 8002de6:	eb46 0406 	adc.w	r4, r6, r6
 8002dea:	461a      	mov	r2, r3
 8002dec:	4623      	mov	r3, r4
 8002dee:	f7fd fa09 	bl	8000204 <__aeabi_uldivmod>
 8002df2:	4603      	mov	r3, r0
 8002df4:	460c      	mov	r4, r1
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b2c      	ldr	r3, [pc, #176]	; (8002eac <UART_SetConfig+0x384>)
 8002dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	2164      	movs	r1, #100	; 0x64
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	3332      	adds	r3, #50	; 0x32
 8002e0c:	4a27      	ldr	r2, [pc, #156]	; (8002eac <UART_SetConfig+0x384>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e1a:	4498      	add	r8, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	461d      	mov	r5, r3
 8002e20:	f04f 0600 	mov.w	r6, #0
 8002e24:	46a9      	mov	r9, r5
 8002e26:	46b2      	mov	sl, r6
 8002e28:	eb19 0309 	adds.w	r3, r9, r9
 8002e2c:	eb4a 040a 	adc.w	r4, sl, sl
 8002e30:	4699      	mov	r9, r3
 8002e32:	46a2      	mov	sl, r4
 8002e34:	eb19 0905 	adds.w	r9, r9, r5
 8002e38:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e3c:	f04f 0100 	mov.w	r1, #0
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e50:	4689      	mov	r9, r1
 8002e52:	4692      	mov	sl, r2
 8002e54:	eb19 0005 	adds.w	r0, r9, r5
 8002e58:	eb4a 0106 	adc.w	r1, sl, r6
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	461d      	mov	r5, r3
 8002e62:	f04f 0600 	mov.w	r6, #0
 8002e66:	196b      	adds	r3, r5, r5
 8002e68:	eb46 0406 	adc.w	r4, r6, r6
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4623      	mov	r3, r4
 8002e70:	f7fd f9c8 	bl	8000204 <__aeabi_uldivmod>
 8002e74:	4603      	mov	r3, r0
 8002e76:	460c      	mov	r4, r1
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <UART_SetConfig+0x384>)
 8002e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	2164      	movs	r1, #100	; 0x64
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	3332      	adds	r3, #50	; 0x32
 8002e8e:	4a07      	ldr	r2, [pc, #28]	; (8002eac <UART_SetConfig+0x384>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	f003 0207 	and.w	r2, r3, #7
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4442      	add	r2, r8
 8002ea0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002ea2:	e1b2      	b.n	800320a <UART_SetConfig+0x6e2>
 8002ea4:	40011000 	.word	0x40011000
 8002ea8:	40011400 	.word	0x40011400
 8002eac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4ad7      	ldr	r2, [pc, #860]	; (8003214 <UART_SetConfig+0x6ec>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d005      	beq.n	8002ec6 <UART_SetConfig+0x39e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4ad6      	ldr	r2, [pc, #856]	; (8003218 <UART_SetConfig+0x6f0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	f040 80d1 	bne.w	8003068 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ec6:	f7fe fa6f 	bl	80013a8 <HAL_RCC_GetPCLK2Freq>
 8002eca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	469a      	mov	sl, r3
 8002ed0:	f04f 0b00 	mov.w	fp, #0
 8002ed4:	46d0      	mov	r8, sl
 8002ed6:	46d9      	mov	r9, fp
 8002ed8:	eb18 0308 	adds.w	r3, r8, r8
 8002edc:	eb49 0409 	adc.w	r4, r9, r9
 8002ee0:	4698      	mov	r8, r3
 8002ee2:	46a1      	mov	r9, r4
 8002ee4:	eb18 080a 	adds.w	r8, r8, sl
 8002ee8:	eb49 090b 	adc.w	r9, r9, fp
 8002eec:	f04f 0100 	mov.w	r1, #0
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ef8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002efc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f00:	4688      	mov	r8, r1
 8002f02:	4691      	mov	r9, r2
 8002f04:	eb1a 0508 	adds.w	r5, sl, r8
 8002f08:	eb4b 0609 	adc.w	r6, fp, r9
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4619      	mov	r1, r3
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	f04f 0400 	mov.w	r4, #0
 8002f1e:	0094      	lsls	r4, r2, #2
 8002f20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f24:	008b      	lsls	r3, r1, #2
 8002f26:	461a      	mov	r2, r3
 8002f28:	4623      	mov	r3, r4
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	4631      	mov	r1, r6
 8002f2e:	f7fd f969 	bl	8000204 <__aeabi_uldivmod>
 8002f32:	4603      	mov	r3, r0
 8002f34:	460c      	mov	r4, r1
 8002f36:	461a      	mov	r2, r3
 8002f38:	4bb8      	ldr	r3, [pc, #736]	; (800321c <UART_SetConfig+0x6f4>)
 8002f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	469b      	mov	fp, r3
 8002f48:	f04f 0c00 	mov.w	ip, #0
 8002f4c:	46d9      	mov	r9, fp
 8002f4e:	46e2      	mov	sl, ip
 8002f50:	eb19 0309 	adds.w	r3, r9, r9
 8002f54:	eb4a 040a 	adc.w	r4, sl, sl
 8002f58:	4699      	mov	r9, r3
 8002f5a:	46a2      	mov	sl, r4
 8002f5c:	eb19 090b 	adds.w	r9, r9, fp
 8002f60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f78:	4689      	mov	r9, r1
 8002f7a:	4692      	mov	sl, r2
 8002f7c:	eb1b 0509 	adds.w	r5, fp, r9
 8002f80:	eb4c 060a 	adc.w	r6, ip, sl
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	f04f 0400 	mov.w	r4, #0
 8002f96:	0094      	lsls	r4, r2, #2
 8002f98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f9c:	008b      	lsls	r3, r1, #2
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4623      	mov	r3, r4
 8002fa2:	4628      	mov	r0, r5
 8002fa4:	4631      	mov	r1, r6
 8002fa6:	f7fd f92d 	bl	8000204 <__aeabi_uldivmod>
 8002faa:	4603      	mov	r3, r0
 8002fac:	460c      	mov	r4, r1
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4b9a      	ldr	r3, [pc, #616]	; (800321c <UART_SetConfig+0x6f4>)
 8002fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	2164      	movs	r1, #100	; 0x64
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	3332      	adds	r3, #50	; 0x32
 8002fc4:	4a95      	ldr	r2, [pc, #596]	; (800321c <UART_SetConfig+0x6f4>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd0:	4498      	add	r8, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	469b      	mov	fp, r3
 8002fd6:	f04f 0c00 	mov.w	ip, #0
 8002fda:	46d9      	mov	r9, fp
 8002fdc:	46e2      	mov	sl, ip
 8002fde:	eb19 0309 	adds.w	r3, r9, r9
 8002fe2:	eb4a 040a 	adc.w	r4, sl, sl
 8002fe6:	4699      	mov	r9, r3
 8002fe8:	46a2      	mov	sl, r4
 8002fea:	eb19 090b 	adds.w	r9, r9, fp
 8002fee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ff2:	f04f 0100 	mov.w	r1, #0
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ffe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003002:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003006:	4689      	mov	r9, r1
 8003008:	4692      	mov	sl, r2
 800300a:	eb1b 0509 	adds.w	r5, fp, r9
 800300e:	eb4c 060a 	adc.w	r6, ip, sl
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4619      	mov	r1, r3
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	f04f 0400 	mov.w	r4, #0
 8003024:	0094      	lsls	r4, r2, #2
 8003026:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800302a:	008b      	lsls	r3, r1, #2
 800302c:	461a      	mov	r2, r3
 800302e:	4623      	mov	r3, r4
 8003030:	4628      	mov	r0, r5
 8003032:	4631      	mov	r1, r6
 8003034:	f7fd f8e6 	bl	8000204 <__aeabi_uldivmod>
 8003038:	4603      	mov	r3, r0
 800303a:	460c      	mov	r4, r1
 800303c:	461a      	mov	r2, r3
 800303e:	4b77      	ldr	r3, [pc, #476]	; (800321c <UART_SetConfig+0x6f4>)
 8003040:	fba3 1302 	umull	r1, r3, r3, r2
 8003044:	095b      	lsrs	r3, r3, #5
 8003046:	2164      	movs	r1, #100	; 0x64
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	3332      	adds	r3, #50	; 0x32
 8003052:	4a72      	ldr	r2, [pc, #456]	; (800321c <UART_SetConfig+0x6f4>)
 8003054:	fba2 2303 	umull	r2, r3, r2, r3
 8003058:	095b      	lsrs	r3, r3, #5
 800305a:	f003 020f 	and.w	r2, r3, #15
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4442      	add	r2, r8
 8003064:	609a      	str	r2, [r3, #8]
 8003066:	e0d0      	b.n	800320a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003068:	f7fe f98a 	bl	8001380 <HAL_RCC_GetPCLK1Freq>
 800306c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	469a      	mov	sl, r3
 8003072:	f04f 0b00 	mov.w	fp, #0
 8003076:	46d0      	mov	r8, sl
 8003078:	46d9      	mov	r9, fp
 800307a:	eb18 0308 	adds.w	r3, r8, r8
 800307e:	eb49 0409 	adc.w	r4, r9, r9
 8003082:	4698      	mov	r8, r3
 8003084:	46a1      	mov	r9, r4
 8003086:	eb18 080a 	adds.w	r8, r8, sl
 800308a:	eb49 090b 	adc.w	r9, r9, fp
 800308e:	f04f 0100 	mov.w	r1, #0
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800309a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800309e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030a2:	4688      	mov	r8, r1
 80030a4:	4691      	mov	r9, r2
 80030a6:	eb1a 0508 	adds.w	r5, sl, r8
 80030aa:	eb4b 0609 	adc.w	r6, fp, r9
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4619      	mov	r1, r3
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	f04f 0400 	mov.w	r4, #0
 80030c0:	0094      	lsls	r4, r2, #2
 80030c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030c6:	008b      	lsls	r3, r1, #2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4623      	mov	r3, r4
 80030cc:	4628      	mov	r0, r5
 80030ce:	4631      	mov	r1, r6
 80030d0:	f7fd f898 	bl	8000204 <__aeabi_uldivmod>
 80030d4:	4603      	mov	r3, r0
 80030d6:	460c      	mov	r4, r1
 80030d8:	461a      	mov	r2, r3
 80030da:	4b50      	ldr	r3, [pc, #320]	; (800321c <UART_SetConfig+0x6f4>)
 80030dc:	fba3 2302 	umull	r2, r3, r3, r2
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	469b      	mov	fp, r3
 80030ea:	f04f 0c00 	mov.w	ip, #0
 80030ee:	46d9      	mov	r9, fp
 80030f0:	46e2      	mov	sl, ip
 80030f2:	eb19 0309 	adds.w	r3, r9, r9
 80030f6:	eb4a 040a 	adc.w	r4, sl, sl
 80030fa:	4699      	mov	r9, r3
 80030fc:	46a2      	mov	sl, r4
 80030fe:	eb19 090b 	adds.w	r9, r9, fp
 8003102:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003112:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003116:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800311a:	4689      	mov	r9, r1
 800311c:	4692      	mov	sl, r2
 800311e:	eb1b 0509 	adds.w	r5, fp, r9
 8003122:	eb4c 060a 	adc.w	r6, ip, sl
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4619      	mov	r1, r3
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	f04f 0400 	mov.w	r4, #0
 8003138:	0094      	lsls	r4, r2, #2
 800313a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800313e:	008b      	lsls	r3, r1, #2
 8003140:	461a      	mov	r2, r3
 8003142:	4623      	mov	r3, r4
 8003144:	4628      	mov	r0, r5
 8003146:	4631      	mov	r1, r6
 8003148:	f7fd f85c 	bl	8000204 <__aeabi_uldivmod>
 800314c:	4603      	mov	r3, r0
 800314e:	460c      	mov	r4, r1
 8003150:	461a      	mov	r2, r3
 8003152:	4b32      	ldr	r3, [pc, #200]	; (800321c <UART_SetConfig+0x6f4>)
 8003154:	fba3 1302 	umull	r1, r3, r3, r2
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	2164      	movs	r1, #100	; 0x64
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	3332      	adds	r3, #50	; 0x32
 8003166:	4a2d      	ldr	r2, [pc, #180]	; (800321c <UART_SetConfig+0x6f4>)
 8003168:	fba2 2303 	umull	r2, r3, r2, r3
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003172:	4498      	add	r8, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	469b      	mov	fp, r3
 8003178:	f04f 0c00 	mov.w	ip, #0
 800317c:	46d9      	mov	r9, fp
 800317e:	46e2      	mov	sl, ip
 8003180:	eb19 0309 	adds.w	r3, r9, r9
 8003184:	eb4a 040a 	adc.w	r4, sl, sl
 8003188:	4699      	mov	r9, r3
 800318a:	46a2      	mov	sl, r4
 800318c:	eb19 090b 	adds.w	r9, r9, fp
 8003190:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003194:	f04f 0100 	mov.w	r1, #0
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031a8:	4689      	mov	r9, r1
 80031aa:	4692      	mov	sl, r2
 80031ac:	eb1b 0509 	adds.w	r5, fp, r9
 80031b0:	eb4c 060a 	adc.w	r6, ip, sl
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4619      	mov	r1, r3
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	f04f 0400 	mov.w	r4, #0
 80031c6:	0094      	lsls	r4, r2, #2
 80031c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031cc:	008b      	lsls	r3, r1, #2
 80031ce:	461a      	mov	r2, r3
 80031d0:	4623      	mov	r3, r4
 80031d2:	4628      	mov	r0, r5
 80031d4:	4631      	mov	r1, r6
 80031d6:	f7fd f815 	bl	8000204 <__aeabi_uldivmod>
 80031da:	4603      	mov	r3, r0
 80031dc:	460c      	mov	r4, r1
 80031de:	461a      	mov	r2, r3
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <UART_SetConfig+0x6f4>)
 80031e2:	fba3 1302 	umull	r1, r3, r3, r2
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2164      	movs	r1, #100	; 0x64
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	3332      	adds	r3, #50	; 0x32
 80031f4:	4a09      	ldr	r2, [pc, #36]	; (800321c <UART_SetConfig+0x6f4>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	f003 020f 	and.w	r2, r3, #15
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4442      	add	r2, r8
 8003206:	609a      	str	r2, [r3, #8]
}
 8003208:	e7ff      	b.n	800320a <UART_SetConfig+0x6e2>
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003214:	40011000 	.word	0x40011000
 8003218:	40011400 	.word	0x40011400
 800321c:	51eb851f 	.word	0x51eb851f

08003220 <SX1272_Init>:

extern SPI_HandleTypeDef hspi1;

//! @last_edit : 15/10/2020
//! @details :
void SX1272_Init(void) {
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 8003224:	2201      	movs	r2, #1
 8003226:	2140      	movs	r1, #64	; 0x40
 8003228:	480f      	ldr	r0, [pc, #60]	; (8003268 <SX1272_Init+0x48>)
 800322a:	f7fd ff9d 	bl	8001168 <HAL_GPIO_WritePin>

	SX1272_WriteRegister(0x01, 0x00);
 800322e:	2100      	movs	r1, #0
 8003230:	2001      	movs	r0, #1
 8003232:	f000 f81b 	bl	800326c <SX1272_WriteRegister>

	HAL_Delay(15);
 8003236:	200f      	movs	r0, #15
 8003238:	f7fd fcae 	bl	8000b98 <HAL_Delay>
	SX1272_WriteRegister(0x01, 0x80);
 800323c:	2180      	movs	r1, #128	; 0x80
 800323e:	2001      	movs	r0, #1
 8003240:	f000 f814 	bl	800326c <SX1272_WriteRegister>

	HAL_Delay(15);
 8003244:	200f      	movs	r0, #15
 8003246:	f7fd fca7 	bl	8000b98 <HAL_Delay>
	SX1272_WriteRegister(0x06, 0xD9); //Frequency 868.5MHz : 0xD92000
 800324a:	21d9      	movs	r1, #217	; 0xd9
 800324c:	2006      	movs	r0, #6
 800324e:	f000 f80d 	bl	800326c <SX1272_WriteRegister>
	SX1272_WriteRegister(0x07, 0x20);
 8003252:	2120      	movs	r1, #32
 8003254:	2007      	movs	r0, #7
 8003256:	f000 f809 	bl	800326c <SX1272_WriteRegister>
	SX1272_WriteRegister(0x08, 0x00);
 800325a:	2100      	movs	r1, #0
 800325c:	2008      	movs	r0, #8
 800325e:	f000 f805 	bl	800326c <SX1272_WriteRegister>
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40020400 	.word	0x40020400

0800326c <SX1272_WriteRegister>:

//! @last_edit : 15/10/2020
//! @details :
void SX1272_WriteRegister(uint8_t reg, uint8_t val) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	460a      	mov	r2, r1
 8003276:	71fb      	strb	r3, [r7, #7]
 8003278:	4613      	mov	r3, r2
 800327a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 800327c:	2200      	movs	r2, #0
 800327e:	2140      	movs	r1, #64	; 0x40
 8003280:	4812      	ldr	r0, [pc, #72]	; (80032cc <SX1272_WriteRegister+0x60>)
 8003282:	f7fd ff71 	bl	8001168 <HAL_GPIO_WritePin>

	reg |= 0x80; //! MASK FOR R/W BIT
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800328c:	b2db      	uxtb	r3, r3
 800328e:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 8003290:	1df9      	adds	r1, r7, #7
 8003292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003296:	2201      	movs	r2, #1
 8003298:	480d      	ldr	r0, [pc, #52]	; (80032d0 <SX1272_WriteRegister+0x64>)
 800329a:	f7fe fcf7 	bl	8001c8c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &val, 1, 1000);
 800329e:	1db9      	adds	r1, r7, #6
 80032a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a4:	2201      	movs	r2, #1
 80032a6:	480a      	ldr	r0, [pc, #40]	; (80032d0 <SX1272_WriteRegister+0x64>)
 80032a8:	f7fe fcf0 	bl	8001c8c <HAL_SPI_Transmit>

	//! WAIT FOR SPI
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80032ac:	bf00      	nop
 80032ae:	4808      	ldr	r0, [pc, #32]	; (80032d0 <SX1272_WriteRegister+0x64>)
 80032b0:	f7ff f9d6 	bl	8002660 <HAL_SPI_GetState>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d1f9      	bne.n	80032ae <SX1272_WriteRegister+0x42>

	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 80032ba:	2201      	movs	r2, #1
 80032bc:	2140      	movs	r1, #64	; 0x40
 80032be:	4803      	ldr	r0, [pc, #12]	; (80032cc <SX1272_WriteRegister+0x60>)
 80032c0:	f7fd ff52 	bl	8001168 <HAL_GPIO_WritePin>
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40020400 	.word	0x40020400
 80032d0:	20000028 	.word	0x20000028

080032d4 <SX1272_ReadRegister>:

//! @last_edit : 15/10/2020
//! @details :
uint8_t SX1272_ReadRegister(uint8_t reg) {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 80032e2:	2200      	movs	r2, #0
 80032e4:	2140      	movs	r1, #64	; 0x40
 80032e6:	4814      	ldr	r0, [pc, #80]	; (8003338 <SX1272_ReadRegister+0x64>)
 80032e8:	f7fd ff3e 	bl	8001168 <HAL_GPIO_WritePin>

	reg &= 0x7F;
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 80032f6:	1df9      	adds	r1, r7, #7
 80032f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032fc:	2201      	movs	r2, #1
 80032fe:	480f      	ldr	r0, [pc, #60]	; (800333c <SX1272_ReadRegister+0x68>)
 8003300:	f7fe fcc4 	bl	8001c8c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &data, 1, 1000);
 8003304:	f107 010f 	add.w	r1, r7, #15
 8003308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800330c:	2201      	movs	r2, #1
 800330e:	480b      	ldr	r0, [pc, #44]	; (800333c <SX1272_ReadRegister+0x68>)
 8003310:	f7fe fdf0 	bl	8001ef4 <HAL_SPI_Receive>

	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003314:	bf00      	nop
 8003316:	4809      	ldr	r0, [pc, #36]	; (800333c <SX1272_ReadRegister+0x68>)
 8003318:	f7ff f9a2 	bl	8002660 <HAL_SPI_GetState>
 800331c:	4603      	mov	r3, r0
 800331e:	2b01      	cmp	r3, #1
 8003320:	d1f9      	bne.n	8003316 <SX1272_ReadRegister+0x42>

	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 8003322:	2201      	movs	r2, #1
 8003324:	2140      	movs	r1, #64	; 0x40
 8003326:	4804      	ldr	r0, [pc, #16]	; (8003338 <SX1272_ReadRegister+0x64>)
 8003328:	f7fd ff1e 	bl	8001168 <HAL_GPIO_WritePin>

	return data;
 800332c:	7bfb      	ldrb	r3, [r7, #15]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40020400 	.word	0x40020400
 800333c:	20000028 	.word	0x20000028

08003340 <SX1272_BurstRead>:

//! @last_edit : 15/10/2020
//! @details :
void SX1272_BurstRead(uint8_t addr, uint8_t* rxBuf, uint8_t length) {
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	6039      	str	r1, [r7, #0]
 800334a:	71fb      	strb	r3, [r7, #7]
 800334c:	4613      	mov	r3, r2
 800334e:	71bb      	strb	r3, [r7, #6]
	if (length > 1) {
 8003350:	79bb      	ldrb	r3, [r7, #6]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d918      	bls.n	8003388 <SX1272_BurstRead+0x48>
		HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8003356:	2200      	movs	r2, #0
 8003358:	2140      	movs	r1, #64	; 0x40
 800335a:	480d      	ldr	r0, [pc, #52]	; (8003390 <SX1272_BurstRead+0x50>)
 800335c:	f7fd ff04 	bl	8001168 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8003360:	1df9      	adds	r1, r7, #7
 8003362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003366:	2201      	movs	r2, #1
 8003368:	480a      	ldr	r0, [pc, #40]	; (8003394 <SX1272_BurstRead+0x54>)
 800336a:	f7fe fc8f 	bl	8001c8c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, rxBuf, length, 1000);
 800336e:	79bb      	ldrb	r3, [r7, #6]
 8003370:	b29a      	uxth	r2, r3
 8003372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003376:	6839      	ldr	r1, [r7, #0]
 8003378:	4806      	ldr	r0, [pc, #24]	; (8003394 <SX1272_BurstRead+0x54>)
 800337a:	f7fe fdbb 	bl	8001ef4 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800337e:	2201      	movs	r2, #1
 8003380:	2140      	movs	r1, #64	; 0x40
 8003382:	4803      	ldr	r0, [pc, #12]	; (8003390 <SX1272_BurstRead+0x50>)
 8003384:	f7fd fef0 	bl	8001168 <HAL_GPIO_WritePin>
	}
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40020400 	.word	0x40020400
 8003394:	20000028 	.word	0x20000028

08003398 <SX1272_Receive>:
	SX1272_WriteRegister(0x12, 0xFF); // clear interrupt
}

//! @last_edit : 15/10/2020
//! @details :
uint8_t SX1272_Receive(uint8_t rx[RCV_BUFFER_MAX_LEN]) {
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	uint8_t length = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = SX1272_ReadRegister(0x0F); // Rx base addr
 80033a4:	200f      	movs	r0, #15
 80033a6:	f7ff ff95 	bl	80032d4 <SX1272_ReadRegister>
 80033aa:	4603      	mov	r3, r0
 80033ac:	73bb      	strb	r3, [r7, #14]
	SX1272_WriteRegister(0x0D, addr); // write fifo addr ptr
 80033ae:	7bbb      	ldrb	r3, [r7, #14]
 80033b0:	4619      	mov	r1, r3
 80033b2:	200d      	movs	r0, #13
 80033b4:	f7ff ff5a 	bl	800326c <SX1272_WriteRegister>

	HAL_Delay(15);
 80033b8:	200f      	movs	r0, #15
 80033ba:	f7fd fbed 	bl	8000b98 <HAL_Delay>
	SX1272_WriteRegister(0x01, 0x81);
 80033be:	2181      	movs	r1, #129	; 0x81
 80033c0:	2001      	movs	r0, #1
 80033c2:	f7ff ff53 	bl	800326c <SX1272_WriteRegister>
	HAL_Delay(15);
 80033c6:	200f      	movs	r0, #15
 80033c8:	f7fd fbe6 	bl	8000b98 <HAL_Delay>
	SX1272_WriteRegister(0x01, 0x84);
 80033cc:	2184      	movs	r1, #132	; 0x84
 80033ce:	2001      	movs	r0, #1
 80033d0:	f7ff ff4c 	bl	800326c <SX1272_WriteRegister>
	HAL_Delay(15);
 80033d4:	200f      	movs	r0, #15
 80033d6:	f7fd fbdf 	bl	8000b98 <HAL_Delay>
	SX1272_WriteRegister(0x01, 0x85);
 80033da:	2185      	movs	r1, #133	; 0x85
 80033dc:	2001      	movs	r0, #1
 80033de:	f7ff ff45 	bl	800326c <SX1272_WriteRegister>
	HAL_Delay(15);
 80033e2:	200f      	movs	r0, #15
 80033e4:	f7fd fbd8 	bl	8000b98 <HAL_Delay>

	while((SX1272_ReadRegister(0x12) && 0xC0)==0); // interrupt
 80033e8:	bf00      	nop
 80033ea:	2012      	movs	r0, #18
 80033ec:	f7ff ff72 	bl	80032d4 <SX1272_ReadRegister>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f9      	beq.n	80033ea <SX1272_Receive+0x52>

	uint8_t interrupt = SX1272_ReadRegister(0x12);
 80033f6:	2012      	movs	r0, #18
 80033f8:	f7ff ff6c 	bl	80032d4 <SX1272_ReadRegister>
 80033fc:	4603      	mov	r3, r0
 80033fe:	737b      	strb	r3, [r7, #13]
	if(interrupt == 0x80){
 8003400:	7b7b      	ldrb	r3, [r7, #13]
 8003402:	2b80      	cmp	r3, #128	; 0x80
 8003404:	d101      	bne.n	800340a <SX1272_Receive+0x72>
		return 0;
 8003406:	2300      	movs	r3, #0
 8003408:	e019      	b.n	800343e <SX1272_Receive+0xa6>
	}

	addr = SX1272_ReadRegister(0x10); // Rx current addr
 800340a:	2010      	movs	r0, #16
 800340c:	f7ff ff62 	bl	80032d4 <SX1272_ReadRegister>
 8003410:	4603      	mov	r3, r0
 8003412:	73bb      	strb	r3, [r7, #14]
	length = SX1272_ReadRegister(0x13); // Rx current addr
 8003414:	2013      	movs	r0, #19
 8003416:	f7ff ff5d 	bl	80032d4 <SX1272_ReadRegister>
 800341a:	4603      	mov	r3, r0
 800341c:	73fb      	strb	r3, [r7, #15]

	SX1272_WriteRegister(0x0D, addr); // write fifo addr ptr
 800341e:	7bbb      	ldrb	r3, [r7, #14]
 8003420:	4619      	mov	r1, r3
 8003422:	200d      	movs	r0, #13
 8003424:	f7ff ff22 	bl	800326c <SX1272_WriteRegister>

	SX1272_BurstRead(0, rx, length);
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	461a      	mov	r2, r3
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	2000      	movs	r0, #0
 8003430:	f7ff ff86 	bl	8003340 <SX1272_BurstRead>
	SX1272_WriteRegister(0x12, 0xFF); // clear interrupt
 8003434:	21ff      	movs	r1, #255	; 0xff
 8003436:	2012      	movs	r0, #18
 8003438:	f7ff ff18 	bl	800326c <SX1272_WriteRegister>

	return length;
 800343c:	7bfb      	ldrb	r3, [r7, #15]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <__libc_init_array>:
 8003448:	b570      	push	{r4, r5, r6, lr}
 800344a:	4e0d      	ldr	r6, [pc, #52]	; (8003480 <__libc_init_array+0x38>)
 800344c:	4c0d      	ldr	r4, [pc, #52]	; (8003484 <__libc_init_array+0x3c>)
 800344e:	1ba4      	subs	r4, r4, r6
 8003450:	10a4      	asrs	r4, r4, #2
 8003452:	2500      	movs	r5, #0
 8003454:	42a5      	cmp	r5, r4
 8003456:	d109      	bne.n	800346c <__libc_init_array+0x24>
 8003458:	4e0b      	ldr	r6, [pc, #44]	; (8003488 <__libc_init_array+0x40>)
 800345a:	4c0c      	ldr	r4, [pc, #48]	; (800348c <__libc_init_array+0x44>)
 800345c:	f000 f820 	bl	80034a0 <_init>
 8003460:	1ba4      	subs	r4, r4, r6
 8003462:	10a4      	asrs	r4, r4, #2
 8003464:	2500      	movs	r5, #0
 8003466:	42a5      	cmp	r5, r4
 8003468:	d105      	bne.n	8003476 <__libc_init_array+0x2e>
 800346a:	bd70      	pop	{r4, r5, r6, pc}
 800346c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003470:	4798      	blx	r3
 8003472:	3501      	adds	r5, #1
 8003474:	e7ee      	b.n	8003454 <__libc_init_array+0xc>
 8003476:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800347a:	4798      	blx	r3
 800347c:	3501      	adds	r5, #1
 800347e:	e7f2      	b.n	8003466 <__libc_init_array+0x1e>
 8003480:	080034d8 	.word	0x080034d8
 8003484:	080034d8 	.word	0x080034d8
 8003488:	080034d8 	.word	0x080034d8
 800348c:	080034dc 	.word	0x080034dc

08003490 <memset>:
 8003490:	4402      	add	r2, r0
 8003492:	4603      	mov	r3, r0
 8003494:	4293      	cmp	r3, r2
 8003496:	d100      	bne.n	800349a <memset+0xa>
 8003498:	4770      	bx	lr
 800349a:	f803 1b01 	strb.w	r1, [r3], #1
 800349e:	e7f9      	b.n	8003494 <memset+0x4>

080034a0 <_init>:
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	bf00      	nop
 80034a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a6:	bc08      	pop	{r3}
 80034a8:	469e      	mov	lr, r3
 80034aa:	4770      	bx	lr

080034ac <_fini>:
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	bf00      	nop
 80034b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b2:	bc08      	pop	{r3}
 80034b4:	469e      	mov	lr, r3
 80034b6:	4770      	bx	lr
