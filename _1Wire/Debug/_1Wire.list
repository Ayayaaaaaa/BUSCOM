
_1Wire.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004710  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e0  080049e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049e8  080049e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000070  08004a60  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08004a60  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1fa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000253d  00000000  00000000  0002f29a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df0  00000000  00000000  000317d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  000325c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023574  00000000  00000000  00033280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ba59  00000000  00000000  000567f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1094  00000000  00000000  0006224d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001332e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f8c  00000000  00000000  0013335c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080048c8 	.word	0x080048c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080048c8 	.word	0x080048c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fb9a 	bl	8000cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f80e 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f91e 	bl	80007fc <MX_GPIO_Init>
  MX_TIM1_Init();
 80005c0:	f000 f878 	bl	80006b4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 f8f0 	bl	80007a8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005c8:	f000 f8c4 	bl	8000754 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CPWD_HAL_Init();
 80005cc:	f002 fe84 	bl	80032d8 <CPWD_HAL_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CPWD_HAL_Process();
 80005d0:	f002 fe88 	bl	80032e4 <CPWD_HAL_Process>
 80005d4:	e7fc      	b.n	80005d0 <main+0x20>
	...

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	; 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fa82 	bl	8003af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <SystemClock_Config+0xd4>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a29      	ldr	r2, [pc, #164]	; (80006ac <SystemClock_Config+0xd4>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <SystemClock_Config+0xd4>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000618:	2300      	movs	r3, #0
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <SystemClock_Config+0xd8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000624:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <SystemClock_Config+0xd8>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <SystemClock_Config+0xd8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800064c:	2310      	movs	r3, #16
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000650:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000654:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000656:	2304      	movs	r3, #4
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800065a:	2302      	movs	r3, #2
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800065e:	2302      	movs	r3, #2
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4618      	mov	r0, r3
 8000668:	f001 f9a0 	bl	80019ac <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000672:	f000 f947 	bl	8000904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2102      	movs	r1, #2
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fed0 	bl	8001438 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800069e:	f000 f931 	bl	8000904 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <MX_TIM1_Init+0x98>)
 80006d2:	4a1f      	ldr	r2, [pc, #124]	; (8000750 <MX_TIM1_Init+0x9c>)
 80006d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_TIM1_Init+0x98>)
 80006d8:	2253      	movs	r2, #83	; 0x53
 80006da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_TIM1_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_TIM1_Init+0x98>)
 80006e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_TIM1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_TIM1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_TIM1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006fc:	4813      	ldr	r0, [pc, #76]	; (800074c <MX_TIM1_Init+0x98>)
 80006fe:	f001 fbaf 	bl	8001e60 <HAL_TIM_Base_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000708:	f000 f8fc 	bl	8000904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	4619      	mov	r1, r3
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <MX_TIM1_Init+0x98>)
 800071a:	f001 fbcc 	bl	8001eb6 <HAL_TIM_ConfigClockSource>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000724:	f000 f8ee 	bl	8000904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_TIM1_Init+0x98>)
 8000736:	f001 fdaf 	bl	8002298 <HAL_TIMEx_MasterConfigSynchronization>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000740:	f000 f8e0 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200000e8 	.word	0x200000e8
 8000750:	40010000 	.word	0x40010000

08000754 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_USART1_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000760:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 800078c:	f001 fe00 	bl	8002390 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 f8b5 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000a8 	.word	0x200000a8
 80007a4:	40011000 	.word	0x40011000

080007a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <MX_USART2_UART_Init+0x50>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f001 fdd6 	bl	8002390 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ea:	f000 f88b 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000128 	.word	0x20000128
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b37      	ldr	r3, [pc, #220]	; (80008f4 <MX_GPIO_Init+0xf8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a36      	ldr	r2, [pc, #216]	; (80008f4 <MX_GPIO_Init+0xf8>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <MX_GPIO_Init+0xf8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <MX_GPIO_Init+0xf8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a2f      	ldr	r2, [pc, #188]	; (80008f4 <MX_GPIO_Init+0xf8>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_GPIO_Init+0xf8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <MX_GPIO_Init+0xf8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <MX_GPIO_Init+0xf8>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <MX_GPIO_Init+0xf8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <MX_GPIO_Init+0xf8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a21      	ldr	r2, [pc, #132]	; (80008f4 <MX_GPIO_Init+0xf8>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_GPIO_Init+0xf8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2120      	movs	r1, #32
 8000886:	481c      	ldr	r0, [pc, #112]	; (80008f8 <MX_GPIO_Init+0xfc>)
 8000888:	f000 fda2 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_1W_PIN_GPIO_Port, _1W_PIN_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000892:	481a      	ldr	r0, [pc, #104]	; (80008fc <MX_GPIO_Init+0x100>)
 8000894:	f000 fd9c 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_GPIO_Init+0x104>)
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4813      	ldr	r0, [pc, #76]	; (80008fc <MX_GPIO_Init+0x100>)
 80008ae:	f000 fbe5 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b2:	2320      	movs	r3, #32
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	480b      	ldr	r0, [pc, #44]	; (80008f8 <MX_GPIO_Init+0xfc>)
 80008ca:	f000 fbd7 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : _1W_PIN_Pin */
  GPIO_InitStruct.Pin = _1W_PIN_Pin;
 80008ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008d4:	2311      	movs	r3, #17
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(_1W_PIN_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_GPIO_Init+0x100>)
 80008e8:	f000 fbc8 	bl	800107c <HAL_GPIO_Init>

}
 80008ec:	bf00      	nop
 80008ee:	3728      	adds	r7, #40	; 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000
 80008fc:	40020800 	.word	0x40020800
 8000900:	10210000 	.word	0x10210000

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <HAL_MspInit+0x4c>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x4c>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000952:	2007      	movs	r0, #7
 8000954:	f000 fb2e 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <HAL_TIM_Base_MspInit+0x3c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d10d      	bne.n	8000992 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_TIM_Base_MspInit+0x40>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <HAL_TIM_Base_MspInit+0x40>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <HAL_TIM_Base_MspInit+0x40>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40010000 	.word	0x40010000
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a36      	ldr	r2, [pc, #216]	; (8000aa0 <HAL_UART_MspInit+0xf8>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d135      	bne.n	8000a36 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	4b35      	ldr	r3, [pc, #212]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a34      	ldr	r2, [pc, #208]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b32      	ldr	r3, [pc, #200]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a2d      	ldr	r2, [pc, #180]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a14:	2307      	movs	r3, #7
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <HAL_UART_MspInit+0x100>)
 8000a20:	f000 fb2c 	bl	800107c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	2025      	movs	r0, #37	; 0x25
 8000a2a:	f000 face 	bl	8000fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a2e:	2025      	movs	r0, #37	; 0x25
 8000a30:	f000 fae7 	bl	8001002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a34:	e030      	b.n	8000a98 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <HAL_UART_MspInit+0x104>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d12b      	bne.n	8000a98 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <HAL_UART_MspInit+0x100>)
 8000a94:	f000 faf2 	bl	800107c <HAL_GPIO_Init>
}
 8000a98:	bf00      	nop
 8000a9a:	3730      	adds	r7, #48	; 0x30
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40011000 	.word	0x40011000
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40004400 	.word	0x40004400

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f944 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8000b08:	f002 fc1e 	bl	8003348 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <USART1_IRQHandler+0x10>)
 8000b16:	f001 fdcf 	bl	80026b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200000a8 	.word	0x200000a8

08000b24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	e00a      	b.n	8000b4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b36:	f3af 8000 	nop.w
 8000b3a:	4601      	mov	r1, r0
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	60ba      	str	r2, [r7, #8]
 8000b42:	b2ca      	uxtb	r2, r1
 8000b44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbf0      	blt.n	8000b36 <_read+0x12>
	}

return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	e009      	b.n	8000b84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	60ba      	str	r2, [r7, #8]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 fc2f 	bl	80033dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf1      	blt.n	8000b70 <_write+0x12>
	}
	return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_close>:

int _close(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bbe:	605a      	str	r2, [r3, #4]
	return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_isatty>:

int _isatty(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
	return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f002 ff34 	bl	8003a9c <__errno>
 8000c34:	4602      	mov	r2, r0
 8000c36:	230c      	movs	r3, #12
 8000c38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20020000 	.word	0x20020000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	2000008c 	.word	0x2000008c
 8000c68:	200001c0 	.word	0x200001c0

08000c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <SystemInit+0x28>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <SystemInit+0x28>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SystemInit+0x28>)
 8000c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c86:	609a      	str	r2, [r3, #8]
#endif
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c9e:	e003      	b.n	8000ca8 <LoopCopyDataInit>

08000ca0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ca2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ca4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ca6:	3104      	adds	r1, #4

08000ca8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ca8:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cb0:	d3f6      	bcc.n	8000ca0 <CopyDataInit>
  ldr  r2, =_sbss
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cb4:	e002      	b.n	8000cbc <LoopFillZerobss>

08000cb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cb8:	f842 3b04 	str.w	r3, [r2], #4

08000cbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cc0:	d3f9      	bcc.n	8000cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cc2:	f7ff ffd3 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f002 feef 	bl	8003aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff fc71 	bl	80005b0 <main>
  bx  lr    
 8000cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cd4:	080049f0 	.word	0x080049f0
  ldr  r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cdc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000ce0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000ce4:	200001bc 	.word	0x200001bc

08000ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC_IRQHandler>
	...

08000cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <HAL_Init+0x40>)
 8000cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_Init+0x40>)
 8000d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_Init+0x40>)
 8000d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 f94d 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 f808 	bl	8000d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d20:	f7ff fdf8 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023c00 	.word	0x40023c00

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x54>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_InitTick+0x58>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f965 	bl	800101e <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00e      	b.n	8000d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d80a      	bhi.n	8000d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f000 f92d 	bl	8000fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <HAL_InitTick+0x5c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e000      	b.n	8000d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000000 	.word	0x20000000
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000004 	.word	0x20000004

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000168 	.word	0x20000168

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000168 	.word	0x20000168

08000dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	f7ff ffee 	bl	8000db8 <HAL_GetTick>
 8000ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de8:	d005      	beq.n	8000df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_Delay+0x40>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000df6:	bf00      	nop
 8000df8:	f7ff ffde 	bl	8000db8 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d8f7      	bhi.n	8000df8 <HAL_Delay+0x28>
  {
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000008 	.word	0x20000008

08000e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	db0b      	blt.n	8000ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 021f 	and.w	r2, r3, #31
 8000e90:	4907      	ldr	r1, [pc, #28]	; (8000eb0 <__NVIC_EnableIRQ+0x38>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	2001      	movs	r0, #1
 8000e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	; (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	; (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	; 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f80:	d301      	bcc.n	8000f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <SysTick_Config+0x40>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f7ff ff8e 	bl	8000eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <SysTick_Config+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <SysTick_Config+0x40>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff29 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff3e 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff8e 	bl	8000f08 <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5d 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff31 	bl	8000e78 <__NVIC_EnableIRQ>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffa2 	bl	8000f70 <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d004      	beq.n	8001054 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2280      	movs	r2, #128	; 0x80
 800104e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e00c      	b.n	800106e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2205      	movs	r2, #5
 8001058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0201 	bic.w	r2, r2, #1
 800106a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	e165      	b.n	8001364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	f040 8154 	bne.w	800135e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d00b      	beq.n	80010d6 <HAL_GPIO_Init+0x5a>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d007      	beq.n	80010d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ca:	2b11      	cmp	r3, #17
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b12      	cmp	r3, #18
 80010d4:	d130      	bne.n	8001138 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f003 0201 	and.w	r2, r3, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0xfc>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b12      	cmp	r3, #18
 8001176:	d123      	bne.n	80011c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	220f      	movs	r2, #15
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	69b9      	ldr	r1, [r7, #24]
 80011bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0203 	and.w	r2, r3, #3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 80ae 	beq.w	800135e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b5c      	ldr	r3, [pc, #368]	; (8001378 <HAL_GPIO_Init+0x2fc>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a5b      	ldr	r2, [pc, #364]	; (8001378 <HAL_GPIO_Init+0x2fc>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b59      	ldr	r3, [pc, #356]	; (8001378 <HAL_GPIO_Init+0x2fc>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121e:	4a57      	ldr	r2, [pc, #348]	; (800137c <HAL_GPIO_Init+0x300>)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	220f      	movs	r2, #15
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4e      	ldr	r2, [pc, #312]	; (8001380 <HAL_GPIO_Init+0x304>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d025      	beq.n	8001296 <HAL_GPIO_Init+0x21a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4d      	ldr	r2, [pc, #308]	; (8001384 <HAL_GPIO_Init+0x308>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d01f      	beq.n	8001292 <HAL_GPIO_Init+0x216>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4c      	ldr	r2, [pc, #304]	; (8001388 <HAL_GPIO_Init+0x30c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x212>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4b      	ldr	r2, [pc, #300]	; (800138c <HAL_GPIO_Init+0x310>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x20e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4a      	ldr	r2, [pc, #296]	; (8001390 <HAL_GPIO_Init+0x314>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x20a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a49      	ldr	r2, [pc, #292]	; (8001394 <HAL_GPIO_Init+0x318>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x206>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a48      	ldr	r2, [pc, #288]	; (8001398 <HAL_GPIO_Init+0x31c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x202>
 800127a:	2306      	movs	r3, #6
 800127c:	e00c      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 800127e:	2307      	movs	r3, #7
 8001280:	e00a      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001282:	2305      	movs	r3, #5
 8001284:	e008      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001286:	2304      	movs	r3, #4
 8001288:	e006      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 800128a:	2303      	movs	r3, #3
 800128c:	e004      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 800128e:	2302      	movs	r3, #2
 8001290:	e002      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001296:	2300      	movs	r3, #0
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	f002 0203 	and.w	r2, r2, #3
 800129e:	0092      	lsls	r2, r2, #2
 80012a0:	4093      	lsls	r3, r2
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a8:	4934      	ldr	r1, [pc, #208]	; (800137c <HAL_GPIO_Init+0x300>)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	3302      	adds	r3, #2
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b6:	4b39      	ldr	r3, [pc, #228]	; (800139c <HAL_GPIO_Init+0x320>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012da:	4a30      	ldr	r2, [pc, #192]	; (800139c <HAL_GPIO_Init+0x320>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012e0:	4b2e      	ldr	r3, [pc, #184]	; (800139c <HAL_GPIO_Init+0x320>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001304:	4a25      	ldr	r2, [pc, #148]	; (800139c <HAL_GPIO_Init+0x320>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <HAL_GPIO_Init+0x320>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132e:	4a1b      	ldr	r2, [pc, #108]	; (800139c <HAL_GPIO_Init+0x320>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_GPIO_Init+0x320>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001358:	4a10      	ldr	r2, [pc, #64]	; (800139c <HAL_GPIO_Init+0x320>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3301      	adds	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	2b0f      	cmp	r3, #15
 8001368:	f67f ae96 	bls.w	8001098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800136c:	bf00      	nop
 800136e:	3724      	adds	r7, #36	; 0x24
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800
 8001380:	40020000 	.word	0x40020000
 8001384:	40020400 	.word	0x40020400
 8001388:	40020800 	.word	0x40020800
 800138c:	40020c00 	.word	0x40020c00
 8001390:	40021000 	.word	0x40021000
 8001394:	40021400 	.word	0x40021400
 8001398:	40021800 	.word	0x40021800
 800139c:	40013c00 	.word	0x40013c00

080013a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e001      	b.n	80013c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e0:	787b      	ldrb	r3, [r7, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013ec:	e003      	b.n	80013f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	041a      	lsls	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	460b      	mov	r3, r1
 800140c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	887b      	ldrh	r3, [r7, #2]
 8001414:	401a      	ands	r2, r3
 8001416:	887b      	ldrh	r3, [r7, #2]
 8001418:	429a      	cmp	r2, r3
 800141a:	d104      	bne.n	8001426 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	041a      	lsls	r2, r3, #16
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001424:	e002      	b.n	800142c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	619a      	str	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0cc      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800144c:	4b68      	ldr	r3, [pc, #416]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 030f 	and.w	r3, r3, #15
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d90c      	bls.n	8001474 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145a:	4b65      	ldr	r3, [pc, #404]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001462:	4b63      	ldr	r3, [pc, #396]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d001      	beq.n	8001474 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0b8      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d020      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800148c:	4b59      	ldr	r3, [pc, #356]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	4a58      	ldr	r2, [pc, #352]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001496:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a4:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	4a52      	ldr	r2, [pc, #328]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b0:	4b50      	ldr	r3, [pc, #320]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	494d      	ldr	r1, [pc, #308]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d044      	beq.n	8001558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d107      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b47      	ldr	r3, [pc, #284]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d119      	bne.n	8001516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e07f      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d003      	beq.n	80014f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d107      	bne.n	8001506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f6:	4b3f      	ldr	r3, [pc, #252]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d109      	bne.n	8001516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e06f      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001506:	4b3b      	ldr	r3, [pc, #236]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e067      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001516:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f023 0203 	bic.w	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4934      	ldr	r1, [pc, #208]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	4313      	orrs	r3, r2
 8001526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001528:	f7ff fc46 	bl	8000db8 <HAL_GetTick>
 800152c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152e:	e00a      	b.n	8001546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001530:	f7ff fc42 	bl	8000db8 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	; 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e04f      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001546:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 020c 	and.w	r2, r3, #12
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	429a      	cmp	r2, r3
 8001556:	d1eb      	bne.n	8001530 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001558:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d20c      	bcs.n	8001580 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e032      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4916      	ldr	r1, [pc, #88]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	4313      	orrs	r3, r2
 800159c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d009      	beq.n	80015be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	490e      	ldr	r1, [pc, #56]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015be:	f000 f855 	bl	800166c <HAL_RCC_GetSysClockFreq>
 80015c2:	4601      	mov	r1, r0
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	5cd3      	ldrb	r3, [r2, r3]
 80015d2:	fa21 f303 	lsr.w	r3, r1, r3
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_RCC_ClockConfig+0x1c8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fba6 	bl	8000d30 <HAL_InitTick>

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023c00 	.word	0x40023c00
 80015f4:	40023800 	.word	0x40023800
 80015f8:	08004930 	.word	0x08004930
 80015fc:	20000000 	.word	0x20000000
 8001600:	20000004 	.word	0x20000004

08001604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_RCC_GetHCLKFreq+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000000 	.word	0x20000000

0800161c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001620:	f7ff fff0 	bl	8001604 <HAL_RCC_GetHCLKFreq>
 8001624:	4601      	mov	r1, r0
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	0a9b      	lsrs	r3, r3, #10
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	4a03      	ldr	r2, [pc, #12]	; (8001640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001632:	5cd3      	ldrb	r3, [r2, r3]
 8001634:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001638:	4618      	mov	r0, r3
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800
 8001640:	08004940 	.word	0x08004940

08001644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001648:	f7ff ffdc 	bl	8001604 <HAL_RCC_GetHCLKFreq>
 800164c:	4601      	mov	r1, r0
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	0b5b      	lsrs	r3, r3, #13
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	4a03      	ldr	r2, [pc, #12]	; (8001668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800165a:	5cd3      	ldrb	r3, [r2, r3]
 800165c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001660:	4618      	mov	r0, r3
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800
 8001668:	08004940 	.word	0x08004940

0800166c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001686:	4bc6      	ldr	r3, [pc, #792]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b0c      	cmp	r3, #12
 8001690:	f200 817e 	bhi.w	8001990 <HAL_RCC_GetSysClockFreq+0x324>
 8001694:	a201      	add	r2, pc, #4	; (adr r2, 800169c <HAL_RCC_GetSysClockFreq+0x30>)
 8001696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169a:	bf00      	nop
 800169c:	080016d1 	.word	0x080016d1
 80016a0:	08001991 	.word	0x08001991
 80016a4:	08001991 	.word	0x08001991
 80016a8:	08001991 	.word	0x08001991
 80016ac:	080016d7 	.word	0x080016d7
 80016b0:	08001991 	.word	0x08001991
 80016b4:	08001991 	.word	0x08001991
 80016b8:	08001991 	.word	0x08001991
 80016bc:	080016dd 	.word	0x080016dd
 80016c0:	08001991 	.word	0x08001991
 80016c4:	08001991 	.word	0x08001991
 80016c8:	08001991 	.word	0x08001991
 80016cc:	08001839 	.word	0x08001839
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016d0:	4bb4      	ldr	r3, [pc, #720]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x338>)
 80016d2:	613b      	str	r3, [r7, #16]
       break;
 80016d4:	e15f      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016d6:	4bb4      	ldr	r3, [pc, #720]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x33c>)
 80016d8:	613b      	str	r3, [r7, #16]
      break;
 80016da:	e15c      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016dc:	4bb0      	ldr	r3, [pc, #704]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016e4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016e6:	4bae      	ldr	r3, [pc, #696]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d04a      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f2:	4bab      	ldr	r3, [pc, #684]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	099b      	lsrs	r3, r3, #6
 80016f8:	f04f 0400 	mov.w	r4, #0
 80016fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	ea03 0501 	and.w	r5, r3, r1
 8001708:	ea04 0602 	and.w	r6, r4, r2
 800170c:	4629      	mov	r1, r5
 800170e:	4632      	mov	r2, r6
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	f04f 0400 	mov.w	r4, #0
 8001718:	0154      	lsls	r4, r2, #5
 800171a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800171e:	014b      	lsls	r3, r1, #5
 8001720:	4619      	mov	r1, r3
 8001722:	4622      	mov	r2, r4
 8001724:	1b49      	subs	r1, r1, r5
 8001726:	eb62 0206 	sbc.w	r2, r2, r6
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	f04f 0400 	mov.w	r4, #0
 8001732:	0194      	lsls	r4, r2, #6
 8001734:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001738:	018b      	lsls	r3, r1, #6
 800173a:	1a5b      	subs	r3, r3, r1
 800173c:	eb64 0402 	sbc.w	r4, r4, r2
 8001740:	f04f 0100 	mov.w	r1, #0
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	00e2      	lsls	r2, r4, #3
 800174a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800174e:	00d9      	lsls	r1, r3, #3
 8001750:	460b      	mov	r3, r1
 8001752:	4614      	mov	r4, r2
 8001754:	195b      	adds	r3, r3, r5
 8001756:	eb44 0406 	adc.w	r4, r4, r6
 800175a:	f04f 0100 	mov.w	r1, #0
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	0262      	lsls	r2, r4, #9
 8001764:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001768:	0259      	lsls	r1, r3, #9
 800176a:	460b      	mov	r3, r1
 800176c:	4614      	mov	r4, r2
 800176e:	4618      	mov	r0, r3
 8001770:	4621      	mov	r1, r4
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f04f 0400 	mov.w	r4, #0
 8001778:	461a      	mov	r2, r3
 800177a:	4623      	mov	r3, r4
 800177c:	f7fe fd98 	bl	80002b0 <__aeabi_uldivmod>
 8001780:	4603      	mov	r3, r0
 8001782:	460c      	mov	r4, r1
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e049      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001788:	4b85      	ldr	r3, [pc, #532]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	099b      	lsrs	r3, r3, #6
 800178e:	f04f 0400 	mov.w	r4, #0
 8001792:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	ea03 0501 	and.w	r5, r3, r1
 800179e:	ea04 0602 	and.w	r6, r4, r2
 80017a2:	4629      	mov	r1, r5
 80017a4:	4632      	mov	r2, r6
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	f04f 0400 	mov.w	r4, #0
 80017ae:	0154      	lsls	r4, r2, #5
 80017b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017b4:	014b      	lsls	r3, r1, #5
 80017b6:	4619      	mov	r1, r3
 80017b8:	4622      	mov	r2, r4
 80017ba:	1b49      	subs	r1, r1, r5
 80017bc:	eb62 0206 	sbc.w	r2, r2, r6
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	f04f 0400 	mov.w	r4, #0
 80017c8:	0194      	lsls	r4, r2, #6
 80017ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017ce:	018b      	lsls	r3, r1, #6
 80017d0:	1a5b      	subs	r3, r3, r1
 80017d2:	eb64 0402 	sbc.w	r4, r4, r2
 80017d6:	f04f 0100 	mov.w	r1, #0
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	00e2      	lsls	r2, r4, #3
 80017e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017e4:	00d9      	lsls	r1, r3, #3
 80017e6:	460b      	mov	r3, r1
 80017e8:	4614      	mov	r4, r2
 80017ea:	195b      	adds	r3, r3, r5
 80017ec:	eb44 0406 	adc.w	r4, r4, r6
 80017f0:	f04f 0100 	mov.w	r1, #0
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	02a2      	lsls	r2, r4, #10
 80017fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017fe:	0299      	lsls	r1, r3, #10
 8001800:	460b      	mov	r3, r1
 8001802:	4614      	mov	r4, r2
 8001804:	4618      	mov	r0, r3
 8001806:	4621      	mov	r1, r4
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f04f 0400 	mov.w	r4, #0
 800180e:	461a      	mov	r2, r3
 8001810:	4623      	mov	r3, r4
 8001812:	f7fe fd4d 	bl	80002b0 <__aeabi_uldivmod>
 8001816:	4603      	mov	r3, r0
 8001818:	460c      	mov	r4, r1
 800181a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800181c:	4b60      	ldr	r3, [pc, #384]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	0c1b      	lsrs	r3, r3, #16
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	3301      	adds	r3, #1
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	613b      	str	r3, [r7, #16]
      break;
 8001836:	e0ae      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001838:	4b59      	ldr	r3, [pc, #356]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001840:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001842:	4b57      	ldr	r3, [pc, #348]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d04a      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184e:	4b54      	ldr	r3, [pc, #336]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	099b      	lsrs	r3, r3, #6
 8001854:	f04f 0400 	mov.w	r4, #0
 8001858:	f240 11ff 	movw	r1, #511	; 0x1ff
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	ea03 0501 	and.w	r5, r3, r1
 8001864:	ea04 0602 	and.w	r6, r4, r2
 8001868:	4629      	mov	r1, r5
 800186a:	4632      	mov	r2, r6
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	f04f 0400 	mov.w	r4, #0
 8001874:	0154      	lsls	r4, r2, #5
 8001876:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800187a:	014b      	lsls	r3, r1, #5
 800187c:	4619      	mov	r1, r3
 800187e:	4622      	mov	r2, r4
 8001880:	1b49      	subs	r1, r1, r5
 8001882:	eb62 0206 	sbc.w	r2, r2, r6
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	f04f 0400 	mov.w	r4, #0
 800188e:	0194      	lsls	r4, r2, #6
 8001890:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001894:	018b      	lsls	r3, r1, #6
 8001896:	1a5b      	subs	r3, r3, r1
 8001898:	eb64 0402 	sbc.w	r4, r4, r2
 800189c:	f04f 0100 	mov.w	r1, #0
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	00e2      	lsls	r2, r4, #3
 80018a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018aa:	00d9      	lsls	r1, r3, #3
 80018ac:	460b      	mov	r3, r1
 80018ae:	4614      	mov	r4, r2
 80018b0:	195b      	adds	r3, r3, r5
 80018b2:	eb44 0406 	adc.w	r4, r4, r6
 80018b6:	f04f 0100 	mov.w	r1, #0
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	0262      	lsls	r2, r4, #9
 80018c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018c4:	0259      	lsls	r1, r3, #9
 80018c6:	460b      	mov	r3, r1
 80018c8:	4614      	mov	r4, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	4621      	mov	r1, r4
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f04f 0400 	mov.w	r4, #0
 80018d4:	461a      	mov	r2, r3
 80018d6:	4623      	mov	r3, r4
 80018d8:	f7fe fcea 	bl	80002b0 <__aeabi_uldivmod>
 80018dc:	4603      	mov	r3, r0
 80018de:	460c      	mov	r4, r1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	e049      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e4:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	099b      	lsrs	r3, r3, #6
 80018ea:	f04f 0400 	mov.w	r4, #0
 80018ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	ea03 0501 	and.w	r5, r3, r1
 80018fa:	ea04 0602 	and.w	r6, r4, r2
 80018fe:	4629      	mov	r1, r5
 8001900:	4632      	mov	r2, r6
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	f04f 0400 	mov.w	r4, #0
 800190a:	0154      	lsls	r4, r2, #5
 800190c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001910:	014b      	lsls	r3, r1, #5
 8001912:	4619      	mov	r1, r3
 8001914:	4622      	mov	r2, r4
 8001916:	1b49      	subs	r1, r1, r5
 8001918:	eb62 0206 	sbc.w	r2, r2, r6
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	f04f 0400 	mov.w	r4, #0
 8001924:	0194      	lsls	r4, r2, #6
 8001926:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800192a:	018b      	lsls	r3, r1, #6
 800192c:	1a5b      	subs	r3, r3, r1
 800192e:	eb64 0402 	sbc.w	r4, r4, r2
 8001932:	f04f 0100 	mov.w	r1, #0
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	00e2      	lsls	r2, r4, #3
 800193c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001940:	00d9      	lsls	r1, r3, #3
 8001942:	460b      	mov	r3, r1
 8001944:	4614      	mov	r4, r2
 8001946:	195b      	adds	r3, r3, r5
 8001948:	eb44 0406 	adc.w	r4, r4, r6
 800194c:	f04f 0100 	mov.w	r1, #0
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	02a2      	lsls	r2, r4, #10
 8001956:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800195a:	0299      	lsls	r1, r3, #10
 800195c:	460b      	mov	r3, r1
 800195e:	4614      	mov	r4, r2
 8001960:	4618      	mov	r0, r3
 8001962:	4621      	mov	r1, r4
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f04f 0400 	mov.w	r4, #0
 800196a:	461a      	mov	r2, r3
 800196c:	4623      	mov	r3, r4
 800196e:	f7fe fc9f 	bl	80002b0 <__aeabi_uldivmod>
 8001972:	4603      	mov	r3, r0
 8001974:	460c      	mov	r4, r1
 8001976:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x334>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	0f1b      	lsrs	r3, r3, #28
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	613b      	str	r3, [r7, #16]
      break;
 800198e:	e002      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x338>)
 8001992:	613b      	str	r3, [r7, #16]
      break;
 8001994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001996:	693b      	ldr	r3, [r7, #16]
}
 8001998:	4618      	mov	r0, r3
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	00f42400 	.word	0x00f42400
 80019a8:	007a1200 	.word	0x007a1200

080019ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 8083 	beq.w	8001acc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019c6:	4b95      	ldr	r3, [pc, #596]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d019      	beq.n	8001a06 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019d2:	4b92      	ldr	r3, [pc, #584]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d106      	bne.n	80019ec <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019de:	4b8f      	ldr	r3, [pc, #572]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ea:	d00c      	beq.n	8001a06 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ec:	4b8b      	ldr	r3, [pc, #556]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019f4:	2b0c      	cmp	r3, #12
 80019f6:	d112      	bne.n	8001a1e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f8:	4b88      	ldr	r3, [pc, #544]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a04:	d10b      	bne.n	8001a1e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a06:	4b85      	ldr	r3, [pc, #532]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d05b      	beq.n	8001aca <HAL_RCC_OscConfig+0x11e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d157      	bne.n	8001aca <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e216      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x8a>
 8001a28:	4b7c      	ldr	r3, [pc, #496]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a7b      	ldr	r2, [pc, #492]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	e01d      	b.n	8001a72 <HAL_RCC_OscConfig+0xc6>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a3e:	d10c      	bne.n	8001a5a <HAL_RCC_OscConfig+0xae>
 8001a40:	4b76      	ldr	r3, [pc, #472]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a75      	ldr	r2, [pc, #468]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b73      	ldr	r3, [pc, #460]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a72      	ldr	r2, [pc, #456]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	e00b      	b.n	8001a72 <HAL_RCC_OscConfig+0xc6>
 8001a5a:	4b70      	ldr	r3, [pc, #448]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a6f      	ldr	r2, [pc, #444]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	4b6d      	ldr	r3, [pc, #436]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a6c      	ldr	r2, [pc, #432]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d013      	beq.n	8001aa2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff f99d 	bl	8000db8 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a82:	f7ff f999 	bl	8000db8 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b64      	cmp	r3, #100	; 0x64
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e1db      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a94:	4b61      	ldr	r3, [pc, #388]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0xd6>
 8001aa0:	e014      	b.n	8001acc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7ff f989 	bl	8000db8 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aaa:	f7ff f985 	bl	8000db8 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b64      	cmp	r3, #100	; 0x64
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e1c7      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abc:	4b57      	ldr	r3, [pc, #348]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0xfe>
 8001ac8:	e000      	b.n	8001acc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d06f      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d017      	beq.n	8001b14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ae4:	4b4d      	ldr	r3, [pc, #308]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d105      	bne.n	8001afc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001af0:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00b      	beq.n	8001b14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001afc:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b04:	2b0c      	cmp	r3, #12
 8001b06:	d11c      	bne.n	8001b42 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b08:	4b44      	ldr	r3, [pc, #272]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d116      	bne.n	8001b42 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b14:	4b41      	ldr	r3, [pc, #260]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_OscConfig+0x180>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e18f      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2c:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4938      	ldr	r1, [pc, #224]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b40:	e03a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d020      	beq.n	8001b8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff f932 	bl	8000db8 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b58:	f7ff f92e 	bl	8000db8 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e170      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4925      	ldr	r1, [pc, #148]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
 8001b8a:	e015      	b.n	8001bb8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7ff f911 	bl	8000db8 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7ff f90d 	bl	8000db8 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e14f      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d037      	beq.n	8001c34 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d016      	beq.n	8001bfa <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_RCC_OscConfig+0x278>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd2:	f7ff f8f1 	bl	8000db8 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bda:	f7ff f8ed 	bl	8000db8 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e12f      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x22e>
 8001bf8:	e01c      	b.n	8001c34 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_RCC_OscConfig+0x278>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff f8da 	bl	8000db8 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c06:	e00f      	b.n	8001c28 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff f8d6 	bl	8000db8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d908      	bls.n	8001c28 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e118      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	42470000 	.word	0x42470000
 8001c24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	4b8a      	ldr	r3, [pc, #552]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e9      	bne.n	8001c08 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 8097 	beq.w	8001d70 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c46:	4b83      	ldr	r3, [pc, #524]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10f      	bne.n	8001c72 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b7f      	ldr	r3, [pc, #508]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a7e      	ldr	r2, [pc, #504]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
 8001c62:	4b7c      	ldr	r3, [pc, #496]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c72:	4b79      	ldr	r3, [pc, #484]	; (8001e58 <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d118      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7e:	4b76      	ldr	r3, [pc, #472]	; (8001e58 <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a75      	ldr	r2, [pc, #468]	; (8001e58 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff f895 	bl	8000db8 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c92:	f7ff f891 	bl	8000db8 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e0d3      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	4b6c      	ldr	r3, [pc, #432]	; (8001e58 <HAL_RCC_OscConfig+0x4ac>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x31a>
 8001cb8:	4b66      	ldr	r3, [pc, #408]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a65      	ldr	r2, [pc, #404]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc4:	e01c      	b.n	8001d00 <HAL_RCC_OscConfig+0x354>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x33c>
 8001cce:	4b61      	ldr	r3, [pc, #388]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	4a60      	ldr	r2, [pc, #384]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cda:	4b5e      	ldr	r3, [pc, #376]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a5d      	ldr	r2, [pc, #372]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0x354>
 8001ce8:	4b5a      	ldr	r3, [pc, #360]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	4a59      	ldr	r2, [pc, #356]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf4:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf8:	4a56      	ldr	r2, [pc, #344]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001cfa:	f023 0304 	bic.w	r3, r3, #4
 8001cfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d015      	beq.n	8001d34 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d08:	f7ff f856 	bl	8000db8 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d10:	f7ff f852 	bl	8000db8 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e092      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d26:	4b4b      	ldr	r3, [pc, #300]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0ee      	beq.n	8001d10 <HAL_RCC_OscConfig+0x364>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f840 	bl	8000db8 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f83c 	bl	8000db8 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e07c      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d52:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1ee      	bne.n	8001d3c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d64:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	4a3a      	ldr	r2, [pc, #232]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d068      	beq.n	8001e4a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 030c 	and.w	r3, r3, #12
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d060      	beq.n	8001e46 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d145      	bne.n	8001e18 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8c:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <HAL_RCC_OscConfig+0x4b0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7ff f811 	bl	8000db8 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9a:	f7ff f80d 	bl	8000db8 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e04f      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dac:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f0      	bne.n	8001d9a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69da      	ldr	r2, [r3, #28]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	019b      	lsls	r3, r3, #6
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	085b      	lsrs	r3, r3, #1
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	041b      	lsls	r3, r3, #16
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	061b      	lsls	r3, r3, #24
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	071b      	lsls	r3, r3, #28
 8001de4:	491b      	ldr	r1, [pc, #108]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dea:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <HAL_RCC_OscConfig+0x4b0>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7fe ffe2 	bl	8000db8 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe ffde 	bl	8000db8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e020      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x44c>
 8001e16:	e018      	b.n	8001e4a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_RCC_OscConfig+0x4b0>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1e:	f7fe ffcb 	bl	8000db8 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e26:	f7fe ffc7 	bl	8000db8 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e009      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_OscConfig+0x4a8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f0      	bne.n	8001e26 <HAL_RCC_OscConfig+0x47a>
 8001e44:	e001      	b.n	8001e4a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40007000 	.word	0x40007000
 8001e5c:	42470060 	.word	0x42470060

08001e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e01d      	b.n	8001eae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7fe fd6c 	bl	8000964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	f000 f8c0 	bl	8002024 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_TIM_ConfigClockSource+0x18>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e0a6      	b.n	800201c <HAL_TIM_ConfigClockSource+0x166>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001eec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ef4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b40      	cmp	r3, #64	; 0x40
 8001f04:	d067      	beq.n	8001fd6 <HAL_TIM_ConfigClockSource+0x120>
 8001f06:	2b40      	cmp	r3, #64	; 0x40
 8001f08:	d80b      	bhi.n	8001f22 <HAL_TIM_ConfigClockSource+0x6c>
 8001f0a:	2b10      	cmp	r3, #16
 8001f0c:	d073      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x140>
 8001f0e:	2b10      	cmp	r3, #16
 8001f10:	d802      	bhi.n	8001f18 <HAL_TIM_ConfigClockSource+0x62>
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d06f      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001f16:	e078      	b.n	800200a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d06c      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x140>
 8001f1c:	2b30      	cmp	r3, #48	; 0x30
 8001f1e:	d06a      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001f20:	e073      	b.n	800200a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f22:	2b70      	cmp	r3, #112	; 0x70
 8001f24:	d00d      	beq.n	8001f42 <HAL_TIM_ConfigClockSource+0x8c>
 8001f26:	2b70      	cmp	r3, #112	; 0x70
 8001f28:	d804      	bhi.n	8001f34 <HAL_TIM_ConfigClockSource+0x7e>
 8001f2a:	2b50      	cmp	r3, #80	; 0x50
 8001f2c:	d033      	beq.n	8001f96 <HAL_TIM_ConfigClockSource+0xe0>
 8001f2e:	2b60      	cmp	r3, #96	; 0x60
 8001f30:	d041      	beq.n	8001fb6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001f32:	e06a      	b.n	800200a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f38:	d066      	beq.n	8002008 <HAL_TIM_ConfigClockSource+0x152>
 8001f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f3e:	d017      	beq.n	8001f70 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001f40:	e063      	b.n	800200a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6899      	ldr	r1, [r3, #8]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f000 f981 	bl	8002258 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	609a      	str	r2, [r3, #8]
      break;
 8001f6e:	e04c      	b.n	800200a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6899      	ldr	r1, [r3, #8]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f000 f96a 	bl	8002258 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f92:	609a      	str	r2, [r3, #8]
      break;
 8001f94:	e039      	b.n	800200a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	6859      	ldr	r1, [r3, #4]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f000 f8de 	bl	8002164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2150      	movs	r1, #80	; 0x50
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 f937 	bl	8002222 <TIM_ITRx_SetConfig>
      break;
 8001fb4:	e029      	b.n	800200a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6859      	ldr	r1, [r3, #4]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f000 f8fd 	bl	80021c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2160      	movs	r1, #96	; 0x60
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f927 	bl	8002222 <TIM_ITRx_SetConfig>
      break;
 8001fd4:	e019      	b.n	800200a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6859      	ldr	r1, [r3, #4]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	f000 f8be 	bl	8002164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2140      	movs	r1, #64	; 0x40
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 f917 	bl	8002222 <TIM_ITRx_SetConfig>
      break;
 8001ff4:	e009      	b.n	800200a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4619      	mov	r1, r3
 8002000:	4610      	mov	r0, r2
 8002002:	f000 f90e 	bl	8002222 <TIM_ITRx_SetConfig>
      break;
 8002006:	e000      	b.n	800200a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002008:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a40      	ldr	r2, [pc, #256]	; (8002138 <TIM_Base_SetConfig+0x114>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d013      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002042:	d00f      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3d      	ldr	r2, [pc, #244]	; (800213c <TIM_Base_SetConfig+0x118>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00b      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3c      	ldr	r2, [pc, #240]	; (8002140 <TIM_Base_SetConfig+0x11c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3b      	ldr	r2, [pc, #236]	; (8002144 <TIM_Base_SetConfig+0x120>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d003      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a3a      	ldr	r2, [pc, #232]	; (8002148 <TIM_Base_SetConfig+0x124>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d108      	bne.n	8002076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800206a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2f      	ldr	r2, [pc, #188]	; (8002138 <TIM_Base_SetConfig+0x114>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d02b      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002084:	d027      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a2c      	ldr	r2, [pc, #176]	; (800213c <TIM_Base_SetConfig+0x118>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d023      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a2b      	ldr	r2, [pc, #172]	; (8002140 <TIM_Base_SetConfig+0x11c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01f      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a2a      	ldr	r2, [pc, #168]	; (8002144 <TIM_Base_SetConfig+0x120>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01b      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a29      	ldr	r2, [pc, #164]	; (8002148 <TIM_Base_SetConfig+0x124>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d017      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a28      	ldr	r2, [pc, #160]	; (800214c <TIM_Base_SetConfig+0x128>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a27      	ldr	r2, [pc, #156]	; (8002150 <TIM_Base_SetConfig+0x12c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00f      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a26      	ldr	r2, [pc, #152]	; (8002154 <TIM_Base_SetConfig+0x130>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00b      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a25      	ldr	r2, [pc, #148]	; (8002158 <TIM_Base_SetConfig+0x134>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d007      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a24      	ldr	r2, [pc, #144]	; (800215c <TIM_Base_SetConfig+0x138>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d003      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a23      	ldr	r2, [pc, #140]	; (8002160 <TIM_Base_SetConfig+0x13c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d108      	bne.n	80020e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <TIM_Base_SetConfig+0x114>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d003      	beq.n	800211c <TIM_Base_SetConfig+0xf8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <TIM_Base_SetConfig+0x124>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d103      	bne.n	8002124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	615a      	str	r2, [r3, #20]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40010000 	.word	0x40010000
 800213c:	40000400 	.word	0x40000400
 8002140:	40000800 	.word	0x40000800
 8002144:	40000c00 	.word	0x40000c00
 8002148:	40010400 	.word	0x40010400
 800214c:	40014000 	.word	0x40014000
 8002150:	40014400 	.word	0x40014400
 8002154:	40014800 	.word	0x40014800
 8002158:	40001800 	.word	0x40001800
 800215c:	40001c00 	.word	0x40001c00
 8002160:	40002000 	.word	0x40002000

08002164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	f023 0201 	bic.w	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800218e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f023 030a 	bic.w	r3, r3, #10
 80021a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	621a      	str	r2, [r3, #32]
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b087      	sub	sp, #28
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	f023 0210 	bic.w	r2, r3, #16
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	031b      	lsls	r3, r3, #12
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	621a      	str	r2, [r3, #32]
}
 8002216:	bf00      	nop
 8002218:	371c      	adds	r7, #28
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002222:	b480      	push	{r7}
 8002224:	b085      	sub	sp, #20
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	f043 0307 	orr.w	r3, r3, #7
 8002244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	609a      	str	r2, [r3, #8]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	021a      	lsls	r2, r3, #8
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	431a      	orrs	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4313      	orrs	r3, r2
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	609a      	str	r2, [r3, #8]
}
 800228c:	bf00      	nop
 800228e:	371c      	adds	r7, #28
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e05a      	b.n	8002366 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a21      	ldr	r2, [pc, #132]	; (8002374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d022      	beq.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fc:	d01d      	beq.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a1d      	ldr	r2, [pc, #116]	; (8002378 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d018      	beq.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a1b      	ldr	r2, [pc, #108]	; (800237c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d013      	beq.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1a      	ldr	r2, [pc, #104]	; (8002380 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d00e      	beq.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a18      	ldr	r2, [pc, #96]	; (8002384 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d009      	beq.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a17      	ldr	r2, [pc, #92]	; (8002388 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d004      	beq.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a15      	ldr	r2, [pc, #84]	; (800238c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d10c      	bne.n	8002354 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	4313      	orrs	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40010000 	.word	0x40010000
 8002378:	40000400 	.word	0x40000400
 800237c:	40000800 	.word	0x40000800
 8002380:	40000c00 	.word	0x40000c00
 8002384:	40010400 	.word	0x40010400
 8002388:	40014000 	.word	0x40014000
 800238c:	40001800 	.word	0x40001800

08002390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e03f      	b.n	8002422 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe faf6 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2224      	movs	r2, #36	; 0x24
 80023c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fc03 	bl	8002be0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b088      	sub	sp, #32
 800242e:	af02      	add	r7, sp, #8
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	4613      	mov	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b20      	cmp	r3, #32
 8002448:	f040 8083 	bne.w	8002552 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_UART_Transmit+0x2e>
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e07b      	b.n	8002554 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_UART_Transmit+0x40>
 8002466:	2302      	movs	r3, #2
 8002468:	e074      	b.n	8002554 <HAL_UART_Transmit+0x12a>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2221      	movs	r2, #33	; 0x21
 800247c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002480:	f7fe fc9a 	bl	8000db8 <HAL_GetTick>
 8002484:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	88fa      	ldrh	r2, [r7, #6]
 800248a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	88fa      	ldrh	r2, [r7, #6]
 8002490:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800249a:	e042      	b.n	8002522 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b2:	d122      	bne.n	80024fa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2200      	movs	r2, #0
 80024bc:	2180      	movs	r1, #128	; 0x80
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fa0e 	bl	80028e0 <UART_WaitOnFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e042      	b.n	8002554 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d103      	bne.n	80024f2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3302      	adds	r3, #2
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	e017      	b.n	8002522 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	3301      	adds	r3, #1
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	e013      	b.n	8002522 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2200      	movs	r2, #0
 8002502:	2180      	movs	r1, #128	; 0x80
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f9eb 	bl	80028e0 <UART_WaitOnFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e01f      	b.n	8002554 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	60ba      	str	r2, [r7, #8]
 800251a:	781a      	ldrb	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1b7      	bne.n	800249c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2200      	movs	r2, #0
 8002534:	2140      	movs	r1, #64	; 0x40
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f9d2 	bl	80028e0 <UART_WaitOnFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e006      	b.n	8002554 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e000      	b.n	8002554 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002552:	2302      	movs	r3, #2
  }
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	4613      	mov	r3, r2
 8002568:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b20      	cmp	r3, #32
 8002574:	d140      	bne.n	80025f8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <HAL_UART_Receive_IT+0x26>
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e039      	b.n	80025fa <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_UART_Receive_IT+0x38>
 8002590:	2302      	movs	r3, #2
 8002592:	e032      	b.n	80025fa <HAL_UART_Receive_IT+0x9e>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	88fa      	ldrh	r2, [r7, #6]
 80025a6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	88fa      	ldrh	r2, [r7, #6]
 80025ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2222      	movs	r2, #34	; 0x22
 80025b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025d2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0220 	orr.w	r2, r2, #32
 80025f2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e000      	b.n	80025fa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80025f8:	2302      	movs	r3, #2
  }
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800261e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b40      	cmp	r3, #64	; 0x40
 800263c:	d12a      	bne.n	8002694 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800264c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	2b00      	cmp	r3, #0
 8002654:	d013      	beq.n	800267e <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265a:	4a16      	ldr	r2, [pc, #88]	; (80026b4 <HAL_UART_AbortReceive_IT+0xac>)
 800265c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fce7 	bl	8001036 <HAL_DMA_Abort_IT>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d01c      	beq.n	80026a8 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002678:	4610      	mov	r0, r2
 800267a:	4798      	blx	r3
 800267c:	e014      	b.n	80026a8 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f91d 	bl	80028cc <HAL_UART_AbortReceiveCpltCallback>
 8002692:	e009      	b.n	80026a8 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f912 	bl	80028cc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	080029d9 	.word	0x080029d9

080026b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10d      	bne.n	800270a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_UART_IRQHandler+0x52>
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f9eb 	bl	8002ade <UART_Receive_IT>
      return;
 8002708:	e0d1      	b.n	80028ae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80b0 	beq.w	8002872 <HAL_UART_IRQHandler+0x1ba>
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d105      	bne.n	8002728 <HAL_UART_IRQHandler+0x70>
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80a5 	beq.w	8002872 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_UART_IRQHandler+0x90>
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <HAL_UART_IRQHandler+0xb0>
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002760:	f043 0202 	orr.w	r2, r3, #2
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_UART_IRQHandler+0xd0>
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002780:	f043 0204 	orr.w	r2, r3, #4
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00f      	beq.n	80027b2 <HAL_UART_IRQHandler+0xfa>
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	d104      	bne.n	80027a6 <HAL_UART_IRQHandler+0xee>
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	f043 0208 	orr.w	r2, r3, #8
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d078      	beq.n	80028ac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <HAL_UART_IRQHandler+0x11c>
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f985 	bl	8002ade <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	2b40      	cmp	r3, #64	; 0x40
 80027e0:	bf0c      	ite	eq
 80027e2:	2301      	moveq	r3, #1
 80027e4:	2300      	movne	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <HAL_UART_IRQHandler+0x144>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d031      	beq.n	8002860 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f8b9 	bl	8002974 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d123      	bne.n	8002858 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800281e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282c:	4a21      	ldr	r2, [pc, #132]	; (80028b4 <HAL_UART_IRQHandler+0x1fc>)
 800282e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe fbfe 	bl	8001036 <HAL_DMA_Abort_IT>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d016      	beq.n	800286e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800284a:	4610      	mov	r0, r2
 800284c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800284e:	e00e      	b.n	800286e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 ff2f 	bl	80036b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002856:	e00a      	b.n	800286e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 ff2b 	bl	80036b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800285e:	e006      	b.n	800286e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 ff27 	bl	80036b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800286c:	e01e      	b.n	80028ac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800286e:	bf00      	nop
    return;
 8002870:	e01c      	b.n	80028ac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_UART_IRQHandler+0x1d6>
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f8bb 	bl	8002a02 <UART_Transmit_IT>
    return;
 800288c:	e00f      	b.n	80028ae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_UART_IRQHandler+0x1f6>
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f903 	bl	8002aae <UART_EndTransmit_IT>
    return;
 80028a8:	bf00      	nop
 80028aa:	e000      	b.n	80028ae <HAL_UART_IRQHandler+0x1f6>
    return;
 80028ac:	bf00      	nop
  }
}
 80028ae:	3720      	adds	r7, #32
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	080029b1 	.word	0x080029b1

080028b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028f0:	e02c      	b.n	800294c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d028      	beq.n	800294c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <UART_WaitOnFlagUntilTimeout+0x30>
 8002900:	f7fe fa5a 	bl	8000db8 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	429a      	cmp	r2, r3
 800290e:	d21d      	bcs.n	800294c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800291e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e00f      	b.n	800296c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4013      	ands	r3, r2
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	429a      	cmp	r2, r3
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	429a      	cmp	r2, r3
 8002968:	d0c3      	beq.n	80028f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800298a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 fe72 	bl	80036b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f7ff ff69 	bl	80028cc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b21      	cmp	r3, #33	; 0x21
 8002a14:	d144      	bne.n	8002aa0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1e:	d11a      	bne.n	8002a56 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a34:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	1c9a      	adds	r2, r3, #2
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	621a      	str	r2, [r3, #32]
 8002a48:	e00e      	b.n	8002a68 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	621a      	str	r2, [r3, #32]
 8002a54:	e008      	b.n	8002a68 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	1c59      	adds	r1, r3, #1
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6211      	str	r1, [r2, #32]
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4619      	mov	r1, r3
 8002a76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10f      	bne.n	8002a9c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	e000      	b.n	8002aa2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002aa0:	2302      	movs	r3, #2
  }
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff fef2 	bl	80028b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b22      	cmp	r3, #34	; 0x22
 8002af0:	d171      	bne.n	8002bd6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afa:	d123      	bne.n	8002b44 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10e      	bne.n	8002b28 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b20:	1c9a      	adds	r2, r3, #2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	629a      	str	r2, [r3, #40]	; 0x28
 8002b26:	e029      	b.n	8002b7c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	629a      	str	r2, [r3, #40]	; 0x28
 8002b42:	e01b      	b.n	8002b7c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6858      	ldr	r0, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	1c59      	adds	r1, r3, #1
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6291      	str	r1, [r2, #40]	; 0x28
 8002b5c:	b2c2      	uxtb	r2, r0
 8002b5e:	701a      	strb	r2, [r3, #0]
 8002b60:	e00c      	b.n	8002b7c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	1c58      	adds	r0, r3, #1
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	6288      	str	r0, [r1, #40]	; 0x28
 8002b74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d120      	bne.n	8002bd2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0220 	bic.w	r2, r2, #32
 8002b9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fd3b 	bl	8003644 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e002      	b.n	8002bd8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e000      	b.n	8002bd8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
  }
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c22:	f023 030c 	bic.w	r3, r3, #12
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	68f9      	ldr	r1, [r7, #12]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c4e:	f040 818b 	bne.w	8002f68 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4ac1      	ldr	r2, [pc, #772]	; (8002f5c <UART_SetConfig+0x37c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d005      	beq.n	8002c68 <UART_SetConfig+0x88>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4abf      	ldr	r2, [pc, #764]	; (8002f60 <UART_SetConfig+0x380>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	f040 80bd 	bne.w	8002de2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c68:	f7fe fcec 	bl	8001644 <HAL_RCC_GetPCLK2Freq>
 8002c6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	461d      	mov	r5, r3
 8002c72:	f04f 0600 	mov.w	r6, #0
 8002c76:	46a8      	mov	r8, r5
 8002c78:	46b1      	mov	r9, r6
 8002c7a:	eb18 0308 	adds.w	r3, r8, r8
 8002c7e:	eb49 0409 	adc.w	r4, r9, r9
 8002c82:	4698      	mov	r8, r3
 8002c84:	46a1      	mov	r9, r4
 8002c86:	eb18 0805 	adds.w	r8, r8, r5
 8002c8a:	eb49 0906 	adc.w	r9, r9, r6
 8002c8e:	f04f 0100 	mov.w	r1, #0
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ca2:	4688      	mov	r8, r1
 8002ca4:	4691      	mov	r9, r2
 8002ca6:	eb18 0005 	adds.w	r0, r8, r5
 8002caa:	eb49 0106 	adc.w	r1, r9, r6
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	461d      	mov	r5, r3
 8002cb4:	f04f 0600 	mov.w	r6, #0
 8002cb8:	196b      	adds	r3, r5, r5
 8002cba:	eb46 0406 	adc.w	r4, r6, r6
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4623      	mov	r3, r4
 8002cc2:	f7fd faf5 	bl	80002b0 <__aeabi_uldivmod>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	460c      	mov	r4, r1
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4ba5      	ldr	r3, [pc, #660]	; (8002f64 <UART_SetConfig+0x384>)
 8002cce:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	461d      	mov	r5, r3
 8002cdc:	f04f 0600 	mov.w	r6, #0
 8002ce0:	46a9      	mov	r9, r5
 8002ce2:	46b2      	mov	sl, r6
 8002ce4:	eb19 0309 	adds.w	r3, r9, r9
 8002ce8:	eb4a 040a 	adc.w	r4, sl, sl
 8002cec:	4699      	mov	r9, r3
 8002cee:	46a2      	mov	sl, r4
 8002cf0:	eb19 0905 	adds.w	r9, r9, r5
 8002cf4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d0c:	4689      	mov	r9, r1
 8002d0e:	4692      	mov	sl, r2
 8002d10:	eb19 0005 	adds.w	r0, r9, r5
 8002d14:	eb4a 0106 	adc.w	r1, sl, r6
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	461d      	mov	r5, r3
 8002d1e:	f04f 0600 	mov.w	r6, #0
 8002d22:	196b      	adds	r3, r5, r5
 8002d24:	eb46 0406 	adc.w	r4, r6, r6
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	f7fd fac0 	bl	80002b0 <__aeabi_uldivmod>
 8002d30:	4603      	mov	r3, r0
 8002d32:	460c      	mov	r4, r1
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b8b      	ldr	r3, [pc, #556]	; (8002f64 <UART_SetConfig+0x384>)
 8002d38:	fba3 1302 	umull	r1, r3, r3, r2
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	2164      	movs	r1, #100	; 0x64
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	3332      	adds	r3, #50	; 0x32
 8002d4a:	4a86      	ldr	r2, [pc, #536]	; (8002f64 <UART_SetConfig+0x384>)
 8002d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d58:	4498      	add	r8, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	461d      	mov	r5, r3
 8002d5e:	f04f 0600 	mov.w	r6, #0
 8002d62:	46a9      	mov	r9, r5
 8002d64:	46b2      	mov	sl, r6
 8002d66:	eb19 0309 	adds.w	r3, r9, r9
 8002d6a:	eb4a 040a 	adc.w	r4, sl, sl
 8002d6e:	4699      	mov	r9, r3
 8002d70:	46a2      	mov	sl, r4
 8002d72:	eb19 0905 	adds.w	r9, r9, r5
 8002d76:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d7a:	f04f 0100 	mov.w	r1, #0
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d8e:	4689      	mov	r9, r1
 8002d90:	4692      	mov	sl, r2
 8002d92:	eb19 0005 	adds.w	r0, r9, r5
 8002d96:	eb4a 0106 	adc.w	r1, sl, r6
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	461d      	mov	r5, r3
 8002da0:	f04f 0600 	mov.w	r6, #0
 8002da4:	196b      	adds	r3, r5, r5
 8002da6:	eb46 0406 	adc.w	r4, r6, r6
 8002daa:	461a      	mov	r2, r3
 8002dac:	4623      	mov	r3, r4
 8002dae:	f7fd fa7f 	bl	80002b0 <__aeabi_uldivmod>
 8002db2:	4603      	mov	r3, r0
 8002db4:	460c      	mov	r4, r1
 8002db6:	461a      	mov	r2, r3
 8002db8:	4b6a      	ldr	r3, [pc, #424]	; (8002f64 <UART_SetConfig+0x384>)
 8002dba:	fba3 1302 	umull	r1, r3, r3, r2
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2164      	movs	r1, #100	; 0x64
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	3332      	adds	r3, #50	; 0x32
 8002dcc:	4a65      	ldr	r2, [pc, #404]	; (8002f64 <UART_SetConfig+0x384>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	f003 0207 	and.w	r2, r3, #7
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4442      	add	r2, r8
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	e26f      	b.n	80032c2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002de2:	f7fe fc1b 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 8002de6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	461d      	mov	r5, r3
 8002dec:	f04f 0600 	mov.w	r6, #0
 8002df0:	46a8      	mov	r8, r5
 8002df2:	46b1      	mov	r9, r6
 8002df4:	eb18 0308 	adds.w	r3, r8, r8
 8002df8:	eb49 0409 	adc.w	r4, r9, r9
 8002dfc:	4698      	mov	r8, r3
 8002dfe:	46a1      	mov	r9, r4
 8002e00:	eb18 0805 	adds.w	r8, r8, r5
 8002e04:	eb49 0906 	adc.w	r9, r9, r6
 8002e08:	f04f 0100 	mov.w	r1, #0
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e1c:	4688      	mov	r8, r1
 8002e1e:	4691      	mov	r9, r2
 8002e20:	eb18 0005 	adds.w	r0, r8, r5
 8002e24:	eb49 0106 	adc.w	r1, r9, r6
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	461d      	mov	r5, r3
 8002e2e:	f04f 0600 	mov.w	r6, #0
 8002e32:	196b      	adds	r3, r5, r5
 8002e34:	eb46 0406 	adc.w	r4, r6, r6
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4623      	mov	r3, r4
 8002e3c:	f7fd fa38 	bl	80002b0 <__aeabi_uldivmod>
 8002e40:	4603      	mov	r3, r0
 8002e42:	460c      	mov	r4, r1
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <UART_SetConfig+0x384>)
 8002e48:	fba3 2302 	umull	r2, r3, r3, r2
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	461d      	mov	r5, r3
 8002e56:	f04f 0600 	mov.w	r6, #0
 8002e5a:	46a9      	mov	r9, r5
 8002e5c:	46b2      	mov	sl, r6
 8002e5e:	eb19 0309 	adds.w	r3, r9, r9
 8002e62:	eb4a 040a 	adc.w	r4, sl, sl
 8002e66:	4699      	mov	r9, r3
 8002e68:	46a2      	mov	sl, r4
 8002e6a:	eb19 0905 	adds.w	r9, r9, r5
 8002e6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e72:	f04f 0100 	mov.w	r1, #0
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e86:	4689      	mov	r9, r1
 8002e88:	4692      	mov	sl, r2
 8002e8a:	eb19 0005 	adds.w	r0, r9, r5
 8002e8e:	eb4a 0106 	adc.w	r1, sl, r6
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	461d      	mov	r5, r3
 8002e98:	f04f 0600 	mov.w	r6, #0
 8002e9c:	196b      	adds	r3, r5, r5
 8002e9e:	eb46 0406 	adc.w	r4, r6, r6
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4623      	mov	r3, r4
 8002ea6:	f7fd fa03 	bl	80002b0 <__aeabi_uldivmod>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	460c      	mov	r4, r1
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <UART_SetConfig+0x384>)
 8002eb2:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2164      	movs	r1, #100	; 0x64
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	3332      	adds	r3, #50	; 0x32
 8002ec4:	4a27      	ldr	r2, [pc, #156]	; (8002f64 <UART_SetConfig+0x384>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ed2:	4498      	add	r8, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	461d      	mov	r5, r3
 8002ed8:	f04f 0600 	mov.w	r6, #0
 8002edc:	46a9      	mov	r9, r5
 8002ede:	46b2      	mov	sl, r6
 8002ee0:	eb19 0309 	adds.w	r3, r9, r9
 8002ee4:	eb4a 040a 	adc.w	r4, sl, sl
 8002ee8:	4699      	mov	r9, r3
 8002eea:	46a2      	mov	sl, r4
 8002eec:	eb19 0905 	adds.w	r9, r9, r5
 8002ef0:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ef4:	f04f 0100 	mov.w	r1, #0
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f08:	4689      	mov	r9, r1
 8002f0a:	4692      	mov	sl, r2
 8002f0c:	eb19 0005 	adds.w	r0, r9, r5
 8002f10:	eb4a 0106 	adc.w	r1, sl, r6
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	461d      	mov	r5, r3
 8002f1a:	f04f 0600 	mov.w	r6, #0
 8002f1e:	196b      	adds	r3, r5, r5
 8002f20:	eb46 0406 	adc.w	r4, r6, r6
 8002f24:	461a      	mov	r2, r3
 8002f26:	4623      	mov	r3, r4
 8002f28:	f7fd f9c2 	bl	80002b0 <__aeabi_uldivmod>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	460c      	mov	r4, r1
 8002f30:	461a      	mov	r2, r3
 8002f32:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <UART_SetConfig+0x384>)
 8002f34:	fba3 1302 	umull	r1, r3, r3, r2
 8002f38:	095b      	lsrs	r3, r3, #5
 8002f3a:	2164      	movs	r1, #100	; 0x64
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	3332      	adds	r3, #50	; 0x32
 8002f46:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <UART_SetConfig+0x384>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	f003 0207 	and.w	r2, r3, #7
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4442      	add	r2, r8
 8002f58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002f5a:	e1b2      	b.n	80032c2 <UART_SetConfig+0x6e2>
 8002f5c:	40011000 	.word	0x40011000
 8002f60:	40011400 	.word	0x40011400
 8002f64:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4ad7      	ldr	r2, [pc, #860]	; (80032cc <UART_SetConfig+0x6ec>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d005      	beq.n	8002f7e <UART_SetConfig+0x39e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4ad6      	ldr	r2, [pc, #856]	; (80032d0 <UART_SetConfig+0x6f0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	f040 80d1 	bne.w	8003120 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f7e:	f7fe fb61 	bl	8001644 <HAL_RCC_GetPCLK2Freq>
 8002f82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	469a      	mov	sl, r3
 8002f88:	f04f 0b00 	mov.w	fp, #0
 8002f8c:	46d0      	mov	r8, sl
 8002f8e:	46d9      	mov	r9, fp
 8002f90:	eb18 0308 	adds.w	r3, r8, r8
 8002f94:	eb49 0409 	adc.w	r4, r9, r9
 8002f98:	4698      	mov	r8, r3
 8002f9a:	46a1      	mov	r9, r4
 8002f9c:	eb18 080a 	adds.w	r8, r8, sl
 8002fa0:	eb49 090b 	adc.w	r9, r9, fp
 8002fa4:	f04f 0100 	mov.w	r1, #0
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fb8:	4688      	mov	r8, r1
 8002fba:	4691      	mov	r9, r2
 8002fbc:	eb1a 0508 	adds.w	r5, sl, r8
 8002fc0:	eb4b 0609 	adc.w	r6, fp, r9
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	f04f 0400 	mov.w	r4, #0
 8002fd6:	0094      	lsls	r4, r2, #2
 8002fd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fdc:	008b      	lsls	r3, r1, #2
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4623      	mov	r3, r4
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	4631      	mov	r1, r6
 8002fe6:	f7fd f963 	bl	80002b0 <__aeabi_uldivmod>
 8002fea:	4603      	mov	r3, r0
 8002fec:	460c      	mov	r4, r1
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4bb8      	ldr	r3, [pc, #736]	; (80032d4 <UART_SetConfig+0x6f4>)
 8002ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	469b      	mov	fp, r3
 8003000:	f04f 0c00 	mov.w	ip, #0
 8003004:	46d9      	mov	r9, fp
 8003006:	46e2      	mov	sl, ip
 8003008:	eb19 0309 	adds.w	r3, r9, r9
 800300c:	eb4a 040a 	adc.w	r4, sl, sl
 8003010:	4699      	mov	r9, r3
 8003012:	46a2      	mov	sl, r4
 8003014:	eb19 090b 	adds.w	r9, r9, fp
 8003018:	eb4a 0a0c 	adc.w	sl, sl, ip
 800301c:	f04f 0100 	mov.w	r1, #0
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003028:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800302c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003030:	4689      	mov	r9, r1
 8003032:	4692      	mov	sl, r2
 8003034:	eb1b 0509 	adds.w	r5, fp, r9
 8003038:	eb4c 060a 	adc.w	r6, ip, sl
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4619      	mov	r1, r3
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	f04f 0400 	mov.w	r4, #0
 800304e:	0094      	lsls	r4, r2, #2
 8003050:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003054:	008b      	lsls	r3, r1, #2
 8003056:	461a      	mov	r2, r3
 8003058:	4623      	mov	r3, r4
 800305a:	4628      	mov	r0, r5
 800305c:	4631      	mov	r1, r6
 800305e:	f7fd f927 	bl	80002b0 <__aeabi_uldivmod>
 8003062:	4603      	mov	r3, r0
 8003064:	460c      	mov	r4, r1
 8003066:	461a      	mov	r2, r3
 8003068:	4b9a      	ldr	r3, [pc, #616]	; (80032d4 <UART_SetConfig+0x6f4>)
 800306a:	fba3 1302 	umull	r1, r3, r3, r2
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	2164      	movs	r1, #100	; 0x64
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	3332      	adds	r3, #50	; 0x32
 800307c:	4a95      	ldr	r2, [pc, #596]	; (80032d4 <UART_SetConfig+0x6f4>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003088:	4498      	add	r8, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	469b      	mov	fp, r3
 800308e:	f04f 0c00 	mov.w	ip, #0
 8003092:	46d9      	mov	r9, fp
 8003094:	46e2      	mov	sl, ip
 8003096:	eb19 0309 	adds.w	r3, r9, r9
 800309a:	eb4a 040a 	adc.w	r4, sl, sl
 800309e:	4699      	mov	r9, r3
 80030a0:	46a2      	mov	sl, r4
 80030a2:	eb19 090b 	adds.w	r9, r9, fp
 80030a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030aa:	f04f 0100 	mov.w	r1, #0
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030be:	4689      	mov	r9, r1
 80030c0:	4692      	mov	sl, r2
 80030c2:	eb1b 0509 	adds.w	r5, fp, r9
 80030c6:	eb4c 060a 	adc.w	r6, ip, sl
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4619      	mov	r1, r3
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	f04f 0400 	mov.w	r4, #0
 80030dc:	0094      	lsls	r4, r2, #2
 80030de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030e2:	008b      	lsls	r3, r1, #2
 80030e4:	461a      	mov	r2, r3
 80030e6:	4623      	mov	r3, r4
 80030e8:	4628      	mov	r0, r5
 80030ea:	4631      	mov	r1, r6
 80030ec:	f7fd f8e0 	bl	80002b0 <__aeabi_uldivmod>
 80030f0:	4603      	mov	r3, r0
 80030f2:	460c      	mov	r4, r1
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b77      	ldr	r3, [pc, #476]	; (80032d4 <UART_SetConfig+0x6f4>)
 80030f8:	fba3 1302 	umull	r1, r3, r3, r2
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	2164      	movs	r1, #100	; 0x64
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	3332      	adds	r3, #50	; 0x32
 800310a:	4a72      	ldr	r2, [pc, #456]	; (80032d4 <UART_SetConfig+0x6f4>)
 800310c:	fba2 2303 	umull	r2, r3, r2, r3
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	f003 020f 	and.w	r2, r3, #15
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4442      	add	r2, r8
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	e0d0      	b.n	80032c2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003120:	f7fe fa7c 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 8003124:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	469a      	mov	sl, r3
 800312a:	f04f 0b00 	mov.w	fp, #0
 800312e:	46d0      	mov	r8, sl
 8003130:	46d9      	mov	r9, fp
 8003132:	eb18 0308 	adds.w	r3, r8, r8
 8003136:	eb49 0409 	adc.w	r4, r9, r9
 800313a:	4698      	mov	r8, r3
 800313c:	46a1      	mov	r9, r4
 800313e:	eb18 080a 	adds.w	r8, r8, sl
 8003142:	eb49 090b 	adc.w	r9, r9, fp
 8003146:	f04f 0100 	mov.w	r1, #0
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003152:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003156:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800315a:	4688      	mov	r8, r1
 800315c:	4691      	mov	r9, r2
 800315e:	eb1a 0508 	adds.w	r5, sl, r8
 8003162:	eb4b 0609 	adc.w	r6, fp, r9
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4619      	mov	r1, r3
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	f04f 0400 	mov.w	r4, #0
 8003178:	0094      	lsls	r4, r2, #2
 800317a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800317e:	008b      	lsls	r3, r1, #2
 8003180:	461a      	mov	r2, r3
 8003182:	4623      	mov	r3, r4
 8003184:	4628      	mov	r0, r5
 8003186:	4631      	mov	r1, r6
 8003188:	f7fd f892 	bl	80002b0 <__aeabi_uldivmod>
 800318c:	4603      	mov	r3, r0
 800318e:	460c      	mov	r4, r1
 8003190:	461a      	mov	r2, r3
 8003192:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <UART_SetConfig+0x6f4>)
 8003194:	fba3 2302 	umull	r2, r3, r3, r2
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	469b      	mov	fp, r3
 80031a2:	f04f 0c00 	mov.w	ip, #0
 80031a6:	46d9      	mov	r9, fp
 80031a8:	46e2      	mov	sl, ip
 80031aa:	eb19 0309 	adds.w	r3, r9, r9
 80031ae:	eb4a 040a 	adc.w	r4, sl, sl
 80031b2:	4699      	mov	r9, r3
 80031b4:	46a2      	mov	sl, r4
 80031b6:	eb19 090b 	adds.w	r9, r9, fp
 80031ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031be:	f04f 0100 	mov.w	r1, #0
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031d2:	4689      	mov	r9, r1
 80031d4:	4692      	mov	sl, r2
 80031d6:	eb1b 0509 	adds.w	r5, fp, r9
 80031da:	eb4c 060a 	adc.w	r6, ip, sl
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4619      	mov	r1, r3
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	f04f 0400 	mov.w	r4, #0
 80031f0:	0094      	lsls	r4, r2, #2
 80031f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031f6:	008b      	lsls	r3, r1, #2
 80031f8:	461a      	mov	r2, r3
 80031fa:	4623      	mov	r3, r4
 80031fc:	4628      	mov	r0, r5
 80031fe:	4631      	mov	r1, r6
 8003200:	f7fd f856 	bl	80002b0 <__aeabi_uldivmod>
 8003204:	4603      	mov	r3, r0
 8003206:	460c      	mov	r4, r1
 8003208:	461a      	mov	r2, r3
 800320a:	4b32      	ldr	r3, [pc, #200]	; (80032d4 <UART_SetConfig+0x6f4>)
 800320c:	fba3 1302 	umull	r1, r3, r3, r2
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	2164      	movs	r1, #100	; 0x64
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	3332      	adds	r3, #50	; 0x32
 800321e:	4a2d      	ldr	r2, [pc, #180]	; (80032d4 <UART_SetConfig+0x6f4>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800322a:	4498      	add	r8, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	469b      	mov	fp, r3
 8003230:	f04f 0c00 	mov.w	ip, #0
 8003234:	46d9      	mov	r9, fp
 8003236:	46e2      	mov	sl, ip
 8003238:	eb19 0309 	adds.w	r3, r9, r9
 800323c:	eb4a 040a 	adc.w	r4, sl, sl
 8003240:	4699      	mov	r9, r3
 8003242:	46a2      	mov	sl, r4
 8003244:	eb19 090b 	adds.w	r9, r9, fp
 8003248:	eb4a 0a0c 	adc.w	sl, sl, ip
 800324c:	f04f 0100 	mov.w	r1, #0
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003258:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800325c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003260:	4689      	mov	r9, r1
 8003262:	4692      	mov	sl, r2
 8003264:	eb1b 0509 	adds.w	r5, fp, r9
 8003268:	eb4c 060a 	adc.w	r6, ip, sl
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4619      	mov	r1, r3
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	f04f 0400 	mov.w	r4, #0
 800327e:	0094      	lsls	r4, r2, #2
 8003280:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003284:	008b      	lsls	r3, r1, #2
 8003286:	461a      	mov	r2, r3
 8003288:	4623      	mov	r3, r4
 800328a:	4628      	mov	r0, r5
 800328c:	4631      	mov	r1, r6
 800328e:	f7fd f80f 	bl	80002b0 <__aeabi_uldivmod>
 8003292:	4603      	mov	r3, r0
 8003294:	460c      	mov	r4, r1
 8003296:	461a      	mov	r2, r3
 8003298:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <UART_SetConfig+0x6f4>)
 800329a:	fba3 1302 	umull	r1, r3, r3, r2
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2164      	movs	r1, #100	; 0x64
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	3332      	adds	r3, #50	; 0x32
 80032ac:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <UART_SetConfig+0x6f4>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	f003 020f 	and.w	r2, r3, #15
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4442      	add	r2, r8
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	e7ff      	b.n	80032c2 <UART_SetConfig+0x6e2>
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032cc:	40011000 	.word	0x40011000
 80032d0:	40011400 	.word	0x40011400
 80032d4:	51eb851f 	.word	0x51eb851f

080032d8 <CPWD_HAL_Init>:
U8 Tick100Ms = 0;
U8 Tisk1s = 0;

//! @last_edit : 08/01/2020
//! @details : CPWD init, called in main.c, simply call ""system_init""
void CPWD_HAL_Init(void) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
	System_Init();
 80032dc:	f000 fa08 	bl	80036f0 <System_Init>
}
 80032e0:	bf00      	nop
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <CPWD_HAL_Process>:

//! @last_edit : 08/01/2020
//! @details : CPWD process, called in main.c, used to link ""system"" to ""main""
//!		Used to handle SysTime (1ms, 10ms, 100ms, 1s)
void CPWD_HAL_Process(void) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
	System_Process();
 80032e8:	f000 fa14 	bl	8003714 <System_Process>

	if(Tick1Ms != 0) {
 80032ec:	4b12      	ldr	r3, [pc, #72]	; (8003338 <CPWD_HAL_Process+0x54>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d004      	beq.n	80032fe <CPWD_HAL_Process+0x1a>
		Tick1Ms = 0; // RESETING FLAG
 80032f4:	4b10      	ldr	r3, [pc, #64]	; (8003338 <CPWD_HAL_Process+0x54>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
		System_Process1ms();
 80032fa:	f000 fa12 	bl	8003722 <System_Process1ms>
	}

	if(Tick10Ms != 0) {
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <CPWD_HAL_Process+0x58>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <CPWD_HAL_Process+0x2c>
		Tick10Ms = 0; // RESETING FLAG
 8003306:	4b0d      	ldr	r3, [pc, #52]	; (800333c <CPWD_HAL_Process+0x58>)
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
		System_Process10ms();
 800330c:	f000 fa10 	bl	8003730 <System_Process10ms>
	}

	if(Tick100Ms != 0) {
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <CPWD_HAL_Process+0x5c>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <CPWD_HAL_Process+0x3e>
		Tick100Ms = 0; // RESETING FLAG
 8003318:	4b09      	ldr	r3, [pc, #36]	; (8003340 <CPWD_HAL_Process+0x5c>)
 800331a:	2200      	movs	r2, #0
 800331c:	701a      	strb	r2, [r3, #0]
		System_Process100ms();
 800331e:	f000 fa41 	bl	80037a4 <System_Process100ms>
	}

	if(Tisk1s != 0) {
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <CPWD_HAL_Process+0x60>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d004      	beq.n	8003334 <CPWD_HAL_Process+0x50>
		Tisk1s = 0; // RESETING FLAG
 800332a:	4b06      	ldr	r3, [pc, #24]	; (8003344 <CPWD_HAL_Process+0x60>)
 800332c:	2200      	movs	r2, #0
 800332e:	701a      	strb	r2, [r3, #0]
		System_Process1sec();
 8003330:	f000 fa50 	bl	80037d4 <System_Process1sec>
	}
}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000090 	.word	0x20000090
 800333c:	20000091 	.word	0x20000091
 8003340:	20000092 	.word	0x20000092
 8003344:	20000093 	.word	0x20000093

08003348 <HAL_SYSTICK_Callback>:

//! @last_edit : 08/01/2020
//! @details : SYSTICK CALLBACK, called each ms, counting to provide a SysTime (1ms, 10ms, 100ms, 1s)
void HAL_SYSTICK_Callback(void) {
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
	static U16 sousCompteur10ms = 0;
	static U16 sousCompteur100ms = 0;
	static U16 sousCompteur1s = 0;

	Tick1Ms = 1;
 800334c:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <HAL_SYSTICK_Callback+0x78>)
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]

	sousCompteur10ms++;
 8003352:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <HAL_SYSTICK_Callback+0x7c>)
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	3301      	adds	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_SYSTICK_Callback+0x7c>)
 800335c:	801a      	strh	r2, [r3, #0]
	if(sousCompteur10ms >= 10) {
 800335e:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <HAL_SYSTICK_Callback+0x7c>)
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	2b09      	cmp	r3, #9
 8003364:	d905      	bls.n	8003372 <HAL_SYSTICK_Callback+0x2a>
		Tick10Ms = 1; // RAISING FLAG
 8003366:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <HAL_SYSTICK_Callback+0x80>)
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
		sousCompteur10ms = 0;
 800336c:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <HAL_SYSTICK_Callback+0x7c>)
 800336e:	2200      	movs	r2, #0
 8003370:	801a      	strh	r2, [r3, #0]
	}

	sousCompteur100ms++;
 8003372:	4b16      	ldr	r3, [pc, #88]	; (80033cc <HAL_SYSTICK_Callback+0x84>)
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	4b14      	ldr	r3, [pc, #80]	; (80033cc <HAL_SYSTICK_Callback+0x84>)
 800337c:	801a      	strh	r2, [r3, #0]
	if(sousCompteur100ms >= 100) {
 800337e:	4b13      	ldr	r3, [pc, #76]	; (80033cc <HAL_SYSTICK_Callback+0x84>)
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	2b63      	cmp	r3, #99	; 0x63
 8003384:	d905      	bls.n	8003392 <HAL_SYSTICK_Callback+0x4a>
		Tick100Ms = 1; // RAISING FLAG
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <HAL_SYSTICK_Callback+0x88>)
 8003388:	2201      	movs	r2, #1
 800338a:	701a      	strb	r2, [r3, #0]
		sousCompteur100ms = 0;
 800338c:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <HAL_SYSTICK_Callback+0x84>)
 800338e:	2200      	movs	r2, #0
 8003390:	801a      	strh	r2, [r3, #0]
	}

	sousCompteur1s++;
 8003392:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <HAL_SYSTICK_Callback+0x8c>)
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	3301      	adds	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <HAL_SYSTICK_Callback+0x8c>)
 800339c:	801a      	strh	r2, [r3, #0]
	if(sousCompteur1s > 1000) {
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <HAL_SYSTICK_Callback+0x8c>)
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033a6:	d905      	bls.n	80033b4 <HAL_SYSTICK_Callback+0x6c>
		Tisk1s = 1; // RAISING FLAG
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_SYSTICK_Callback+0x90>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	701a      	strb	r2, [r3, #0]
		sousCompteur1s = 0;
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_SYSTICK_Callback+0x8c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	801a      	strh	r2, [r3, #0]
	}
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000090 	.word	0x20000090
 80033c4:	20000094 	.word	0x20000094
 80033c8:	20000091 	.word	0x20000091
 80033cc:	20000096 	.word	0x20000096
 80033d0:	20000092 	.word	0x20000092
 80033d4:	20000098 	.word	0x20000098
 80033d8:	20000093 	.word	0x20000093

080033dc <__io_putchar>:


//! @last_edit : 10/07/2020
//! @details : PRINTF TO UART handling
int __io_putchar(int ch)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USARTx and Loop until the end of transmission */
	while (HAL_OK != HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, HAL_MAX_DELAY))
 80033e4:	bf00      	nop
 80033e6:	1d39      	adds	r1, r7, #4
 80033e8:	f04f 33ff 	mov.w	r3, #4294967295
 80033ec:	2201      	movs	r2, #1
 80033ee:	4805      	ldr	r0, [pc, #20]	; (8003404 <__io_putchar+0x28>)
 80033f0:	f7ff f81b 	bl	800242a <HAL_UART_Transmit>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f5      	bne.n	80033e6 <__io_putchar+0xa>
	{
		;
	}
	return ch;
 80033fa:	687b      	ldr	r3, [r7, #4]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20000128 	.word	0x20000128

08003408 <SigFox_Init>:
U8 u8RxBuffer[50];
U8 u8ByteCount = 0;

//! @last_edit : 29/09/2020
//! @details :
void SigFox_Init(void) {
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
	sSystem.bSigFoxReady = false;
 800340c:	4b03      	ldr	r3, [pc, #12]	; (800341c <SigFox_Init+0x14>)
 800340e:	2200      	movs	r2, #0
 8003410:	715a      	strb	r2, [r3, #5]
}
 8003412:	bf00      	nop
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	200001b0 	.word	0x200001b0

08003420 <SigFox_Ask>:

//! START OF PRV FUNCTIONS
//! @last_edit : 07/10/2020
//! @details :
void SigFox_Ask(void) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
	eSigFox = WaitOK;
 8003426:	4b0d      	ldr	r3, [pc, #52]	; (800345c <SigFox_Ask+0x3c>)
 8003428:	2202      	movs	r2, #2
 800342a:	701a      	strb	r2, [r3, #0]
	U8 u8TempTxBuffer[3] = "AT\n";
 800342c:	4a0c      	ldr	r2, [pc, #48]	; (8003460 <SigFox_Ask+0x40>)
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	4611      	mov	r1, r2
 8003434:	8019      	strh	r1, [r3, #0]
 8003436:	3302      	adds	r3, #2
 8003438:	0c12      	lsrs	r2, r2, #16
 800343a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, u8RxBuffer, 1); //! RCV ONE BY ONE
 800343c:	2201      	movs	r2, #1
 800343e:	4909      	ldr	r1, [pc, #36]	; (8003464 <SigFox_Ask+0x44>)
 8003440:	4809      	ldr	r0, [pc, #36]	; (8003468 <SigFox_Ask+0x48>)
 8003442:	f7ff f88b 	bl	800255c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart1, u8TempTxBuffer, 3, HAL_MAX_DELAY);
 8003446:	1d39      	adds	r1, r7, #4
 8003448:	f04f 33ff 	mov.w	r3, #4294967295
 800344c:	2203      	movs	r2, #3
 800344e:	4806      	ldr	r0, [pc, #24]	; (8003468 <SigFox_Ask+0x48>)
 8003450:	f7fe ffeb 	bl	800242a <HAL_UART_Transmit>
}
 8003454:	bf00      	nop
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	2000009a 	.word	0x2000009a
 8003460:	080048e0 	.word	0x080048e0
 8003464:	2000016c 	.word	0x2000016c
 8003468:	200000a8 	.word	0x200000a8

0800346c <SigFox_AskID>:

//! @last_edit : 07/10/2020
//! @details :
void SigFox_AskID(void) {
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
	eSigFox = WaitID;
 8003472:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <SigFox_AskID+0x38>)
 8003474:	2204      	movs	r2, #4
 8003476:	701a      	strb	r2, [r3, #0]
	U8 u8TempTxBuffer[8] = "AT$I=10\n";
 8003478:	4a0b      	ldr	r2, [pc, #44]	; (80034a8 <SigFox_AskID+0x3c>)
 800347a:	463b      	mov	r3, r7
 800347c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003480:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_UART_Receive_IT(&huart1, u8RxBuffer, 1); //! RCV ONE BY ONE
 8003484:	2201      	movs	r2, #1
 8003486:	4909      	ldr	r1, [pc, #36]	; (80034ac <SigFox_AskID+0x40>)
 8003488:	4809      	ldr	r0, [pc, #36]	; (80034b0 <SigFox_AskID+0x44>)
 800348a:	f7ff f867 	bl	800255c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart1, u8TempTxBuffer, 8, HAL_MAX_DELAY);
 800348e:	4639      	mov	r1, r7
 8003490:	f04f 33ff 	mov.w	r3, #4294967295
 8003494:	2208      	movs	r2, #8
 8003496:	4806      	ldr	r0, [pc, #24]	; (80034b0 <SigFox_AskID+0x44>)
 8003498:	f7fe ffc7 	bl	800242a <HAL_UART_Transmit>
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	2000009a 	.word	0x2000009a
 80034a8:	080048e4 	.word	0x080048e4
 80034ac:	2000016c 	.word	0x2000016c
 80034b0:	200000a8 	.word	0x200000a8

080034b4 <SigFox_AskPAC>:

//! @last_edit : 07/10/2020
//! @details :
void SigFox_AskPAC(void) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
	eSigFox = WaitPAC;
 80034ba:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <SigFox_AskPAC+0x38>)
 80034bc:	2206      	movs	r2, #6
 80034be:	701a      	strb	r2, [r3, #0]
	U8 u8TempTxBuffer[8] = "AT$I=11\n";
 80034c0:	4a0b      	ldr	r2, [pc, #44]	; (80034f0 <SigFox_AskPAC+0x3c>)
 80034c2:	463b      	mov	r3, r7
 80034c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034c8:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_UART_Receive_IT(&huart1, u8RxBuffer, 1); //! RCV ONE BY ONE
 80034cc:	2201      	movs	r2, #1
 80034ce:	4909      	ldr	r1, [pc, #36]	; (80034f4 <SigFox_AskPAC+0x40>)
 80034d0:	4809      	ldr	r0, [pc, #36]	; (80034f8 <SigFox_AskPAC+0x44>)
 80034d2:	f7ff f843 	bl	800255c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart1, u8TempTxBuffer, 8, HAL_MAX_DELAY);
 80034d6:	4639      	mov	r1, r7
 80034d8:	f04f 33ff 	mov.w	r3, #4294967295
 80034dc:	2208      	movs	r2, #8
 80034de:	4806      	ldr	r0, [pc, #24]	; (80034f8 <SigFox_AskPAC+0x44>)
 80034e0:	f7fe ffa3 	bl	800242a <HAL_UART_Transmit>
}
 80034e4:	bf00      	nop
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	2000009a 	.word	0x2000009a
 80034f0:	080048f0 	.word	0x080048f0
 80034f4:	2000016c 	.word	0x2000016c
 80034f8:	200000a8 	.word	0x200000a8

080034fc <SigFox_Process>:
//! END OF PRV FUNCTIONS

//! @last_edit : 07/10/2020
//! @details :
void SigFox_Process(void) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
	switch(eSigFox) {
 8003500:	4b22      	ldr	r3, [pc, #136]	; (800358c <SigFox_Process+0x90>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b09      	cmp	r3, #9
 8003506:	d83d      	bhi.n	8003584 <SigFox_Process+0x88>
 8003508:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <SigFox_Process+0x14>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003539 	.word	0x08003539
 8003514:	08003585 	.word	0x08003585
 8003518:	08003585 	.word	0x08003585
 800351c:	0800353f 	.word	0x0800353f
 8003520:	08003585 	.word	0x08003585
 8003524:	0800354b 	.word	0x0800354b
 8003528:	08003585 	.word	0x08003585
 800352c:	0800355f 	.word	0x0800355f
 8003530:	08003585 	.word	0x08003585
 8003534:	08003575 	.word	0x08003575
		case NOT_CONNECTED:
			SigFox_Ask();
 8003538:	f7ff ff72 	bl	8003420 <SigFox_Ask>
			break;
 800353c:	e023      	b.n	8003586 <SigFox_Process+0x8a>
		case GotOK:
			u8ByteCount = 0;
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <SigFox_Process+0x94>)
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
			SigFox_AskID();
 8003544:	f7ff ff92 	bl	800346c <SigFox_AskID>
			break;
 8003548:	e01d      	b.n	8003586 <SigFox_Process+0x8a>
		case GotID:
			u8ByteCount = 0;
 800354a:	4b11      	ldr	r3, [pc, #68]	; (8003590 <SigFox_Process+0x94>)
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
			printf("ID : %s", u8RxBuffer);
 8003550:	4910      	ldr	r1, [pc, #64]	; (8003594 <SigFox_Process+0x98>)
 8003552:	4811      	ldr	r0, [pc, #68]	; (8003598 <SigFox_Process+0x9c>)
 8003554:	f000 fad4 	bl	8003b00 <iprintf>
			SigFox_AskPAC();
 8003558:	f7ff ffac 	bl	80034b4 <SigFox_AskPAC>
			break;
 800355c:	e013      	b.n	8003586 <SigFox_Process+0x8a>
		case GotPAC:
			printf("PAC : %s", u8RxBuffer);
 800355e:	490d      	ldr	r1, [pc, #52]	; (8003594 <SigFox_Process+0x98>)
 8003560:	480e      	ldr	r0, [pc, #56]	; (800359c <SigFox_Process+0xa0>)
 8003562:	f000 facd 	bl	8003b00 <iprintf>
			eSigFox = IDLE;
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <SigFox_Process+0x90>)
 8003568:	2201      	movs	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
			sSystem.bSigFoxReady = true;
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <SigFox_Process+0xa4>)
 800356e:	2201      	movs	r2, #1
 8003570:	715a      	strb	r2, [r3, #5]
			break;
 8003572:	e008      	b.n	8003586 <SigFox_Process+0x8a>
		case ACKTemp:
			printf("%s", u8RxBuffer);
 8003574:	4907      	ldr	r1, [pc, #28]	; (8003594 <SigFox_Process+0x98>)
 8003576:	480b      	ldr	r0, [pc, #44]	; (80035a4 <SigFox_Process+0xa8>)
 8003578:	f000 fac2 	bl	8003b00 <iprintf>
			eSigFox = IDLE;
 800357c:	4b03      	ldr	r3, [pc, #12]	; (800358c <SigFox_Process+0x90>)
 800357e:	2201      	movs	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
			break;
 8003582:	e000      	b.n	8003586 <SigFox_Process+0x8a>
		default:
			//! DO NOTHING
			break;
 8003584:	bf00      	nop
	}
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	2000009a 	.word	0x2000009a
 8003590:	2000009b 	.word	0x2000009b
 8003594:	2000016c 	.word	0x2000016c
 8003598:	080048fc 	.word	0x080048fc
 800359c:	08004904 	.word	0x08004904
 80035a0:	200001b0 	.word	0x200001b0
 80035a4:	08004910 	.word	0x08004910

080035a8 <SigFox_SendTemp>:

//! @last_edit : 07/10/2020
//! @details :
void SigFox_SendTemp(void) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
	eSigFox = SendTemp;
 80035ae:	4b1f      	ldr	r3, [pc, #124]	; (800362c <SigFox_SendTemp+0x84>)
 80035b0:	2208      	movs	r2, #8
 80035b2:	701a      	strb	r2, [r3, #0]
	sSystem.bSigFoxReady = false;
 80035b4:	4b1e      	ldr	r3, [pc, #120]	; (8003630 <SigFox_SendTemp+0x88>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	715a      	strb	r2, [r3, #5]
	U8 u8TempTxBuffer[9] = "AT$SF=XX\n";
 80035ba:	4a1e      	ldr	r2, [pc, #120]	; (8003634 <SigFox_SendTemp+0x8c>)
 80035bc:	1d3b      	adds	r3, r7, #4
 80035be:	ca07      	ldmia	r2, {r0, r1, r2}
 80035c0:	c303      	stmia	r3!, {r0, r1}
 80035c2:	701a      	strb	r2, [r3, #0]
	u8TempTxBuffer[6] = 48 + (sSystem.s8Temp / 10);
 80035c4:	4b1a      	ldr	r3, [pc, #104]	; (8003630 <SigFox_SendTemp+0x88>)
 80035c6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80035ca:	4a1b      	ldr	r2, [pc, #108]	; (8003638 <SigFox_SendTemp+0x90>)
 80035cc:	fb82 1203 	smull	r1, r2, r2, r3
 80035d0:	1092      	asrs	r2, r2, #2
 80035d2:	17db      	asrs	r3, r3, #31
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	b25b      	sxtb	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	3330      	adds	r3, #48	; 0x30
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	72bb      	strb	r3, [r7, #10]
	u8TempTxBuffer[7] = 48 + (sSystem.s8Temp % 10);
 80035e0:	4b13      	ldr	r3, [pc, #76]	; (8003630 <SigFox_SendTemp+0x88>)
 80035e2:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80035e6:	4b14      	ldr	r3, [pc, #80]	; (8003638 <SigFox_SendTemp+0x90>)
 80035e8:	fb83 1302 	smull	r1, r3, r3, r2
 80035ec:	1099      	asrs	r1, r3, #2
 80035ee:	17d3      	asrs	r3, r2, #31
 80035f0:	1ac9      	subs	r1, r1, r3
 80035f2:	460b      	mov	r3, r1
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	3330      	adds	r3, #48	; 0x30
 8003602:	b2db      	uxtb	r3, r3
 8003604:	72fb      	strb	r3, [r7, #11]

	HAL_UART_AbortReceive_IT(&huart1);
 8003606:	480d      	ldr	r0, [pc, #52]	; (800363c <SigFox_SendTemp+0x94>)
 8003608:	f7fe fffe 	bl	8002608 <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(&huart1, u8RxBuffer, 1); //! RCV ONE BY ONE
 800360c:	2201      	movs	r2, #1
 800360e:	490c      	ldr	r1, [pc, #48]	; (8003640 <SigFox_SendTemp+0x98>)
 8003610:	480a      	ldr	r0, [pc, #40]	; (800363c <SigFox_SendTemp+0x94>)
 8003612:	f7fe ffa3 	bl	800255c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart1, u8TempTxBuffer, 9, HAL_MAX_DELAY);
 8003616:	1d39      	adds	r1, r7, #4
 8003618:	f04f 33ff 	mov.w	r3, #4294967295
 800361c:	2209      	movs	r2, #9
 800361e:	4807      	ldr	r0, [pc, #28]	; (800363c <SigFox_SendTemp+0x94>)
 8003620:	f7fe ff03 	bl	800242a <HAL_UART_Transmit>
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	2000009a 	.word	0x2000009a
 8003630:	200001b0 	.word	0x200001b0
 8003634:	08004914 	.word	0x08004914
 8003638:	66666667 	.word	0x66666667
 800363c:	200000a8 	.word	0x200000a8
 8003640:	2000016c 	.word	0x2000016c

08003644 <HAL_UART_RxCpltCallback>:
/***************************************************************************************************************************
 *  fonction  : HAL_UART_RxCpltCallback
 *  commentaire : callback pour les UART²
 **************************************************************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance && eSigFox != IDLE) {
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <HAL_UART_RxCpltCallback+0x60>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d121      	bne.n	800369c <HAL_UART_RxCpltCallback+0x58>
 8003658:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <HAL_UART_RxCpltCallback+0x64>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d01d      	beq.n	800369c <HAL_UART_RxCpltCallback+0x58>
		if(u8RxBuffer[u8ByteCount] != '\n') { //! CHECK if this is the end of the CMD
 8003660:	4b12      	ldr	r3, [pc, #72]	; (80036ac <HAL_UART_RxCpltCallback+0x68>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <HAL_UART_RxCpltCallback+0x6c>)
 8003668:	5c9b      	ldrb	r3, [r3, r2]
 800366a:	2b0a      	cmp	r3, #10
 800366c:	d010      	beq.n	8003690 <HAL_UART_RxCpltCallback+0x4c>
			u8ByteCount++;
 800366e:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <HAL_UART_RxCpltCallback+0x68>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	3301      	adds	r3, #1
 8003674:	b2da      	uxtb	r2, r3
 8003676:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <HAL_UART_RxCpltCallback+0x68>)
 8003678:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, u8RxBuffer + u8ByteCount, 1); //! RCV ANOTHER ONE
 800367a:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <HAL_UART_RxCpltCallback+0x68>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_UART_RxCpltCallback+0x6c>)
 8003682:	4413      	add	r3, r2
 8003684:	2201      	movs	r2, #1
 8003686:	4619      	mov	r1, r3
 8003688:	4806      	ldr	r0, [pc, #24]	; (80036a4 <HAL_UART_RxCpltCallback+0x60>)
 800368a:	f7fe ff67 	bl	800255c <HAL_UART_Receive_IT>
		} else {
			eSigFox++;
		}
	}
}
 800368e:	e005      	b.n	800369c <HAL_UART_RxCpltCallback+0x58>
			eSigFox++;
 8003690:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_UART_RxCpltCallback+0x64>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	b2da      	uxtb	r2, r3
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_UART_RxCpltCallback+0x64>)
 800369a:	701a      	strb	r2, [r3, #0]
}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	200000a8 	.word	0x200000a8
 80036a8:	2000009a 	.word	0x2000009a
 80036ac:	2000009b 	.word	0x2000009b
 80036b0:	2000016c 	.word	0x2000016c

080036b4 <HAL_UART_ErrorCallback>:
/***************************************************************************************************************************
 *  fonction  : HAL_UART_ErrorCallback
 *  commentaire : callback de l'IT error UART
 **************************************************************************************************************************/
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance) {
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <HAL_UART_ErrorCallback+0x30>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d108      	bne.n	80036da <HAL_UART_ErrorCallback+0x26>
		u8ByteCount = 0;
 80036c8:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <HAL_UART_ErrorCallback+0x34>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]
		eSigFox = IDLE;
 80036ce:	4b07      	ldr	r3, [pc, #28]	; (80036ec <HAL_UART_ErrorCallback+0x38>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	701a      	strb	r2, [r3, #0]

		HAL_UART_AbortReceive_IT(huart);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7fe ff97 	bl	8002608 <HAL_UART_AbortReceive_IT>
	}
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	200000a8 	.word	0x200000a8
 80036e8:	2000009b 	.word	0x2000009b
 80036ec:	2000009a 	.word	0x2000009a

080036f0 <System_Init>:
TsSystem sSystem;
#define me sSystem

//! @last_edit : 20/02/2020
//! @details : Initiate the system, clearing variables and calling specifics functions
void System_Init(void) {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
	me.bTempCaptConnected = false;
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <System_Init+0x20>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
	me.s16RawTemp = 0;
 80036fa:	4b05      	ldr	r3, [pc, #20]	; (8003710 <System_Init+0x20>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	805a      	strh	r2, [r3, #2]
	me.s8Temp = 0;
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <System_Init+0x20>)
 8003702:	2200      	movs	r2, #0
 8003704:	711a      	strb	r2, [r3, #4]

	SigFox_Init();
 8003706:	f7ff fe7f 	bl	8003408 <SigFox_Init>
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	200001b0 	.word	0x200001b0

08003714 <System_Process>:

void System_Process(void) {
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0

}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <System_Process1ms>:

//! @last_edit : 08/01/2020
//! @details : Called each 1ms, ...
void System_Process1ms(void) {
 8003722:	b480      	push	{r7}
 8003724:	af00      	add	r7, sp, #0

}
 8003726:	bf00      	nop
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <System_Process10ms>:

//! @last_edit : 08/01/2020
//! @details : Called each 10ms, calling UART process, ...
void System_Process10ms(void) {
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
	static U8 u8TempoBTN = 0;

	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
 8003734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003738:	4817      	ldr	r0, [pc, #92]	; (8003798 <System_Process10ms+0x68>)
 800373a:	f7fd fe31 	bl	80013a0 <HAL_GPIO_ReadPin>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <System_Process10ms+0x2a>
		if(u8TempoBTN > 0) u8TempoBTN--;
 8003744:	4b15      	ldr	r3, [pc, #84]	; (800379c <System_Process10ms+0x6c>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d010      	beq.n	800376e <System_Process10ms+0x3e>
 800374c:	4b13      	ldr	r3, [pc, #76]	; (800379c <System_Process10ms+0x6c>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	3b01      	subs	r3, #1
 8003752:	b2da      	uxtb	r2, r3
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <System_Process10ms+0x6c>)
 8003756:	701a      	strb	r2, [r3, #0]
 8003758:	e009      	b.n	800376e <System_Process10ms+0x3e>
	} else {
		if(u8TempoBTN < 0xFF) u8TempoBTN++;
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <System_Process10ms+0x6c>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2bff      	cmp	r3, #255	; 0xff
 8003760:	d005      	beq.n	800376e <System_Process10ms+0x3e>
 8003762:	4b0e      	ldr	r3, [pc, #56]	; (800379c <System_Process10ms+0x6c>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	3301      	adds	r3, #1
 8003768:	b2da      	uxtb	r2, r3
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <System_Process10ms+0x6c>)
 800376c:	701a      	strb	r2, [r3, #0]
	}

	if(u8TempoBTN >= 30 && me.bSigFoxReady) {
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <System_Process10ms+0x6c>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b1d      	cmp	r3, #29
 8003774:	d906      	bls.n	8003784 <System_Process10ms+0x54>
 8003776:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <System_Process10ms+0x70>)
 8003778:	795b      	ldrb	r3, [r3, #5]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <System_Process10ms+0x54>
		SigFox_SendTemp();
 800377e:	f7ff ff13 	bl	80035a8 <SigFox_SendTemp>
	} else if(u8TempoBTN == 0) {
		me.bSigFoxReady = true;
	}
}
 8003782:	e006      	b.n	8003792 <System_Process10ms+0x62>
	} else if(u8TempoBTN == 0) {
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <System_Process10ms+0x6c>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <System_Process10ms+0x62>
		me.bSigFoxReady = true;
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <System_Process10ms+0x70>)
 800378e:	2201      	movs	r2, #1
 8003790:	715a      	strb	r2, [r3, #5]
}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40020800 	.word	0x40020800
 800379c:	2000009c 	.word	0x2000009c
 80037a0:	200001b0 	.word	0x200001b0

080037a4 <System_Process100ms>:

//! @last_edit : 19/02/2020
//! @details : Called each 100 ms, ...
void System_Process100ms(void) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
	SigFox_Process();
 80037a8:	f7ff fea8 	bl	80034fc <SigFox_Process>

	if(me.bTempCaptConnected) {
 80037ac:	4b07      	ldr	r3, [pc, #28]	; (80037cc <System_Process100ms+0x28>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <System_Process100ms+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80037b4:	2120      	movs	r1, #32
 80037b6:	4806      	ldr	r0, [pc, #24]	; (80037d0 <System_Process100ms+0x2c>)
 80037b8:	f7fd fe23 	bl	8001402 <HAL_GPIO_TogglePin>
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	}
}
 80037bc:	e004      	b.n	80037c8 <System_Process100ms+0x24>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80037be:	2200      	movs	r2, #0
 80037c0:	2120      	movs	r1, #32
 80037c2:	4803      	ldr	r0, [pc, #12]	; (80037d0 <System_Process100ms+0x2c>)
 80037c4:	f7fd fe04 	bl	80013d0 <HAL_GPIO_WritePin>
}
 80037c8:	bf00      	nop
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	200001b0 	.word	0x200001b0
 80037d0:	40020000 	.word	0x40020000

080037d4 <System_Process1sec>:

//! @last_edit : 08/01/2020
//! @details : Called each 1s, ...
void System_Process1sec(void) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
	static U8 u8TempoS = 0;

	if(u8TempoS >= 2) {
 80037d8:	4b30      	ldr	r3, [pc, #192]	; (800389c <System_Process1sec+0xc8>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d955      	bls.n	800388c <System_Process1sec+0xb8>
		me.bTempCaptConnected = _1Wire_Reset();
 80037e0:	f000 f8f2 	bl	80039c8 <_1Wire_Reset>
 80037e4:	4603      	mov	r3, r0
 80037e6:	461a      	mov	r2, r3
 80037e8:	4b2d      	ldr	r3, [pc, #180]	; (80038a0 <System_Process1sec+0xcc>)
 80037ea:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80037ec:	2001      	movs	r0, #1
 80037ee:	f7fd faef 	bl	8000dd0 <HAL_Delay>
		if(me.bTempCaptConnected) {
 80037f2:	4b2b      	ldr	r3, [pc, #172]	; (80038a0 <System_Process1sec+0xcc>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d044      	beq.n	8003884 <System_Process1sec+0xb0>
			_1Wire_WriteByte(0xCC);
 80037fa:	20cc      	movs	r0, #204	; 0xcc
 80037fc:	f000 f92e 	bl	8003a5c <_1Wire_WriteByte>
			_1Wire_WriteByte(0x44);
 8003800:	2044      	movs	r0, #68	; 0x44
 8003802:	f000 f92b 	bl	8003a5c <_1Wire_WriteByte>

			HAL_Delay(10);
 8003806:	200a      	movs	r0, #10
 8003808:	f7fd fae2 	bl	8000dd0 <HAL_Delay>

			me.bTempCaptConnected = _1Wire_Reset();
 800380c:	f000 f8dc 	bl	80039c8 <_1Wire_Reset>
 8003810:	4603      	mov	r3, r0
 8003812:	461a      	mov	r2, r3
 8003814:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <System_Process1sec+0xcc>)
 8003816:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1);
 8003818:	2001      	movs	r0, #1
 800381a:	f7fd fad9 	bl	8000dd0 <HAL_Delay>
			if(me.bTempCaptConnected) {
 800381e:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <System_Process1sec+0xcc>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d02e      	beq.n	8003884 <System_Process1sec+0xb0>
				_1Wire_WriteByte(0xCC);
 8003826:	20cc      	movs	r0, #204	; 0xcc
 8003828:	f000 f918 	bl	8003a5c <_1Wire_WriteByte>
				_1Wire_WriteByte(0xBE);
 800382c:	20be      	movs	r0, #190	; 0xbe
 800382e:	f000 f915 	bl	8003a5c <_1Wire_WriteByte>
				me.s16RawTemp = _1Wire_ReadByte();
 8003832:	f000 f8f5 	bl	8003a20 <_1Wire_ReadByte>
 8003836:	4603      	mov	r3, r0
 8003838:	b29a      	uxth	r2, r3
 800383a:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <System_Process1sec+0xcc>)
 800383c:	805a      	strh	r2, [r3, #2]
				me.s16RawTemp += _1Wire_ReadByte() << 8;
 800383e:	f000 f8ef 	bl	8003a20 <_1Wire_ReadByte>
 8003842:	4603      	mov	r3, r0
 8003844:	0219      	lsls	r1, r3, #8
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <System_Process1sec+0xcc>)
 8003848:	885a      	ldrh	r2, [r3, #2]
 800384a:	b28b      	uxth	r3, r1
 800384c:	4413      	add	r3, r2
 800384e:	b29a      	uxth	r2, r3
 8003850:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <System_Process1sec+0xcc>)
 8003852:	805a      	strh	r2, [r3, #2]

				me.s8Temp = 125 * me.s16RawTemp / 250;
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <System_Process1sec+0xcc>)
 8003856:	885b      	ldrh	r3, [r3, #2]
 8003858:	461a      	mov	r2, r3
 800385a:	4613      	mov	r3, r2
 800385c:	015b      	lsls	r3, r3, #5
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	4a0f      	ldr	r2, [pc, #60]	; (80038a4 <System_Process1sec+0xd0>)
 8003866:	fb82 1203 	smull	r1, r2, r2, r3
 800386a:	1112      	asrs	r2, r2, #4
 800386c:	17db      	asrs	r3, r3, #31
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	b25a      	sxtb	r2, r3
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <System_Process1sec+0xcc>)
 8003874:	711a      	strb	r2, [r3, #4]

				printf("Temp : %d°C\r\n", me.s8Temp);
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <System_Process1sec+0xcc>)
 8003878:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800387c:	4619      	mov	r1, r3
 800387e:	480a      	ldr	r0, [pc, #40]	; (80038a8 <System_Process1sec+0xd4>)
 8003880:	f000 f93e 	bl	8003b00 <iprintf>
			}
		}

		u8TempoS = 0;
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <System_Process1sec+0xc8>)
 8003886:	2200      	movs	r2, #0
 8003888:	701a      	strb	r2, [r3, #0]
	} else {
		u8TempoS++;
	}
}
 800388a:	e005      	b.n	8003898 <System_Process1sec+0xc4>
		u8TempoS++;
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <System_Process1sec+0xc8>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	3301      	adds	r3, #1
 8003892:	b2da      	uxtb	r2, r3
 8003894:	4b01      	ldr	r3, [pc, #4]	; (800389c <System_Process1sec+0xc8>)
 8003896:	701a      	strb	r2, [r3, #0]
}
 8003898:	bf00      	nop
 800389a:	bd80      	pop	{r7, pc}
 800389c:	2000009d 	.word	0x2000009d
 80038a0:	200001b0 	.word	0x200001b0
 80038a4:	10624dd3 	.word	0x10624dd3
 80038a8:	08004920 	.word	0x08004920

080038ac <DelayUS>:
U16 test = 0;
TIM_HandleTypeDef htim1;

//! Private Functions
//! Simple delay function, blocking
void DelayUS(U16 u16uS) {
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_ENABLE(&htim1); //! Start the counter
 80038b6:	4b18      	ldr	r3, [pc, #96]	; (8003918 <DelayUS+0x6c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4b16      	ldr	r3, [pc, #88]	; (8003918 <DelayUS+0x6c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0201 	orr.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80038c6:	4b14      	ldr	r3, [pc, #80]	; (8003918 <DelayUS+0x6c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2200      	movs	r2, #0
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24

	while(__HAL_TIM_GET_COUNTER(&htim1) < u16uS) { }
 80038ce:	bf00      	nop
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <DelayUS+0x6c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d3f9      	bcc.n	80038d0 <DelayUS+0x24>

	__HAL_TIM_DISABLE(&htim1); //! Stop the counter
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <DelayUS+0x6c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6a1a      	ldr	r2, [r3, #32]
 80038e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80038e6:	4013      	ands	r3, r2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10f      	bne.n	800390c <DelayUS+0x60>
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <DelayUS+0x6c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6a1a      	ldr	r2, [r3, #32]
 80038f2:	f240 4344 	movw	r3, #1092	; 0x444
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d107      	bne.n	800390c <DelayUS+0x60>
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <DelayUS+0x6c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <DelayUS+0x6c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	200000e8 	.word	0x200000e8

0800391c <_1Wire_WriteBit0>:

void _1Wire_WriteBit0(void) {
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_1W_PIN_GPIO_Port, _1W_PIN_Pin, GPIO_PIN_RESET);//_1W_PIN_GPIO_Port->BSRR = _1W_PIN_Pin << 16U; //! Drive bus LOW
 8003920:	2200      	movs	r2, #0
 8003922:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003926:	4808      	ldr	r0, [pc, #32]	; (8003948 <_1Wire_WriteBit0+0x2c>)
 8003928:	f7fd fd52 	bl	80013d0 <HAL_GPIO_WritePin>
	DelayUS(60); //! Sleep time 1
 800392c:	203c      	movs	r0, #60	; 0x3c
 800392e:	f7ff ffbd 	bl	80038ac <DelayUS>

	HAL_GPIO_WritePin(_1W_PIN_GPIO_Port, _1W_PIN_Pin, GPIO_PIN_SET);//_1W_PIN_GPIO_Port->BSRR = _1W_PIN_Pin; //! Releasing bus
 8003932:	2201      	movs	r2, #1
 8003934:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003938:	4803      	ldr	r0, [pc, #12]	; (8003948 <_1Wire_WriteBit0+0x2c>)
 800393a:	f7fd fd49 	bl	80013d0 <HAL_GPIO_WritePin>
	DelayUS(10); //! Recovery time
 800393e:	200a      	movs	r0, #10
 8003940:	f7ff ffb4 	bl	80038ac <DelayUS>
}
 8003944:	bf00      	nop
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40020800 	.word	0x40020800

0800394c <_1Wire_WriteBit1>:

void _1Wire_WriteBit1(void) {
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_1W_PIN_GPIO_Port, _1W_PIN_Pin, GPIO_PIN_RESET);//_1W_PIN_GPIO_Port->BSRR = _1W_PIN_Pin << 16U; //! Drive bus LOW
 8003950:	2200      	movs	r2, #0
 8003952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003956:	4808      	ldr	r0, [pc, #32]	; (8003978 <_1Wire_WriteBit1+0x2c>)
 8003958:	f7fd fd3a 	bl	80013d0 <HAL_GPIO_WritePin>
	DelayUS(6); //! Sleep time 1
 800395c:	2006      	movs	r0, #6
 800395e:	f7ff ffa5 	bl	80038ac <DelayUS>

	HAL_GPIO_WritePin(_1W_PIN_GPIO_Port, _1W_PIN_Pin, GPIO_PIN_SET);//_1W_PIN_GPIO_Port->BSRR = _1W_PIN_Pin; //! Releasing bus
 8003962:	2201      	movs	r2, #1
 8003964:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003968:	4803      	ldr	r0, [pc, #12]	; (8003978 <_1Wire_WriteBit1+0x2c>)
 800396a:	f7fd fd31 	bl	80013d0 <HAL_GPIO_WritePin>
	DelayUS(64); //! Sleep time 2 (54) + Recovery time (10)
 800396e:	2040      	movs	r0, #64	; 0x40
 8003970:	f7ff ff9c 	bl	80038ac <DelayUS>
}
 8003974:	bf00      	nop
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40020800 	.word	0x40020800

0800397c <_1Wire_ReadBit>:

GPIO_PinState _1Wire_ReadBit(void) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
	GPIO_PinState stPin; //! Bus status variable

	HAL_GPIO_WritePin(_1W_PIN_GPIO_Port, _1W_PIN_Pin, GPIO_PIN_RESET);//_1W_PIN_GPIO_Port->BSRR = _1W_PIN_Pin << 16U; //! Drive bus LOW
 8003982:	2200      	movs	r2, #0
 8003984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003988:	480e      	ldr	r0, [pc, #56]	; (80039c4 <_1Wire_ReadBit+0x48>)
 800398a:	f7fd fd21 	bl	80013d0 <HAL_GPIO_WritePin>
	DelayUS(6); //! Sleep time 1
 800398e:	2006      	movs	r0, #6
 8003990:	f7ff ff8c 	bl	80038ac <DelayUS>

	HAL_GPIO_WritePin(_1W_PIN_GPIO_Port, _1W_PIN_Pin, GPIO_PIN_SET);//_1W_PIN_GPIO_Port->BSRR = _1W_PIN_Pin; //! Releasing bus
 8003994:	2201      	movs	r2, #1
 8003996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800399a:	480a      	ldr	r0, [pc, #40]	; (80039c4 <_1Wire_ReadBit+0x48>)
 800399c:	f7fd fd18 	bl	80013d0 <HAL_GPIO_WritePin>
	DelayUS(9); //! Sleep time 2
 80039a0:	2009      	movs	r0, #9
 80039a2:	f7ff ff83 	bl	80038ac <DelayUS>

	stPin = HAL_GPIO_ReadPin(_1W_PIN_GPIO_Port, _1W_PIN_Pin);//(_1W_PIN_GPIO_Port->IDR & _1W_PIN_Pin) != GPIO_PIN_RESET; //! Sampling the bus
 80039a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039aa:	4806      	ldr	r0, [pc, #24]	; (80039c4 <_1Wire_ReadBit+0x48>)
 80039ac:	f7fd fcf8 	bl	80013a0 <HAL_GPIO_ReadPin>
 80039b0:	4603      	mov	r3, r0
 80039b2:	71fb      	strb	r3, [r7, #7]
	DelayUS(55); //! Sleep time 2 (45) + Recovery time (10)
 80039b4:	2037      	movs	r0, #55	; 0x37
 80039b6:	f7ff ff79 	bl	80038ac <DelayUS>

	return stPin;
 80039ba:	79fb      	ldrb	r3, [r7, #7]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40020800 	.word	0x40020800

080039c8 <_1Wire_Reset>:

bool _1Wire_Reset(void) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
	bool bSensor; //! Sensor presence

	HAL_GPIO_WritePin(_1W_PIN_GPIO_Port, _1W_PIN_Pin, GPIO_PIN_RESET); //_1W_PIN_GPIO_Port->BSRR = _1W_PIN_Pin << 16U; //! Drive bus LOW
 80039ce:	2200      	movs	r2, #0
 80039d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039d4:	4811      	ldr	r0, [pc, #68]	; (8003a1c <_1Wire_Reset+0x54>)
 80039d6:	f7fd fcfb 	bl	80013d0 <HAL_GPIO_WritePin>
	DelayUS(480); //! Sleep time 1
 80039da:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80039de:	f7ff ff65 	bl	80038ac <DelayUS>

	HAL_GPIO_WritePin(_1W_PIN_GPIO_Port, _1W_PIN_Pin, GPIO_PIN_SET); //1W_PIN_GPIO_Port->BSRR = _1W_PIN_Pin; //! Releasing bus
 80039e2:	2201      	movs	r2, #1
 80039e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039e8:	480c      	ldr	r0, [pc, #48]	; (8003a1c <_1Wire_Reset+0x54>)
 80039ea:	f7fd fcf1 	bl	80013d0 <HAL_GPIO_WritePin>
	DelayUS(70); //! Sleep time 2
 80039ee:	2046      	movs	r0, #70	; 0x46
 80039f0:	f7ff ff5c 	bl	80038ac <DelayUS>

	bSensor = !HAL_GPIO_ReadPin(_1W_PIN_GPIO_Port, _1W_PIN_Pin); //(_1W_PIN_GPIO_Port->IDR & _1W_PIN_Pin) == GPIO_PIN_RESET; //! Sampling the bus
 80039f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039f8:	4808      	ldr	r0, [pc, #32]	; (8003a1c <_1Wire_Reset+0x54>)
 80039fa:	f7fd fcd1 	bl	80013a0 <HAL_GPIO_ReadPin>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	71fb      	strb	r3, [r7, #7]
	DelayUS(55); //! Sleep time 2 (45) + Recovery time (10)
 8003a0c:	2037      	movs	r0, #55	; 0x37
 8003a0e:	f7ff ff4d 	bl	80038ac <DelayUS>

	return bSensor;
 8003a12:	79fb      	ldrb	r3, [r7, #7]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40020800 	.word	0x40020800

08003a20 <_1Wire_ReadByte>:

U8 _1Wire_ReadByte(void) {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
	U8 u8Byte = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	71fb      	strb	r3, [r7, #7]

	for(U8 i = 0; i < 8; i++) { //! Go trough all bits
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	71bb      	strb	r3, [r7, #6]
 8003a2e:	e00d      	b.n	8003a4c <_1Wire_ReadByte+0x2c>
		u8Byte += ((U8)_1Wire_ReadBit() << i); //! Read and add to buffer
 8003a30:	f7ff ffa4 	bl	800397c <_1Wire_ReadBit>
 8003a34:	4603      	mov	r3, r0
 8003a36:	461a      	mov	r2, r3
 8003a38:	79bb      	ldrb	r3, [r7, #6]
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	4413      	add	r3, r2
 8003a44:	71fb      	strb	r3, [r7, #7]
	for(U8 i = 0; i < 8; i++) { //! Go trough all bits
 8003a46:	79bb      	ldrb	r3, [r7, #6]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	71bb      	strb	r3, [r7, #6]
 8003a4c:	79bb      	ldrb	r3, [r7, #6]
 8003a4e:	2b07      	cmp	r3, #7
 8003a50:	d9ee      	bls.n	8003a30 <_1Wire_ReadByte+0x10>
	}

	return u8Byte;
 8003a52:	79fb      	ldrb	r3, [r7, #7]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_1Wire_WriteByte>:

void _1Wire_WriteByte(U8 u8Byte) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	71fb      	strb	r3, [r7, #7]
	for(U8 i = 0; i < 8; i++) { //! Go trough all bits
 8003a66:	2300      	movs	r3, #0
 8003a68:	73fb      	strb	r3, [r7, #15]
 8003a6a:	e00f      	b.n	8003a8c <_1Wire_WriteByte+0x30>
		if((u8Byte >> i) & 1) _1Wire_WriteBit1(); //! Write a 1
 8003a6c:	79fa      	ldrb	r2, [r7, #7]
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	fa42 f303 	asr.w	r3, r2, r3
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <_1Wire_WriteByte+0x26>
 8003a7c:	f7ff ff66 	bl	800394c <_1Wire_WriteBit1>
 8003a80:	e001      	b.n	8003a86 <_1Wire_WriteByte+0x2a>
		else _1Wire_WriteBit0(); //! Write a 0
 8003a82:	f7ff ff4b 	bl	800391c <_1Wire_WriteBit0>
	for(U8 i = 0; i < 8; i++) { //! Go trough all bits
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	2b07      	cmp	r3, #7
 8003a90:	d9ec      	bls.n	8003a6c <_1Wire_WriteByte+0x10>
	}
}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <__errno>:
 8003a9c:	4b01      	ldr	r3, [pc, #4]	; (8003aa4 <__errno+0x8>)
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	2000000c 	.word	0x2000000c

08003aa8 <__libc_init_array>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	4e0d      	ldr	r6, [pc, #52]	; (8003ae0 <__libc_init_array+0x38>)
 8003aac:	4c0d      	ldr	r4, [pc, #52]	; (8003ae4 <__libc_init_array+0x3c>)
 8003aae:	1ba4      	subs	r4, r4, r6
 8003ab0:	10a4      	asrs	r4, r4, #2
 8003ab2:	2500      	movs	r5, #0
 8003ab4:	42a5      	cmp	r5, r4
 8003ab6:	d109      	bne.n	8003acc <__libc_init_array+0x24>
 8003ab8:	4e0b      	ldr	r6, [pc, #44]	; (8003ae8 <__libc_init_array+0x40>)
 8003aba:	4c0c      	ldr	r4, [pc, #48]	; (8003aec <__libc_init_array+0x44>)
 8003abc:	f000 ff04 	bl	80048c8 <_init>
 8003ac0:	1ba4      	subs	r4, r4, r6
 8003ac2:	10a4      	asrs	r4, r4, #2
 8003ac4:	2500      	movs	r5, #0
 8003ac6:	42a5      	cmp	r5, r4
 8003ac8:	d105      	bne.n	8003ad6 <__libc_init_array+0x2e>
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
 8003acc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ad0:	4798      	blx	r3
 8003ad2:	3501      	adds	r5, #1
 8003ad4:	e7ee      	b.n	8003ab4 <__libc_init_array+0xc>
 8003ad6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ada:	4798      	blx	r3
 8003adc:	3501      	adds	r5, #1
 8003ade:	e7f2      	b.n	8003ac6 <__libc_init_array+0x1e>
 8003ae0:	080049e8 	.word	0x080049e8
 8003ae4:	080049e8 	.word	0x080049e8
 8003ae8:	080049e8 	.word	0x080049e8
 8003aec:	080049ec 	.word	0x080049ec

08003af0 <memset>:
 8003af0:	4402      	add	r2, r0
 8003af2:	4603      	mov	r3, r0
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d100      	bne.n	8003afa <memset+0xa>
 8003af8:	4770      	bx	lr
 8003afa:	f803 1b01 	strb.w	r1, [r3], #1
 8003afe:	e7f9      	b.n	8003af4 <memset+0x4>

08003b00 <iprintf>:
 8003b00:	b40f      	push	{r0, r1, r2, r3}
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <iprintf+0x2c>)
 8003b04:	b513      	push	{r0, r1, r4, lr}
 8003b06:	681c      	ldr	r4, [r3, #0]
 8003b08:	b124      	cbz	r4, 8003b14 <iprintf+0x14>
 8003b0a:	69a3      	ldr	r3, [r4, #24]
 8003b0c:	b913      	cbnz	r3, 8003b14 <iprintf+0x14>
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f000 f84e 	bl	8003bb0 <__sinit>
 8003b14:	ab05      	add	r3, sp, #20
 8003b16:	9a04      	ldr	r2, [sp, #16]
 8003b18:	68a1      	ldr	r1, [r4, #8]
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f000 f955 	bl	8003dcc <_vfiprintf_r>
 8003b22:	b002      	add	sp, #8
 8003b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b28:	b004      	add	sp, #16
 8003b2a:	4770      	bx	lr
 8003b2c:	2000000c 	.word	0x2000000c

08003b30 <std>:
 8003b30:	2300      	movs	r3, #0
 8003b32:	b510      	push	{r4, lr}
 8003b34:	4604      	mov	r4, r0
 8003b36:	e9c0 3300 	strd	r3, r3, [r0]
 8003b3a:	6083      	str	r3, [r0, #8]
 8003b3c:	8181      	strh	r1, [r0, #12]
 8003b3e:	6643      	str	r3, [r0, #100]	; 0x64
 8003b40:	81c2      	strh	r2, [r0, #14]
 8003b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b46:	6183      	str	r3, [r0, #24]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	305c      	adds	r0, #92	; 0x5c
 8003b4e:	f7ff ffcf 	bl	8003af0 <memset>
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <std+0x38>)
 8003b54:	6263      	str	r3, [r4, #36]	; 0x24
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <std+0x3c>)
 8003b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b5a:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <std+0x40>)
 8003b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b5e:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <std+0x44>)
 8003b60:	6224      	str	r4, [r4, #32]
 8003b62:	6323      	str	r3, [r4, #48]	; 0x30
 8003b64:	bd10      	pop	{r4, pc}
 8003b66:	bf00      	nop
 8003b68:	08004329 	.word	0x08004329
 8003b6c:	0800434b 	.word	0x0800434b
 8003b70:	08004383 	.word	0x08004383
 8003b74:	080043a7 	.word	0x080043a7

08003b78 <_cleanup_r>:
 8003b78:	4901      	ldr	r1, [pc, #4]	; (8003b80 <_cleanup_r+0x8>)
 8003b7a:	f000 b885 	b.w	8003c88 <_fwalk_reent>
 8003b7e:	bf00      	nop
 8003b80:	08004681 	.word	0x08004681

08003b84 <__sfmoreglue>:
 8003b84:	b570      	push	{r4, r5, r6, lr}
 8003b86:	1e4a      	subs	r2, r1, #1
 8003b88:	2568      	movs	r5, #104	; 0x68
 8003b8a:	4355      	muls	r5, r2
 8003b8c:	460e      	mov	r6, r1
 8003b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b92:	f000 f897 	bl	8003cc4 <_malloc_r>
 8003b96:	4604      	mov	r4, r0
 8003b98:	b140      	cbz	r0, 8003bac <__sfmoreglue+0x28>
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8003ba0:	300c      	adds	r0, #12
 8003ba2:	60a0      	str	r0, [r4, #8]
 8003ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ba8:	f7ff ffa2 	bl	8003af0 <memset>
 8003bac:	4620      	mov	r0, r4
 8003bae:	bd70      	pop	{r4, r5, r6, pc}

08003bb0 <__sinit>:
 8003bb0:	6983      	ldr	r3, [r0, #24]
 8003bb2:	b510      	push	{r4, lr}
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	bb33      	cbnz	r3, 8003c06 <__sinit+0x56>
 8003bb8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003bbc:	6503      	str	r3, [r0, #80]	; 0x50
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <__sinit+0x58>)
 8003bc0:	4a12      	ldr	r2, [pc, #72]	; (8003c0c <__sinit+0x5c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6282      	str	r2, [r0, #40]	; 0x28
 8003bc6:	4298      	cmp	r0, r3
 8003bc8:	bf04      	itt	eq
 8003bca:	2301      	moveq	r3, #1
 8003bcc:	6183      	streq	r3, [r0, #24]
 8003bce:	f000 f81f 	bl	8003c10 <__sfp>
 8003bd2:	6060      	str	r0, [r4, #4]
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f000 f81b 	bl	8003c10 <__sfp>
 8003bda:	60a0      	str	r0, [r4, #8]
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f000 f817 	bl	8003c10 <__sfp>
 8003be2:	2200      	movs	r2, #0
 8003be4:	60e0      	str	r0, [r4, #12]
 8003be6:	2104      	movs	r1, #4
 8003be8:	6860      	ldr	r0, [r4, #4]
 8003bea:	f7ff ffa1 	bl	8003b30 <std>
 8003bee:	2201      	movs	r2, #1
 8003bf0:	2109      	movs	r1, #9
 8003bf2:	68a0      	ldr	r0, [r4, #8]
 8003bf4:	f7ff ff9c 	bl	8003b30 <std>
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	2112      	movs	r1, #18
 8003bfc:	68e0      	ldr	r0, [r4, #12]
 8003bfe:	f7ff ff97 	bl	8003b30 <std>
 8003c02:	2301      	movs	r3, #1
 8003c04:	61a3      	str	r3, [r4, #24]
 8003c06:	bd10      	pop	{r4, pc}
 8003c08:	08004948 	.word	0x08004948
 8003c0c:	08003b79 	.word	0x08003b79

08003c10 <__sfp>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <__sfp+0x70>)
 8003c14:	681e      	ldr	r6, [r3, #0]
 8003c16:	69b3      	ldr	r3, [r6, #24]
 8003c18:	4607      	mov	r7, r0
 8003c1a:	b913      	cbnz	r3, 8003c22 <__sfp+0x12>
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	f7ff ffc7 	bl	8003bb0 <__sinit>
 8003c22:	3648      	adds	r6, #72	; 0x48
 8003c24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	d503      	bpl.n	8003c34 <__sfp+0x24>
 8003c2c:	6833      	ldr	r3, [r6, #0]
 8003c2e:	b133      	cbz	r3, 8003c3e <__sfp+0x2e>
 8003c30:	6836      	ldr	r6, [r6, #0]
 8003c32:	e7f7      	b.n	8003c24 <__sfp+0x14>
 8003c34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c38:	b16d      	cbz	r5, 8003c56 <__sfp+0x46>
 8003c3a:	3468      	adds	r4, #104	; 0x68
 8003c3c:	e7f4      	b.n	8003c28 <__sfp+0x18>
 8003c3e:	2104      	movs	r1, #4
 8003c40:	4638      	mov	r0, r7
 8003c42:	f7ff ff9f 	bl	8003b84 <__sfmoreglue>
 8003c46:	6030      	str	r0, [r6, #0]
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	d1f1      	bne.n	8003c30 <__sfp+0x20>
 8003c4c:	230c      	movs	r3, #12
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	4604      	mov	r4, r0
 8003c52:	4620      	mov	r0, r4
 8003c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <__sfp+0x74>)
 8003c58:	6665      	str	r5, [r4, #100]	; 0x64
 8003c5a:	e9c4 5500 	strd	r5, r5, [r4]
 8003c5e:	60a5      	str	r5, [r4, #8]
 8003c60:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003c64:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003c68:	2208      	movs	r2, #8
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c70:	f7ff ff3e 	bl	8003af0 <memset>
 8003c74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c7c:	e7e9      	b.n	8003c52 <__sfp+0x42>
 8003c7e:	bf00      	nop
 8003c80:	08004948 	.word	0x08004948
 8003c84:	ffff0001 	.word	0xffff0001

08003c88 <_fwalk_reent>:
 8003c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c8c:	4680      	mov	r8, r0
 8003c8e:	4689      	mov	r9, r1
 8003c90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c94:	2600      	movs	r6, #0
 8003c96:	b914      	cbnz	r4, 8003c9e <_fwalk_reent+0x16>
 8003c98:	4630      	mov	r0, r6
 8003c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c9e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003ca2:	3f01      	subs	r7, #1
 8003ca4:	d501      	bpl.n	8003caa <_fwalk_reent+0x22>
 8003ca6:	6824      	ldr	r4, [r4, #0]
 8003ca8:	e7f5      	b.n	8003c96 <_fwalk_reent+0xe>
 8003caa:	89ab      	ldrh	r3, [r5, #12]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d907      	bls.n	8003cc0 <_fwalk_reent+0x38>
 8003cb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	d003      	beq.n	8003cc0 <_fwalk_reent+0x38>
 8003cb8:	4629      	mov	r1, r5
 8003cba:	4640      	mov	r0, r8
 8003cbc:	47c8      	blx	r9
 8003cbe:	4306      	orrs	r6, r0
 8003cc0:	3568      	adds	r5, #104	; 0x68
 8003cc2:	e7ee      	b.n	8003ca2 <_fwalk_reent+0x1a>

08003cc4 <_malloc_r>:
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	1ccd      	adds	r5, r1, #3
 8003cc8:	f025 0503 	bic.w	r5, r5, #3
 8003ccc:	3508      	adds	r5, #8
 8003cce:	2d0c      	cmp	r5, #12
 8003cd0:	bf38      	it	cc
 8003cd2:	250c      	movcc	r5, #12
 8003cd4:	2d00      	cmp	r5, #0
 8003cd6:	4606      	mov	r6, r0
 8003cd8:	db01      	blt.n	8003cde <_malloc_r+0x1a>
 8003cda:	42a9      	cmp	r1, r5
 8003cdc:	d903      	bls.n	8003ce6 <_malloc_r+0x22>
 8003cde:	230c      	movs	r3, #12
 8003ce0:	6033      	str	r3, [r6, #0]
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	bd70      	pop	{r4, r5, r6, pc}
 8003ce6:	f000 fd6b 	bl	80047c0 <__malloc_lock>
 8003cea:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <_malloc_r+0xac>)
 8003cec:	6814      	ldr	r4, [r2, #0]
 8003cee:	4621      	mov	r1, r4
 8003cf0:	b991      	cbnz	r1, 8003d18 <_malloc_r+0x54>
 8003cf2:	4c20      	ldr	r4, [pc, #128]	; (8003d74 <_malloc_r+0xb0>)
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	b91b      	cbnz	r3, 8003d00 <_malloc_r+0x3c>
 8003cf8:	4630      	mov	r0, r6
 8003cfa:	f000 fb05 	bl	8004308 <_sbrk_r>
 8003cfe:	6020      	str	r0, [r4, #0]
 8003d00:	4629      	mov	r1, r5
 8003d02:	4630      	mov	r0, r6
 8003d04:	f000 fb00 	bl	8004308 <_sbrk_r>
 8003d08:	1c43      	adds	r3, r0, #1
 8003d0a:	d124      	bne.n	8003d56 <_malloc_r+0x92>
 8003d0c:	230c      	movs	r3, #12
 8003d0e:	6033      	str	r3, [r6, #0]
 8003d10:	4630      	mov	r0, r6
 8003d12:	f000 fd56 	bl	80047c2 <__malloc_unlock>
 8003d16:	e7e4      	b.n	8003ce2 <_malloc_r+0x1e>
 8003d18:	680b      	ldr	r3, [r1, #0]
 8003d1a:	1b5b      	subs	r3, r3, r5
 8003d1c:	d418      	bmi.n	8003d50 <_malloc_r+0x8c>
 8003d1e:	2b0b      	cmp	r3, #11
 8003d20:	d90f      	bls.n	8003d42 <_malloc_r+0x7e>
 8003d22:	600b      	str	r3, [r1, #0]
 8003d24:	50cd      	str	r5, [r1, r3]
 8003d26:	18cc      	adds	r4, r1, r3
 8003d28:	4630      	mov	r0, r6
 8003d2a:	f000 fd4a 	bl	80047c2 <__malloc_unlock>
 8003d2e:	f104 000b 	add.w	r0, r4, #11
 8003d32:	1d23      	adds	r3, r4, #4
 8003d34:	f020 0007 	bic.w	r0, r0, #7
 8003d38:	1ac3      	subs	r3, r0, r3
 8003d3a:	d0d3      	beq.n	8003ce4 <_malloc_r+0x20>
 8003d3c:	425a      	negs	r2, r3
 8003d3e:	50e2      	str	r2, [r4, r3]
 8003d40:	e7d0      	b.n	8003ce4 <_malloc_r+0x20>
 8003d42:	428c      	cmp	r4, r1
 8003d44:	684b      	ldr	r3, [r1, #4]
 8003d46:	bf16      	itet	ne
 8003d48:	6063      	strne	r3, [r4, #4]
 8003d4a:	6013      	streq	r3, [r2, #0]
 8003d4c:	460c      	movne	r4, r1
 8003d4e:	e7eb      	b.n	8003d28 <_malloc_r+0x64>
 8003d50:	460c      	mov	r4, r1
 8003d52:	6849      	ldr	r1, [r1, #4]
 8003d54:	e7cc      	b.n	8003cf0 <_malloc_r+0x2c>
 8003d56:	1cc4      	adds	r4, r0, #3
 8003d58:	f024 0403 	bic.w	r4, r4, #3
 8003d5c:	42a0      	cmp	r0, r4
 8003d5e:	d005      	beq.n	8003d6c <_malloc_r+0xa8>
 8003d60:	1a21      	subs	r1, r4, r0
 8003d62:	4630      	mov	r0, r6
 8003d64:	f000 fad0 	bl	8004308 <_sbrk_r>
 8003d68:	3001      	adds	r0, #1
 8003d6a:	d0cf      	beq.n	8003d0c <_malloc_r+0x48>
 8003d6c:	6025      	str	r5, [r4, #0]
 8003d6e:	e7db      	b.n	8003d28 <_malloc_r+0x64>
 8003d70:	200000a0 	.word	0x200000a0
 8003d74:	200000a4 	.word	0x200000a4

08003d78 <__sfputc_r>:
 8003d78:	6893      	ldr	r3, [r2, #8]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	b410      	push	{r4}
 8003d80:	6093      	str	r3, [r2, #8]
 8003d82:	da08      	bge.n	8003d96 <__sfputc_r+0x1e>
 8003d84:	6994      	ldr	r4, [r2, #24]
 8003d86:	42a3      	cmp	r3, r4
 8003d88:	db01      	blt.n	8003d8e <__sfputc_r+0x16>
 8003d8a:	290a      	cmp	r1, #10
 8003d8c:	d103      	bne.n	8003d96 <__sfputc_r+0x1e>
 8003d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d92:	f000 bb0d 	b.w	80043b0 <__swbuf_r>
 8003d96:	6813      	ldr	r3, [r2, #0]
 8003d98:	1c58      	adds	r0, r3, #1
 8003d9a:	6010      	str	r0, [r2, #0]
 8003d9c:	7019      	strb	r1, [r3, #0]
 8003d9e:	4608      	mov	r0, r1
 8003da0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <__sfputs_r>:
 8003da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da8:	4606      	mov	r6, r0
 8003daa:	460f      	mov	r7, r1
 8003dac:	4614      	mov	r4, r2
 8003dae:	18d5      	adds	r5, r2, r3
 8003db0:	42ac      	cmp	r4, r5
 8003db2:	d101      	bne.n	8003db8 <__sfputs_r+0x12>
 8003db4:	2000      	movs	r0, #0
 8003db6:	e007      	b.n	8003dc8 <__sfputs_r+0x22>
 8003db8:	463a      	mov	r2, r7
 8003dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	f7ff ffda 	bl	8003d78 <__sfputc_r>
 8003dc4:	1c43      	adds	r3, r0, #1
 8003dc6:	d1f3      	bne.n	8003db0 <__sfputs_r+0xa>
 8003dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003dcc <_vfiprintf_r>:
 8003dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd0:	460c      	mov	r4, r1
 8003dd2:	b09d      	sub	sp, #116	; 0x74
 8003dd4:	4617      	mov	r7, r2
 8003dd6:	461d      	mov	r5, r3
 8003dd8:	4606      	mov	r6, r0
 8003dda:	b118      	cbz	r0, 8003de4 <_vfiprintf_r+0x18>
 8003ddc:	6983      	ldr	r3, [r0, #24]
 8003dde:	b90b      	cbnz	r3, 8003de4 <_vfiprintf_r+0x18>
 8003de0:	f7ff fee6 	bl	8003bb0 <__sinit>
 8003de4:	4b7c      	ldr	r3, [pc, #496]	; (8003fd8 <_vfiprintf_r+0x20c>)
 8003de6:	429c      	cmp	r4, r3
 8003de8:	d158      	bne.n	8003e9c <_vfiprintf_r+0xd0>
 8003dea:	6874      	ldr	r4, [r6, #4]
 8003dec:	89a3      	ldrh	r3, [r4, #12]
 8003dee:	0718      	lsls	r0, r3, #28
 8003df0:	d55e      	bpl.n	8003eb0 <_vfiprintf_r+0xe4>
 8003df2:	6923      	ldr	r3, [r4, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d05b      	beq.n	8003eb0 <_vfiprintf_r+0xe4>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8003dfc:	2320      	movs	r3, #32
 8003dfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e02:	2330      	movs	r3, #48	; 0x30
 8003e04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e08:	9503      	str	r5, [sp, #12]
 8003e0a:	f04f 0b01 	mov.w	fp, #1
 8003e0e:	46b8      	mov	r8, r7
 8003e10:	4645      	mov	r5, r8
 8003e12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e16:	b10b      	cbz	r3, 8003e1c <_vfiprintf_r+0x50>
 8003e18:	2b25      	cmp	r3, #37	; 0x25
 8003e1a:	d154      	bne.n	8003ec6 <_vfiprintf_r+0xfa>
 8003e1c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003e20:	d00b      	beq.n	8003e3a <_vfiprintf_r+0x6e>
 8003e22:	4653      	mov	r3, sl
 8003e24:	463a      	mov	r2, r7
 8003e26:	4621      	mov	r1, r4
 8003e28:	4630      	mov	r0, r6
 8003e2a:	f7ff ffbc 	bl	8003da6 <__sfputs_r>
 8003e2e:	3001      	adds	r0, #1
 8003e30:	f000 80c2 	beq.w	8003fb8 <_vfiprintf_r+0x1ec>
 8003e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e36:	4453      	add	r3, sl
 8003e38:	9309      	str	r3, [sp, #36]	; 0x24
 8003e3a:	f898 3000 	ldrb.w	r3, [r8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80ba 	beq.w	8003fb8 <_vfiprintf_r+0x1ec>
 8003e44:	2300      	movs	r3, #0
 8003e46:	f04f 32ff 	mov.w	r2, #4294967295
 8003e4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e4e:	9304      	str	r3, [sp, #16]
 8003e50:	9307      	str	r3, [sp, #28]
 8003e52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e56:	931a      	str	r3, [sp, #104]	; 0x68
 8003e58:	46a8      	mov	r8, r5
 8003e5a:	2205      	movs	r2, #5
 8003e5c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003e60:	485e      	ldr	r0, [pc, #376]	; (8003fdc <_vfiprintf_r+0x210>)
 8003e62:	f7fc f9d5 	bl	8000210 <memchr>
 8003e66:	9b04      	ldr	r3, [sp, #16]
 8003e68:	bb78      	cbnz	r0, 8003eca <_vfiprintf_r+0xfe>
 8003e6a:	06d9      	lsls	r1, r3, #27
 8003e6c:	bf44      	itt	mi
 8003e6e:	2220      	movmi	r2, #32
 8003e70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e74:	071a      	lsls	r2, r3, #28
 8003e76:	bf44      	itt	mi
 8003e78:	222b      	movmi	r2, #43	; 0x2b
 8003e7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e7e:	782a      	ldrb	r2, [r5, #0]
 8003e80:	2a2a      	cmp	r2, #42	; 0x2a
 8003e82:	d02a      	beq.n	8003eda <_vfiprintf_r+0x10e>
 8003e84:	9a07      	ldr	r2, [sp, #28]
 8003e86:	46a8      	mov	r8, r5
 8003e88:	2000      	movs	r0, #0
 8003e8a:	250a      	movs	r5, #10
 8003e8c:	4641      	mov	r1, r8
 8003e8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e92:	3b30      	subs	r3, #48	; 0x30
 8003e94:	2b09      	cmp	r3, #9
 8003e96:	d969      	bls.n	8003f6c <_vfiprintf_r+0x1a0>
 8003e98:	b360      	cbz	r0, 8003ef4 <_vfiprintf_r+0x128>
 8003e9a:	e024      	b.n	8003ee6 <_vfiprintf_r+0x11a>
 8003e9c:	4b50      	ldr	r3, [pc, #320]	; (8003fe0 <_vfiprintf_r+0x214>)
 8003e9e:	429c      	cmp	r4, r3
 8003ea0:	d101      	bne.n	8003ea6 <_vfiprintf_r+0xda>
 8003ea2:	68b4      	ldr	r4, [r6, #8]
 8003ea4:	e7a2      	b.n	8003dec <_vfiprintf_r+0x20>
 8003ea6:	4b4f      	ldr	r3, [pc, #316]	; (8003fe4 <_vfiprintf_r+0x218>)
 8003ea8:	429c      	cmp	r4, r3
 8003eaa:	bf08      	it	eq
 8003eac:	68f4      	ldreq	r4, [r6, #12]
 8003eae:	e79d      	b.n	8003dec <_vfiprintf_r+0x20>
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	f000 fae0 	bl	8004478 <__swsetup_r>
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	d09d      	beq.n	8003df8 <_vfiprintf_r+0x2c>
 8003ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec0:	b01d      	add	sp, #116	; 0x74
 8003ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec6:	46a8      	mov	r8, r5
 8003ec8:	e7a2      	b.n	8003e10 <_vfiprintf_r+0x44>
 8003eca:	4a44      	ldr	r2, [pc, #272]	; (8003fdc <_vfiprintf_r+0x210>)
 8003ecc:	1a80      	subs	r0, r0, r2
 8003ece:	fa0b f000 	lsl.w	r0, fp, r0
 8003ed2:	4318      	orrs	r0, r3
 8003ed4:	9004      	str	r0, [sp, #16]
 8003ed6:	4645      	mov	r5, r8
 8003ed8:	e7be      	b.n	8003e58 <_vfiprintf_r+0x8c>
 8003eda:	9a03      	ldr	r2, [sp, #12]
 8003edc:	1d11      	adds	r1, r2, #4
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	9103      	str	r1, [sp, #12]
 8003ee2:	2a00      	cmp	r2, #0
 8003ee4:	db01      	blt.n	8003eea <_vfiprintf_r+0x11e>
 8003ee6:	9207      	str	r2, [sp, #28]
 8003ee8:	e004      	b.n	8003ef4 <_vfiprintf_r+0x128>
 8003eea:	4252      	negs	r2, r2
 8003eec:	f043 0302 	orr.w	r3, r3, #2
 8003ef0:	9207      	str	r2, [sp, #28]
 8003ef2:	9304      	str	r3, [sp, #16]
 8003ef4:	f898 3000 	ldrb.w	r3, [r8]
 8003ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8003efa:	d10e      	bne.n	8003f1a <_vfiprintf_r+0x14e>
 8003efc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003f00:	2b2a      	cmp	r3, #42	; 0x2a
 8003f02:	d138      	bne.n	8003f76 <_vfiprintf_r+0x1aa>
 8003f04:	9b03      	ldr	r3, [sp, #12]
 8003f06:	1d1a      	adds	r2, r3, #4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	9203      	str	r2, [sp, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bfb8      	it	lt
 8003f10:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f14:	f108 0802 	add.w	r8, r8, #2
 8003f18:	9305      	str	r3, [sp, #20]
 8003f1a:	4d33      	ldr	r5, [pc, #204]	; (8003fe8 <_vfiprintf_r+0x21c>)
 8003f1c:	f898 1000 	ldrb.w	r1, [r8]
 8003f20:	2203      	movs	r2, #3
 8003f22:	4628      	mov	r0, r5
 8003f24:	f7fc f974 	bl	8000210 <memchr>
 8003f28:	b140      	cbz	r0, 8003f3c <_vfiprintf_r+0x170>
 8003f2a:	2340      	movs	r3, #64	; 0x40
 8003f2c:	1b40      	subs	r0, r0, r5
 8003f2e:	fa03 f000 	lsl.w	r0, r3, r0
 8003f32:	9b04      	ldr	r3, [sp, #16]
 8003f34:	4303      	orrs	r3, r0
 8003f36:	f108 0801 	add.w	r8, r8, #1
 8003f3a:	9304      	str	r3, [sp, #16]
 8003f3c:	f898 1000 	ldrb.w	r1, [r8]
 8003f40:	482a      	ldr	r0, [pc, #168]	; (8003fec <_vfiprintf_r+0x220>)
 8003f42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f46:	2206      	movs	r2, #6
 8003f48:	f108 0701 	add.w	r7, r8, #1
 8003f4c:	f7fc f960 	bl	8000210 <memchr>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d037      	beq.n	8003fc4 <_vfiprintf_r+0x1f8>
 8003f54:	4b26      	ldr	r3, [pc, #152]	; (8003ff0 <_vfiprintf_r+0x224>)
 8003f56:	bb1b      	cbnz	r3, 8003fa0 <_vfiprintf_r+0x1d4>
 8003f58:	9b03      	ldr	r3, [sp, #12]
 8003f5a:	3307      	adds	r3, #7
 8003f5c:	f023 0307 	bic.w	r3, r3, #7
 8003f60:	3308      	adds	r3, #8
 8003f62:	9303      	str	r3, [sp, #12]
 8003f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f66:	444b      	add	r3, r9
 8003f68:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6a:	e750      	b.n	8003e0e <_vfiprintf_r+0x42>
 8003f6c:	fb05 3202 	mla	r2, r5, r2, r3
 8003f70:	2001      	movs	r0, #1
 8003f72:	4688      	mov	r8, r1
 8003f74:	e78a      	b.n	8003e8c <_vfiprintf_r+0xc0>
 8003f76:	2300      	movs	r3, #0
 8003f78:	f108 0801 	add.w	r8, r8, #1
 8003f7c:	9305      	str	r3, [sp, #20]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	250a      	movs	r5, #10
 8003f82:	4640      	mov	r0, r8
 8003f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f88:	3a30      	subs	r2, #48	; 0x30
 8003f8a:	2a09      	cmp	r2, #9
 8003f8c:	d903      	bls.n	8003f96 <_vfiprintf_r+0x1ca>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0c3      	beq.n	8003f1a <_vfiprintf_r+0x14e>
 8003f92:	9105      	str	r1, [sp, #20]
 8003f94:	e7c1      	b.n	8003f1a <_vfiprintf_r+0x14e>
 8003f96:	fb05 2101 	mla	r1, r5, r1, r2
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4680      	mov	r8, r0
 8003f9e:	e7f0      	b.n	8003f82 <_vfiprintf_r+0x1b6>
 8003fa0:	ab03      	add	r3, sp, #12
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <_vfiprintf_r+0x228>)
 8003fa8:	a904      	add	r1, sp, #16
 8003faa:	4630      	mov	r0, r6
 8003fac:	f3af 8000 	nop.w
 8003fb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003fb4:	4681      	mov	r9, r0
 8003fb6:	d1d5      	bne.n	8003f64 <_vfiprintf_r+0x198>
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	065b      	lsls	r3, r3, #25
 8003fbc:	f53f af7e 	bmi.w	8003ebc <_vfiprintf_r+0xf0>
 8003fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fc2:	e77d      	b.n	8003ec0 <_vfiprintf_r+0xf4>
 8003fc4:	ab03      	add	r3, sp, #12
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	4622      	mov	r2, r4
 8003fca:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <_vfiprintf_r+0x228>)
 8003fcc:	a904      	add	r1, sp, #16
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f000 f888 	bl	80040e4 <_printf_i>
 8003fd4:	e7ec      	b.n	8003fb0 <_vfiprintf_r+0x1e4>
 8003fd6:	bf00      	nop
 8003fd8:	0800496c 	.word	0x0800496c
 8003fdc:	080049ac 	.word	0x080049ac
 8003fe0:	0800498c 	.word	0x0800498c
 8003fe4:	0800494c 	.word	0x0800494c
 8003fe8:	080049b2 	.word	0x080049b2
 8003fec:	080049b6 	.word	0x080049b6
 8003ff0:	00000000 	.word	0x00000000
 8003ff4:	08003da7 	.word	0x08003da7

08003ff8 <_printf_common>:
 8003ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ffc:	4691      	mov	r9, r2
 8003ffe:	461f      	mov	r7, r3
 8004000:	688a      	ldr	r2, [r1, #8]
 8004002:	690b      	ldr	r3, [r1, #16]
 8004004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004008:	4293      	cmp	r3, r2
 800400a:	bfb8      	it	lt
 800400c:	4613      	movlt	r3, r2
 800400e:	f8c9 3000 	str.w	r3, [r9]
 8004012:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004016:	4606      	mov	r6, r0
 8004018:	460c      	mov	r4, r1
 800401a:	b112      	cbz	r2, 8004022 <_printf_common+0x2a>
 800401c:	3301      	adds	r3, #1
 800401e:	f8c9 3000 	str.w	r3, [r9]
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	0699      	lsls	r1, r3, #26
 8004026:	bf42      	ittt	mi
 8004028:	f8d9 3000 	ldrmi.w	r3, [r9]
 800402c:	3302      	addmi	r3, #2
 800402e:	f8c9 3000 	strmi.w	r3, [r9]
 8004032:	6825      	ldr	r5, [r4, #0]
 8004034:	f015 0506 	ands.w	r5, r5, #6
 8004038:	d107      	bne.n	800404a <_printf_common+0x52>
 800403a:	f104 0a19 	add.w	sl, r4, #25
 800403e:	68e3      	ldr	r3, [r4, #12]
 8004040:	f8d9 2000 	ldr.w	r2, [r9]
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	42ab      	cmp	r3, r5
 8004048:	dc28      	bgt.n	800409c <_printf_common+0xa4>
 800404a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800404e:	6822      	ldr	r2, [r4, #0]
 8004050:	3300      	adds	r3, #0
 8004052:	bf18      	it	ne
 8004054:	2301      	movne	r3, #1
 8004056:	0692      	lsls	r2, r2, #26
 8004058:	d42d      	bmi.n	80040b6 <_printf_common+0xbe>
 800405a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800405e:	4639      	mov	r1, r7
 8004060:	4630      	mov	r0, r6
 8004062:	47c0      	blx	r8
 8004064:	3001      	adds	r0, #1
 8004066:	d020      	beq.n	80040aa <_printf_common+0xb2>
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	68e5      	ldr	r5, [r4, #12]
 800406c:	f8d9 2000 	ldr.w	r2, [r9]
 8004070:	f003 0306 	and.w	r3, r3, #6
 8004074:	2b04      	cmp	r3, #4
 8004076:	bf08      	it	eq
 8004078:	1aad      	subeq	r5, r5, r2
 800407a:	68a3      	ldr	r3, [r4, #8]
 800407c:	6922      	ldr	r2, [r4, #16]
 800407e:	bf0c      	ite	eq
 8004080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004084:	2500      	movne	r5, #0
 8004086:	4293      	cmp	r3, r2
 8004088:	bfc4      	itt	gt
 800408a:	1a9b      	subgt	r3, r3, r2
 800408c:	18ed      	addgt	r5, r5, r3
 800408e:	f04f 0900 	mov.w	r9, #0
 8004092:	341a      	adds	r4, #26
 8004094:	454d      	cmp	r5, r9
 8004096:	d11a      	bne.n	80040ce <_printf_common+0xd6>
 8004098:	2000      	movs	r0, #0
 800409a:	e008      	b.n	80040ae <_printf_common+0xb6>
 800409c:	2301      	movs	r3, #1
 800409e:	4652      	mov	r2, sl
 80040a0:	4639      	mov	r1, r7
 80040a2:	4630      	mov	r0, r6
 80040a4:	47c0      	blx	r8
 80040a6:	3001      	adds	r0, #1
 80040a8:	d103      	bne.n	80040b2 <_printf_common+0xba>
 80040aa:	f04f 30ff 	mov.w	r0, #4294967295
 80040ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b2:	3501      	adds	r5, #1
 80040b4:	e7c3      	b.n	800403e <_printf_common+0x46>
 80040b6:	18e1      	adds	r1, r4, r3
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	2030      	movs	r0, #48	; 0x30
 80040bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040c0:	4422      	add	r2, r4
 80040c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040ca:	3302      	adds	r3, #2
 80040cc:	e7c5      	b.n	800405a <_printf_common+0x62>
 80040ce:	2301      	movs	r3, #1
 80040d0:	4622      	mov	r2, r4
 80040d2:	4639      	mov	r1, r7
 80040d4:	4630      	mov	r0, r6
 80040d6:	47c0      	blx	r8
 80040d8:	3001      	adds	r0, #1
 80040da:	d0e6      	beq.n	80040aa <_printf_common+0xb2>
 80040dc:	f109 0901 	add.w	r9, r9, #1
 80040e0:	e7d8      	b.n	8004094 <_printf_common+0x9c>
	...

080040e4 <_printf_i>:
 80040e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80040ec:	460c      	mov	r4, r1
 80040ee:	7e09      	ldrb	r1, [r1, #24]
 80040f0:	b085      	sub	sp, #20
 80040f2:	296e      	cmp	r1, #110	; 0x6e
 80040f4:	4617      	mov	r7, r2
 80040f6:	4606      	mov	r6, r0
 80040f8:	4698      	mov	r8, r3
 80040fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040fc:	f000 80b3 	beq.w	8004266 <_printf_i+0x182>
 8004100:	d822      	bhi.n	8004148 <_printf_i+0x64>
 8004102:	2963      	cmp	r1, #99	; 0x63
 8004104:	d036      	beq.n	8004174 <_printf_i+0x90>
 8004106:	d80a      	bhi.n	800411e <_printf_i+0x3a>
 8004108:	2900      	cmp	r1, #0
 800410a:	f000 80b9 	beq.w	8004280 <_printf_i+0x19c>
 800410e:	2958      	cmp	r1, #88	; 0x58
 8004110:	f000 8083 	beq.w	800421a <_printf_i+0x136>
 8004114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004118:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800411c:	e032      	b.n	8004184 <_printf_i+0xa0>
 800411e:	2964      	cmp	r1, #100	; 0x64
 8004120:	d001      	beq.n	8004126 <_printf_i+0x42>
 8004122:	2969      	cmp	r1, #105	; 0x69
 8004124:	d1f6      	bne.n	8004114 <_printf_i+0x30>
 8004126:	6820      	ldr	r0, [r4, #0]
 8004128:	6813      	ldr	r3, [r2, #0]
 800412a:	0605      	lsls	r5, r0, #24
 800412c:	f103 0104 	add.w	r1, r3, #4
 8004130:	d52a      	bpl.n	8004188 <_printf_i+0xa4>
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6011      	str	r1, [r2, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	da03      	bge.n	8004142 <_printf_i+0x5e>
 800413a:	222d      	movs	r2, #45	; 0x2d
 800413c:	425b      	negs	r3, r3
 800413e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004142:	486f      	ldr	r0, [pc, #444]	; (8004300 <_printf_i+0x21c>)
 8004144:	220a      	movs	r2, #10
 8004146:	e039      	b.n	80041bc <_printf_i+0xd8>
 8004148:	2973      	cmp	r1, #115	; 0x73
 800414a:	f000 809d 	beq.w	8004288 <_printf_i+0x1a4>
 800414e:	d808      	bhi.n	8004162 <_printf_i+0x7e>
 8004150:	296f      	cmp	r1, #111	; 0x6f
 8004152:	d020      	beq.n	8004196 <_printf_i+0xb2>
 8004154:	2970      	cmp	r1, #112	; 0x70
 8004156:	d1dd      	bne.n	8004114 <_printf_i+0x30>
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	f043 0320 	orr.w	r3, r3, #32
 800415e:	6023      	str	r3, [r4, #0]
 8004160:	e003      	b.n	800416a <_printf_i+0x86>
 8004162:	2975      	cmp	r1, #117	; 0x75
 8004164:	d017      	beq.n	8004196 <_printf_i+0xb2>
 8004166:	2978      	cmp	r1, #120	; 0x78
 8004168:	d1d4      	bne.n	8004114 <_printf_i+0x30>
 800416a:	2378      	movs	r3, #120	; 0x78
 800416c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004170:	4864      	ldr	r0, [pc, #400]	; (8004304 <_printf_i+0x220>)
 8004172:	e055      	b.n	8004220 <_printf_i+0x13c>
 8004174:	6813      	ldr	r3, [r2, #0]
 8004176:	1d19      	adds	r1, r3, #4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6011      	str	r1, [r2, #0]
 800417c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004184:	2301      	movs	r3, #1
 8004186:	e08c      	b.n	80042a2 <_printf_i+0x1be>
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6011      	str	r1, [r2, #0]
 800418c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004190:	bf18      	it	ne
 8004192:	b21b      	sxthne	r3, r3
 8004194:	e7cf      	b.n	8004136 <_printf_i+0x52>
 8004196:	6813      	ldr	r3, [r2, #0]
 8004198:	6825      	ldr	r5, [r4, #0]
 800419a:	1d18      	adds	r0, r3, #4
 800419c:	6010      	str	r0, [r2, #0]
 800419e:	0628      	lsls	r0, r5, #24
 80041a0:	d501      	bpl.n	80041a6 <_printf_i+0xc2>
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	e002      	b.n	80041ac <_printf_i+0xc8>
 80041a6:	0668      	lsls	r0, r5, #25
 80041a8:	d5fb      	bpl.n	80041a2 <_printf_i+0xbe>
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	4854      	ldr	r0, [pc, #336]	; (8004300 <_printf_i+0x21c>)
 80041ae:	296f      	cmp	r1, #111	; 0x6f
 80041b0:	bf14      	ite	ne
 80041b2:	220a      	movne	r2, #10
 80041b4:	2208      	moveq	r2, #8
 80041b6:	2100      	movs	r1, #0
 80041b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041bc:	6865      	ldr	r5, [r4, #4]
 80041be:	60a5      	str	r5, [r4, #8]
 80041c0:	2d00      	cmp	r5, #0
 80041c2:	f2c0 8095 	blt.w	80042f0 <_printf_i+0x20c>
 80041c6:	6821      	ldr	r1, [r4, #0]
 80041c8:	f021 0104 	bic.w	r1, r1, #4
 80041cc:	6021      	str	r1, [r4, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d13d      	bne.n	800424e <_printf_i+0x16a>
 80041d2:	2d00      	cmp	r5, #0
 80041d4:	f040 808e 	bne.w	80042f4 <_printf_i+0x210>
 80041d8:	4665      	mov	r5, ip
 80041da:	2a08      	cmp	r2, #8
 80041dc:	d10b      	bne.n	80041f6 <_printf_i+0x112>
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	07db      	lsls	r3, r3, #31
 80041e2:	d508      	bpl.n	80041f6 <_printf_i+0x112>
 80041e4:	6923      	ldr	r3, [r4, #16]
 80041e6:	6862      	ldr	r2, [r4, #4]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	bfde      	ittt	le
 80041ec:	2330      	movle	r3, #48	; 0x30
 80041ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041f6:	ebac 0305 	sub.w	r3, ip, r5
 80041fa:	6123      	str	r3, [r4, #16]
 80041fc:	f8cd 8000 	str.w	r8, [sp]
 8004200:	463b      	mov	r3, r7
 8004202:	aa03      	add	r2, sp, #12
 8004204:	4621      	mov	r1, r4
 8004206:	4630      	mov	r0, r6
 8004208:	f7ff fef6 	bl	8003ff8 <_printf_common>
 800420c:	3001      	adds	r0, #1
 800420e:	d14d      	bne.n	80042ac <_printf_i+0x1c8>
 8004210:	f04f 30ff 	mov.w	r0, #4294967295
 8004214:	b005      	add	sp, #20
 8004216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800421a:	4839      	ldr	r0, [pc, #228]	; (8004300 <_printf_i+0x21c>)
 800421c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004220:	6813      	ldr	r3, [r2, #0]
 8004222:	6821      	ldr	r1, [r4, #0]
 8004224:	1d1d      	adds	r5, r3, #4
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6015      	str	r5, [r2, #0]
 800422a:	060a      	lsls	r2, r1, #24
 800422c:	d50b      	bpl.n	8004246 <_printf_i+0x162>
 800422e:	07ca      	lsls	r2, r1, #31
 8004230:	bf44      	itt	mi
 8004232:	f041 0120 	orrmi.w	r1, r1, #32
 8004236:	6021      	strmi	r1, [r4, #0]
 8004238:	b91b      	cbnz	r3, 8004242 <_printf_i+0x15e>
 800423a:	6822      	ldr	r2, [r4, #0]
 800423c:	f022 0220 	bic.w	r2, r2, #32
 8004240:	6022      	str	r2, [r4, #0]
 8004242:	2210      	movs	r2, #16
 8004244:	e7b7      	b.n	80041b6 <_printf_i+0xd2>
 8004246:	064d      	lsls	r5, r1, #25
 8004248:	bf48      	it	mi
 800424a:	b29b      	uxthmi	r3, r3
 800424c:	e7ef      	b.n	800422e <_printf_i+0x14a>
 800424e:	4665      	mov	r5, ip
 8004250:	fbb3 f1f2 	udiv	r1, r3, r2
 8004254:	fb02 3311 	mls	r3, r2, r1, r3
 8004258:	5cc3      	ldrb	r3, [r0, r3]
 800425a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800425e:	460b      	mov	r3, r1
 8004260:	2900      	cmp	r1, #0
 8004262:	d1f5      	bne.n	8004250 <_printf_i+0x16c>
 8004264:	e7b9      	b.n	80041da <_printf_i+0xf6>
 8004266:	6813      	ldr	r3, [r2, #0]
 8004268:	6825      	ldr	r5, [r4, #0]
 800426a:	6961      	ldr	r1, [r4, #20]
 800426c:	1d18      	adds	r0, r3, #4
 800426e:	6010      	str	r0, [r2, #0]
 8004270:	0628      	lsls	r0, r5, #24
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	d501      	bpl.n	800427a <_printf_i+0x196>
 8004276:	6019      	str	r1, [r3, #0]
 8004278:	e002      	b.n	8004280 <_printf_i+0x19c>
 800427a:	066a      	lsls	r2, r5, #25
 800427c:	d5fb      	bpl.n	8004276 <_printf_i+0x192>
 800427e:	8019      	strh	r1, [r3, #0]
 8004280:	2300      	movs	r3, #0
 8004282:	6123      	str	r3, [r4, #16]
 8004284:	4665      	mov	r5, ip
 8004286:	e7b9      	b.n	80041fc <_printf_i+0x118>
 8004288:	6813      	ldr	r3, [r2, #0]
 800428a:	1d19      	adds	r1, r3, #4
 800428c:	6011      	str	r1, [r2, #0]
 800428e:	681d      	ldr	r5, [r3, #0]
 8004290:	6862      	ldr	r2, [r4, #4]
 8004292:	2100      	movs	r1, #0
 8004294:	4628      	mov	r0, r5
 8004296:	f7fb ffbb 	bl	8000210 <memchr>
 800429a:	b108      	cbz	r0, 80042a0 <_printf_i+0x1bc>
 800429c:	1b40      	subs	r0, r0, r5
 800429e:	6060      	str	r0, [r4, #4]
 80042a0:	6863      	ldr	r3, [r4, #4]
 80042a2:	6123      	str	r3, [r4, #16]
 80042a4:	2300      	movs	r3, #0
 80042a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042aa:	e7a7      	b.n	80041fc <_printf_i+0x118>
 80042ac:	6923      	ldr	r3, [r4, #16]
 80042ae:	462a      	mov	r2, r5
 80042b0:	4639      	mov	r1, r7
 80042b2:	4630      	mov	r0, r6
 80042b4:	47c0      	blx	r8
 80042b6:	3001      	adds	r0, #1
 80042b8:	d0aa      	beq.n	8004210 <_printf_i+0x12c>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	079b      	lsls	r3, r3, #30
 80042be:	d413      	bmi.n	80042e8 <_printf_i+0x204>
 80042c0:	68e0      	ldr	r0, [r4, #12]
 80042c2:	9b03      	ldr	r3, [sp, #12]
 80042c4:	4298      	cmp	r0, r3
 80042c6:	bfb8      	it	lt
 80042c8:	4618      	movlt	r0, r3
 80042ca:	e7a3      	b.n	8004214 <_printf_i+0x130>
 80042cc:	2301      	movs	r3, #1
 80042ce:	464a      	mov	r2, r9
 80042d0:	4639      	mov	r1, r7
 80042d2:	4630      	mov	r0, r6
 80042d4:	47c0      	blx	r8
 80042d6:	3001      	adds	r0, #1
 80042d8:	d09a      	beq.n	8004210 <_printf_i+0x12c>
 80042da:	3501      	adds	r5, #1
 80042dc:	68e3      	ldr	r3, [r4, #12]
 80042de:	9a03      	ldr	r2, [sp, #12]
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	42ab      	cmp	r3, r5
 80042e4:	dcf2      	bgt.n	80042cc <_printf_i+0x1e8>
 80042e6:	e7eb      	b.n	80042c0 <_printf_i+0x1dc>
 80042e8:	2500      	movs	r5, #0
 80042ea:	f104 0919 	add.w	r9, r4, #25
 80042ee:	e7f5      	b.n	80042dc <_printf_i+0x1f8>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ac      	bne.n	800424e <_printf_i+0x16a>
 80042f4:	7803      	ldrb	r3, [r0, #0]
 80042f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042fe:	e76c      	b.n	80041da <_printf_i+0xf6>
 8004300:	080049bd 	.word	0x080049bd
 8004304:	080049ce 	.word	0x080049ce

08004308 <_sbrk_r>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	4c06      	ldr	r4, [pc, #24]	; (8004324 <_sbrk_r+0x1c>)
 800430c:	2300      	movs	r3, #0
 800430e:	4605      	mov	r5, r0
 8004310:	4608      	mov	r0, r1
 8004312:	6023      	str	r3, [r4, #0]
 8004314:	f7fc fc74 	bl	8000c00 <_sbrk>
 8004318:	1c43      	adds	r3, r0, #1
 800431a:	d102      	bne.n	8004322 <_sbrk_r+0x1a>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	b103      	cbz	r3, 8004322 <_sbrk_r+0x1a>
 8004320:	602b      	str	r3, [r5, #0]
 8004322:	bd38      	pop	{r3, r4, r5, pc}
 8004324:	200001b8 	.word	0x200001b8

08004328 <__sread>:
 8004328:	b510      	push	{r4, lr}
 800432a:	460c      	mov	r4, r1
 800432c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004330:	f000 fa96 	bl	8004860 <_read_r>
 8004334:	2800      	cmp	r0, #0
 8004336:	bfab      	itete	ge
 8004338:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800433a:	89a3      	ldrhlt	r3, [r4, #12]
 800433c:	181b      	addge	r3, r3, r0
 800433e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004342:	bfac      	ite	ge
 8004344:	6563      	strge	r3, [r4, #84]	; 0x54
 8004346:	81a3      	strhlt	r3, [r4, #12]
 8004348:	bd10      	pop	{r4, pc}

0800434a <__swrite>:
 800434a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800434e:	461f      	mov	r7, r3
 8004350:	898b      	ldrh	r3, [r1, #12]
 8004352:	05db      	lsls	r3, r3, #23
 8004354:	4605      	mov	r5, r0
 8004356:	460c      	mov	r4, r1
 8004358:	4616      	mov	r6, r2
 800435a:	d505      	bpl.n	8004368 <__swrite+0x1e>
 800435c:	2302      	movs	r3, #2
 800435e:	2200      	movs	r2, #0
 8004360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004364:	f000 f9b6 	bl	80046d4 <_lseek_r>
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800436e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004372:	81a3      	strh	r3, [r4, #12]
 8004374:	4632      	mov	r2, r6
 8004376:	463b      	mov	r3, r7
 8004378:	4628      	mov	r0, r5
 800437a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800437e:	f000 b869 	b.w	8004454 <_write_r>

08004382 <__sseek>:
 8004382:	b510      	push	{r4, lr}
 8004384:	460c      	mov	r4, r1
 8004386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800438a:	f000 f9a3 	bl	80046d4 <_lseek_r>
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	89a3      	ldrh	r3, [r4, #12]
 8004392:	bf15      	itete	ne
 8004394:	6560      	strne	r0, [r4, #84]	; 0x54
 8004396:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800439a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800439e:	81a3      	strheq	r3, [r4, #12]
 80043a0:	bf18      	it	ne
 80043a2:	81a3      	strhne	r3, [r4, #12]
 80043a4:	bd10      	pop	{r4, pc}

080043a6 <__sclose>:
 80043a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043aa:	f000 b8d3 	b.w	8004554 <_close_r>
	...

080043b0 <__swbuf_r>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	460e      	mov	r6, r1
 80043b4:	4614      	mov	r4, r2
 80043b6:	4605      	mov	r5, r0
 80043b8:	b118      	cbz	r0, 80043c2 <__swbuf_r+0x12>
 80043ba:	6983      	ldr	r3, [r0, #24]
 80043bc:	b90b      	cbnz	r3, 80043c2 <__swbuf_r+0x12>
 80043be:	f7ff fbf7 	bl	8003bb0 <__sinit>
 80043c2:	4b21      	ldr	r3, [pc, #132]	; (8004448 <__swbuf_r+0x98>)
 80043c4:	429c      	cmp	r4, r3
 80043c6:	d12a      	bne.n	800441e <__swbuf_r+0x6e>
 80043c8:	686c      	ldr	r4, [r5, #4]
 80043ca:	69a3      	ldr	r3, [r4, #24]
 80043cc:	60a3      	str	r3, [r4, #8]
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	071a      	lsls	r2, r3, #28
 80043d2:	d52e      	bpl.n	8004432 <__swbuf_r+0x82>
 80043d4:	6923      	ldr	r3, [r4, #16]
 80043d6:	b363      	cbz	r3, 8004432 <__swbuf_r+0x82>
 80043d8:	6923      	ldr	r3, [r4, #16]
 80043da:	6820      	ldr	r0, [r4, #0]
 80043dc:	1ac0      	subs	r0, r0, r3
 80043de:	6963      	ldr	r3, [r4, #20]
 80043e0:	b2f6      	uxtb	r6, r6
 80043e2:	4283      	cmp	r3, r0
 80043e4:	4637      	mov	r7, r6
 80043e6:	dc04      	bgt.n	80043f2 <__swbuf_r+0x42>
 80043e8:	4621      	mov	r1, r4
 80043ea:	4628      	mov	r0, r5
 80043ec:	f000 f948 	bl	8004680 <_fflush_r>
 80043f0:	bb28      	cbnz	r0, 800443e <__swbuf_r+0x8e>
 80043f2:	68a3      	ldr	r3, [r4, #8]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	60a3      	str	r3, [r4, #8]
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	6022      	str	r2, [r4, #0]
 80043fe:	701e      	strb	r6, [r3, #0]
 8004400:	6963      	ldr	r3, [r4, #20]
 8004402:	3001      	adds	r0, #1
 8004404:	4283      	cmp	r3, r0
 8004406:	d004      	beq.n	8004412 <__swbuf_r+0x62>
 8004408:	89a3      	ldrh	r3, [r4, #12]
 800440a:	07db      	lsls	r3, r3, #31
 800440c:	d519      	bpl.n	8004442 <__swbuf_r+0x92>
 800440e:	2e0a      	cmp	r6, #10
 8004410:	d117      	bne.n	8004442 <__swbuf_r+0x92>
 8004412:	4621      	mov	r1, r4
 8004414:	4628      	mov	r0, r5
 8004416:	f000 f933 	bl	8004680 <_fflush_r>
 800441a:	b190      	cbz	r0, 8004442 <__swbuf_r+0x92>
 800441c:	e00f      	b.n	800443e <__swbuf_r+0x8e>
 800441e:	4b0b      	ldr	r3, [pc, #44]	; (800444c <__swbuf_r+0x9c>)
 8004420:	429c      	cmp	r4, r3
 8004422:	d101      	bne.n	8004428 <__swbuf_r+0x78>
 8004424:	68ac      	ldr	r4, [r5, #8]
 8004426:	e7d0      	b.n	80043ca <__swbuf_r+0x1a>
 8004428:	4b09      	ldr	r3, [pc, #36]	; (8004450 <__swbuf_r+0xa0>)
 800442a:	429c      	cmp	r4, r3
 800442c:	bf08      	it	eq
 800442e:	68ec      	ldreq	r4, [r5, #12]
 8004430:	e7cb      	b.n	80043ca <__swbuf_r+0x1a>
 8004432:	4621      	mov	r1, r4
 8004434:	4628      	mov	r0, r5
 8004436:	f000 f81f 	bl	8004478 <__swsetup_r>
 800443a:	2800      	cmp	r0, #0
 800443c:	d0cc      	beq.n	80043d8 <__swbuf_r+0x28>
 800443e:	f04f 37ff 	mov.w	r7, #4294967295
 8004442:	4638      	mov	r0, r7
 8004444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004446:	bf00      	nop
 8004448:	0800496c 	.word	0x0800496c
 800444c:	0800498c 	.word	0x0800498c
 8004450:	0800494c 	.word	0x0800494c

08004454 <_write_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	4c07      	ldr	r4, [pc, #28]	; (8004474 <_write_r+0x20>)
 8004458:	4605      	mov	r5, r0
 800445a:	4608      	mov	r0, r1
 800445c:	4611      	mov	r1, r2
 800445e:	2200      	movs	r2, #0
 8004460:	6022      	str	r2, [r4, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	f7fc fb7b 	bl	8000b5e <_write>
 8004468:	1c43      	adds	r3, r0, #1
 800446a:	d102      	bne.n	8004472 <_write_r+0x1e>
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	b103      	cbz	r3, 8004472 <_write_r+0x1e>
 8004470:	602b      	str	r3, [r5, #0]
 8004472:	bd38      	pop	{r3, r4, r5, pc}
 8004474:	200001b8 	.word	0x200001b8

08004478 <__swsetup_r>:
 8004478:	4b32      	ldr	r3, [pc, #200]	; (8004544 <__swsetup_r+0xcc>)
 800447a:	b570      	push	{r4, r5, r6, lr}
 800447c:	681d      	ldr	r5, [r3, #0]
 800447e:	4606      	mov	r6, r0
 8004480:	460c      	mov	r4, r1
 8004482:	b125      	cbz	r5, 800448e <__swsetup_r+0x16>
 8004484:	69ab      	ldr	r3, [r5, #24]
 8004486:	b913      	cbnz	r3, 800448e <__swsetup_r+0x16>
 8004488:	4628      	mov	r0, r5
 800448a:	f7ff fb91 	bl	8003bb0 <__sinit>
 800448e:	4b2e      	ldr	r3, [pc, #184]	; (8004548 <__swsetup_r+0xd0>)
 8004490:	429c      	cmp	r4, r3
 8004492:	d10f      	bne.n	80044b4 <__swsetup_r+0x3c>
 8004494:	686c      	ldr	r4, [r5, #4]
 8004496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800449a:	b29a      	uxth	r2, r3
 800449c:	0715      	lsls	r5, r2, #28
 800449e:	d42c      	bmi.n	80044fa <__swsetup_r+0x82>
 80044a0:	06d0      	lsls	r0, r2, #27
 80044a2:	d411      	bmi.n	80044c8 <__swsetup_r+0x50>
 80044a4:	2209      	movs	r2, #9
 80044a6:	6032      	str	r2, [r6, #0]
 80044a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ac:	81a3      	strh	r3, [r4, #12]
 80044ae:	f04f 30ff 	mov.w	r0, #4294967295
 80044b2:	e03e      	b.n	8004532 <__swsetup_r+0xba>
 80044b4:	4b25      	ldr	r3, [pc, #148]	; (800454c <__swsetup_r+0xd4>)
 80044b6:	429c      	cmp	r4, r3
 80044b8:	d101      	bne.n	80044be <__swsetup_r+0x46>
 80044ba:	68ac      	ldr	r4, [r5, #8]
 80044bc:	e7eb      	b.n	8004496 <__swsetup_r+0x1e>
 80044be:	4b24      	ldr	r3, [pc, #144]	; (8004550 <__swsetup_r+0xd8>)
 80044c0:	429c      	cmp	r4, r3
 80044c2:	bf08      	it	eq
 80044c4:	68ec      	ldreq	r4, [r5, #12]
 80044c6:	e7e6      	b.n	8004496 <__swsetup_r+0x1e>
 80044c8:	0751      	lsls	r1, r2, #29
 80044ca:	d512      	bpl.n	80044f2 <__swsetup_r+0x7a>
 80044cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044ce:	b141      	cbz	r1, 80044e2 <__swsetup_r+0x6a>
 80044d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044d4:	4299      	cmp	r1, r3
 80044d6:	d002      	beq.n	80044de <__swsetup_r+0x66>
 80044d8:	4630      	mov	r0, r6
 80044da:	f000 f973 	bl	80047c4 <_free_r>
 80044de:	2300      	movs	r3, #0
 80044e0:	6363      	str	r3, [r4, #52]	; 0x34
 80044e2:	89a3      	ldrh	r3, [r4, #12]
 80044e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044e8:	81a3      	strh	r3, [r4, #12]
 80044ea:	2300      	movs	r3, #0
 80044ec:	6063      	str	r3, [r4, #4]
 80044ee:	6923      	ldr	r3, [r4, #16]
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	89a3      	ldrh	r3, [r4, #12]
 80044f4:	f043 0308 	orr.w	r3, r3, #8
 80044f8:	81a3      	strh	r3, [r4, #12]
 80044fa:	6923      	ldr	r3, [r4, #16]
 80044fc:	b94b      	cbnz	r3, 8004512 <__swsetup_r+0x9a>
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004508:	d003      	beq.n	8004512 <__swsetup_r+0x9a>
 800450a:	4621      	mov	r1, r4
 800450c:	4630      	mov	r0, r6
 800450e:	f000 f917 	bl	8004740 <__smakebuf_r>
 8004512:	89a2      	ldrh	r2, [r4, #12]
 8004514:	f012 0301 	ands.w	r3, r2, #1
 8004518:	d00c      	beq.n	8004534 <__swsetup_r+0xbc>
 800451a:	2300      	movs	r3, #0
 800451c:	60a3      	str	r3, [r4, #8]
 800451e:	6963      	ldr	r3, [r4, #20]
 8004520:	425b      	negs	r3, r3
 8004522:	61a3      	str	r3, [r4, #24]
 8004524:	6923      	ldr	r3, [r4, #16]
 8004526:	b953      	cbnz	r3, 800453e <__swsetup_r+0xc6>
 8004528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800452c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004530:	d1ba      	bne.n	80044a8 <__swsetup_r+0x30>
 8004532:	bd70      	pop	{r4, r5, r6, pc}
 8004534:	0792      	lsls	r2, r2, #30
 8004536:	bf58      	it	pl
 8004538:	6963      	ldrpl	r3, [r4, #20]
 800453a:	60a3      	str	r3, [r4, #8]
 800453c:	e7f2      	b.n	8004524 <__swsetup_r+0xac>
 800453e:	2000      	movs	r0, #0
 8004540:	e7f7      	b.n	8004532 <__swsetup_r+0xba>
 8004542:	bf00      	nop
 8004544:	2000000c 	.word	0x2000000c
 8004548:	0800496c 	.word	0x0800496c
 800454c:	0800498c 	.word	0x0800498c
 8004550:	0800494c 	.word	0x0800494c

08004554 <_close_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	4c06      	ldr	r4, [pc, #24]	; (8004570 <_close_r+0x1c>)
 8004558:	2300      	movs	r3, #0
 800455a:	4605      	mov	r5, r0
 800455c:	4608      	mov	r0, r1
 800455e:	6023      	str	r3, [r4, #0]
 8004560:	f7fc fb19 	bl	8000b96 <_close>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d102      	bne.n	800456e <_close_r+0x1a>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	b103      	cbz	r3, 800456e <_close_r+0x1a>
 800456c:	602b      	str	r3, [r5, #0]
 800456e:	bd38      	pop	{r3, r4, r5, pc}
 8004570:	200001b8 	.word	0x200001b8

08004574 <__sflush_r>:
 8004574:	898a      	ldrh	r2, [r1, #12]
 8004576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800457a:	4605      	mov	r5, r0
 800457c:	0710      	lsls	r0, r2, #28
 800457e:	460c      	mov	r4, r1
 8004580:	d458      	bmi.n	8004634 <__sflush_r+0xc0>
 8004582:	684b      	ldr	r3, [r1, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	dc05      	bgt.n	8004594 <__sflush_r+0x20>
 8004588:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	dc02      	bgt.n	8004594 <__sflush_r+0x20>
 800458e:	2000      	movs	r0, #0
 8004590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004596:	2e00      	cmp	r6, #0
 8004598:	d0f9      	beq.n	800458e <__sflush_r+0x1a>
 800459a:	2300      	movs	r3, #0
 800459c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045a0:	682f      	ldr	r7, [r5, #0]
 80045a2:	6a21      	ldr	r1, [r4, #32]
 80045a4:	602b      	str	r3, [r5, #0]
 80045a6:	d032      	beq.n	800460e <__sflush_r+0x9a>
 80045a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045aa:	89a3      	ldrh	r3, [r4, #12]
 80045ac:	075a      	lsls	r2, r3, #29
 80045ae:	d505      	bpl.n	80045bc <__sflush_r+0x48>
 80045b0:	6863      	ldr	r3, [r4, #4]
 80045b2:	1ac0      	subs	r0, r0, r3
 80045b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045b6:	b10b      	cbz	r3, 80045bc <__sflush_r+0x48>
 80045b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045ba:	1ac0      	subs	r0, r0, r3
 80045bc:	2300      	movs	r3, #0
 80045be:	4602      	mov	r2, r0
 80045c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045c2:	6a21      	ldr	r1, [r4, #32]
 80045c4:	4628      	mov	r0, r5
 80045c6:	47b0      	blx	r6
 80045c8:	1c43      	adds	r3, r0, #1
 80045ca:	89a3      	ldrh	r3, [r4, #12]
 80045cc:	d106      	bne.n	80045dc <__sflush_r+0x68>
 80045ce:	6829      	ldr	r1, [r5, #0]
 80045d0:	291d      	cmp	r1, #29
 80045d2:	d848      	bhi.n	8004666 <__sflush_r+0xf2>
 80045d4:	4a29      	ldr	r2, [pc, #164]	; (800467c <__sflush_r+0x108>)
 80045d6:	40ca      	lsrs	r2, r1
 80045d8:	07d6      	lsls	r6, r2, #31
 80045da:	d544      	bpl.n	8004666 <__sflush_r+0xf2>
 80045dc:	2200      	movs	r2, #0
 80045de:	6062      	str	r2, [r4, #4]
 80045e0:	04d9      	lsls	r1, r3, #19
 80045e2:	6922      	ldr	r2, [r4, #16]
 80045e4:	6022      	str	r2, [r4, #0]
 80045e6:	d504      	bpl.n	80045f2 <__sflush_r+0x7e>
 80045e8:	1c42      	adds	r2, r0, #1
 80045ea:	d101      	bne.n	80045f0 <__sflush_r+0x7c>
 80045ec:	682b      	ldr	r3, [r5, #0]
 80045ee:	b903      	cbnz	r3, 80045f2 <__sflush_r+0x7e>
 80045f0:	6560      	str	r0, [r4, #84]	; 0x54
 80045f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045f4:	602f      	str	r7, [r5, #0]
 80045f6:	2900      	cmp	r1, #0
 80045f8:	d0c9      	beq.n	800458e <__sflush_r+0x1a>
 80045fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045fe:	4299      	cmp	r1, r3
 8004600:	d002      	beq.n	8004608 <__sflush_r+0x94>
 8004602:	4628      	mov	r0, r5
 8004604:	f000 f8de 	bl	80047c4 <_free_r>
 8004608:	2000      	movs	r0, #0
 800460a:	6360      	str	r0, [r4, #52]	; 0x34
 800460c:	e7c0      	b.n	8004590 <__sflush_r+0x1c>
 800460e:	2301      	movs	r3, #1
 8004610:	4628      	mov	r0, r5
 8004612:	47b0      	blx	r6
 8004614:	1c41      	adds	r1, r0, #1
 8004616:	d1c8      	bne.n	80045aa <__sflush_r+0x36>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0c5      	beq.n	80045aa <__sflush_r+0x36>
 800461e:	2b1d      	cmp	r3, #29
 8004620:	d001      	beq.n	8004626 <__sflush_r+0xb2>
 8004622:	2b16      	cmp	r3, #22
 8004624:	d101      	bne.n	800462a <__sflush_r+0xb6>
 8004626:	602f      	str	r7, [r5, #0]
 8004628:	e7b1      	b.n	800458e <__sflush_r+0x1a>
 800462a:	89a3      	ldrh	r3, [r4, #12]
 800462c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	e7ad      	b.n	8004590 <__sflush_r+0x1c>
 8004634:	690f      	ldr	r7, [r1, #16]
 8004636:	2f00      	cmp	r7, #0
 8004638:	d0a9      	beq.n	800458e <__sflush_r+0x1a>
 800463a:	0793      	lsls	r3, r2, #30
 800463c:	680e      	ldr	r6, [r1, #0]
 800463e:	bf08      	it	eq
 8004640:	694b      	ldreq	r3, [r1, #20]
 8004642:	600f      	str	r7, [r1, #0]
 8004644:	bf18      	it	ne
 8004646:	2300      	movne	r3, #0
 8004648:	eba6 0807 	sub.w	r8, r6, r7
 800464c:	608b      	str	r3, [r1, #8]
 800464e:	f1b8 0f00 	cmp.w	r8, #0
 8004652:	dd9c      	ble.n	800458e <__sflush_r+0x1a>
 8004654:	4643      	mov	r3, r8
 8004656:	463a      	mov	r2, r7
 8004658:	6a21      	ldr	r1, [r4, #32]
 800465a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800465c:	4628      	mov	r0, r5
 800465e:	47b0      	blx	r6
 8004660:	2800      	cmp	r0, #0
 8004662:	dc06      	bgt.n	8004672 <__sflush_r+0xfe>
 8004664:	89a3      	ldrh	r3, [r4, #12]
 8004666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800466a:	81a3      	strh	r3, [r4, #12]
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	e78e      	b.n	8004590 <__sflush_r+0x1c>
 8004672:	4407      	add	r7, r0
 8004674:	eba8 0800 	sub.w	r8, r8, r0
 8004678:	e7e9      	b.n	800464e <__sflush_r+0xda>
 800467a:	bf00      	nop
 800467c:	20400001 	.word	0x20400001

08004680 <_fflush_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	690b      	ldr	r3, [r1, #16]
 8004684:	4605      	mov	r5, r0
 8004686:	460c      	mov	r4, r1
 8004688:	b1db      	cbz	r3, 80046c2 <_fflush_r+0x42>
 800468a:	b118      	cbz	r0, 8004694 <_fflush_r+0x14>
 800468c:	6983      	ldr	r3, [r0, #24]
 800468e:	b90b      	cbnz	r3, 8004694 <_fflush_r+0x14>
 8004690:	f7ff fa8e 	bl	8003bb0 <__sinit>
 8004694:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <_fflush_r+0x48>)
 8004696:	429c      	cmp	r4, r3
 8004698:	d109      	bne.n	80046ae <_fflush_r+0x2e>
 800469a:	686c      	ldr	r4, [r5, #4]
 800469c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046a0:	b17b      	cbz	r3, 80046c2 <_fflush_r+0x42>
 80046a2:	4621      	mov	r1, r4
 80046a4:	4628      	mov	r0, r5
 80046a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046aa:	f7ff bf63 	b.w	8004574 <__sflush_r>
 80046ae:	4b07      	ldr	r3, [pc, #28]	; (80046cc <_fflush_r+0x4c>)
 80046b0:	429c      	cmp	r4, r3
 80046b2:	d101      	bne.n	80046b8 <_fflush_r+0x38>
 80046b4:	68ac      	ldr	r4, [r5, #8]
 80046b6:	e7f1      	b.n	800469c <_fflush_r+0x1c>
 80046b8:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <_fflush_r+0x50>)
 80046ba:	429c      	cmp	r4, r3
 80046bc:	bf08      	it	eq
 80046be:	68ec      	ldreq	r4, [r5, #12]
 80046c0:	e7ec      	b.n	800469c <_fflush_r+0x1c>
 80046c2:	2000      	movs	r0, #0
 80046c4:	bd38      	pop	{r3, r4, r5, pc}
 80046c6:	bf00      	nop
 80046c8:	0800496c 	.word	0x0800496c
 80046cc:	0800498c 	.word	0x0800498c
 80046d0:	0800494c 	.word	0x0800494c

080046d4 <_lseek_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	4c07      	ldr	r4, [pc, #28]	; (80046f4 <_lseek_r+0x20>)
 80046d8:	4605      	mov	r5, r0
 80046da:	4608      	mov	r0, r1
 80046dc:	4611      	mov	r1, r2
 80046de:	2200      	movs	r2, #0
 80046e0:	6022      	str	r2, [r4, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f7fc fa7e 	bl	8000be4 <_lseek>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d102      	bne.n	80046f2 <_lseek_r+0x1e>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	b103      	cbz	r3, 80046f2 <_lseek_r+0x1e>
 80046f0:	602b      	str	r3, [r5, #0]
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	200001b8 	.word	0x200001b8

080046f8 <__swhatbuf_r>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	460e      	mov	r6, r1
 80046fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004700:	2900      	cmp	r1, #0
 8004702:	b096      	sub	sp, #88	; 0x58
 8004704:	4614      	mov	r4, r2
 8004706:	461d      	mov	r5, r3
 8004708:	da07      	bge.n	800471a <__swhatbuf_r+0x22>
 800470a:	2300      	movs	r3, #0
 800470c:	602b      	str	r3, [r5, #0]
 800470e:	89b3      	ldrh	r3, [r6, #12]
 8004710:	061a      	lsls	r2, r3, #24
 8004712:	d410      	bmi.n	8004736 <__swhatbuf_r+0x3e>
 8004714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004718:	e00e      	b.n	8004738 <__swhatbuf_r+0x40>
 800471a:	466a      	mov	r2, sp
 800471c:	f000 f8b2 	bl	8004884 <_fstat_r>
 8004720:	2800      	cmp	r0, #0
 8004722:	dbf2      	blt.n	800470a <__swhatbuf_r+0x12>
 8004724:	9a01      	ldr	r2, [sp, #4]
 8004726:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800472a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800472e:	425a      	negs	r2, r3
 8004730:	415a      	adcs	r2, r3
 8004732:	602a      	str	r2, [r5, #0]
 8004734:	e7ee      	b.n	8004714 <__swhatbuf_r+0x1c>
 8004736:	2340      	movs	r3, #64	; 0x40
 8004738:	2000      	movs	r0, #0
 800473a:	6023      	str	r3, [r4, #0]
 800473c:	b016      	add	sp, #88	; 0x58
 800473e:	bd70      	pop	{r4, r5, r6, pc}

08004740 <__smakebuf_r>:
 8004740:	898b      	ldrh	r3, [r1, #12]
 8004742:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004744:	079d      	lsls	r5, r3, #30
 8004746:	4606      	mov	r6, r0
 8004748:	460c      	mov	r4, r1
 800474a:	d507      	bpl.n	800475c <__smakebuf_r+0x1c>
 800474c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004750:	6023      	str	r3, [r4, #0]
 8004752:	6123      	str	r3, [r4, #16]
 8004754:	2301      	movs	r3, #1
 8004756:	6163      	str	r3, [r4, #20]
 8004758:	b002      	add	sp, #8
 800475a:	bd70      	pop	{r4, r5, r6, pc}
 800475c:	ab01      	add	r3, sp, #4
 800475e:	466a      	mov	r2, sp
 8004760:	f7ff ffca 	bl	80046f8 <__swhatbuf_r>
 8004764:	9900      	ldr	r1, [sp, #0]
 8004766:	4605      	mov	r5, r0
 8004768:	4630      	mov	r0, r6
 800476a:	f7ff faab 	bl	8003cc4 <_malloc_r>
 800476e:	b948      	cbnz	r0, 8004784 <__smakebuf_r+0x44>
 8004770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004774:	059a      	lsls	r2, r3, #22
 8004776:	d4ef      	bmi.n	8004758 <__smakebuf_r+0x18>
 8004778:	f023 0303 	bic.w	r3, r3, #3
 800477c:	f043 0302 	orr.w	r3, r3, #2
 8004780:	81a3      	strh	r3, [r4, #12]
 8004782:	e7e3      	b.n	800474c <__smakebuf_r+0xc>
 8004784:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <__smakebuf_r+0x7c>)
 8004786:	62b3      	str	r3, [r6, #40]	; 0x28
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	6020      	str	r0, [r4, #0]
 800478c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004790:	81a3      	strh	r3, [r4, #12]
 8004792:	9b00      	ldr	r3, [sp, #0]
 8004794:	6163      	str	r3, [r4, #20]
 8004796:	9b01      	ldr	r3, [sp, #4]
 8004798:	6120      	str	r0, [r4, #16]
 800479a:	b15b      	cbz	r3, 80047b4 <__smakebuf_r+0x74>
 800479c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047a0:	4630      	mov	r0, r6
 80047a2:	f000 f881 	bl	80048a8 <_isatty_r>
 80047a6:	b128      	cbz	r0, 80047b4 <__smakebuf_r+0x74>
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	f023 0303 	bic.w	r3, r3, #3
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	81a3      	strh	r3, [r4, #12]
 80047b4:	89a3      	ldrh	r3, [r4, #12]
 80047b6:	431d      	orrs	r5, r3
 80047b8:	81a5      	strh	r5, [r4, #12]
 80047ba:	e7cd      	b.n	8004758 <__smakebuf_r+0x18>
 80047bc:	08003b79 	.word	0x08003b79

080047c0 <__malloc_lock>:
 80047c0:	4770      	bx	lr

080047c2 <__malloc_unlock>:
 80047c2:	4770      	bx	lr

080047c4 <_free_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4605      	mov	r5, r0
 80047c8:	2900      	cmp	r1, #0
 80047ca:	d045      	beq.n	8004858 <_free_r+0x94>
 80047cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047d0:	1f0c      	subs	r4, r1, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bfb8      	it	lt
 80047d6:	18e4      	addlt	r4, r4, r3
 80047d8:	f7ff fff2 	bl	80047c0 <__malloc_lock>
 80047dc:	4a1f      	ldr	r2, [pc, #124]	; (800485c <_free_r+0x98>)
 80047de:	6813      	ldr	r3, [r2, #0]
 80047e0:	4610      	mov	r0, r2
 80047e2:	b933      	cbnz	r3, 80047f2 <_free_r+0x2e>
 80047e4:	6063      	str	r3, [r4, #4]
 80047e6:	6014      	str	r4, [r2, #0]
 80047e8:	4628      	mov	r0, r5
 80047ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047ee:	f7ff bfe8 	b.w	80047c2 <__malloc_unlock>
 80047f2:	42a3      	cmp	r3, r4
 80047f4:	d90c      	bls.n	8004810 <_free_r+0x4c>
 80047f6:	6821      	ldr	r1, [r4, #0]
 80047f8:	1862      	adds	r2, r4, r1
 80047fa:	4293      	cmp	r3, r2
 80047fc:	bf04      	itt	eq
 80047fe:	681a      	ldreq	r2, [r3, #0]
 8004800:	685b      	ldreq	r3, [r3, #4]
 8004802:	6063      	str	r3, [r4, #4]
 8004804:	bf04      	itt	eq
 8004806:	1852      	addeq	r2, r2, r1
 8004808:	6022      	streq	r2, [r4, #0]
 800480a:	6004      	str	r4, [r0, #0]
 800480c:	e7ec      	b.n	80047e8 <_free_r+0x24>
 800480e:	4613      	mov	r3, r2
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	b10a      	cbz	r2, 8004818 <_free_r+0x54>
 8004814:	42a2      	cmp	r2, r4
 8004816:	d9fa      	bls.n	800480e <_free_r+0x4a>
 8004818:	6819      	ldr	r1, [r3, #0]
 800481a:	1858      	adds	r0, r3, r1
 800481c:	42a0      	cmp	r0, r4
 800481e:	d10b      	bne.n	8004838 <_free_r+0x74>
 8004820:	6820      	ldr	r0, [r4, #0]
 8004822:	4401      	add	r1, r0
 8004824:	1858      	adds	r0, r3, r1
 8004826:	4282      	cmp	r2, r0
 8004828:	6019      	str	r1, [r3, #0]
 800482a:	d1dd      	bne.n	80047e8 <_free_r+0x24>
 800482c:	6810      	ldr	r0, [r2, #0]
 800482e:	6852      	ldr	r2, [r2, #4]
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	4401      	add	r1, r0
 8004834:	6019      	str	r1, [r3, #0]
 8004836:	e7d7      	b.n	80047e8 <_free_r+0x24>
 8004838:	d902      	bls.n	8004840 <_free_r+0x7c>
 800483a:	230c      	movs	r3, #12
 800483c:	602b      	str	r3, [r5, #0]
 800483e:	e7d3      	b.n	80047e8 <_free_r+0x24>
 8004840:	6820      	ldr	r0, [r4, #0]
 8004842:	1821      	adds	r1, r4, r0
 8004844:	428a      	cmp	r2, r1
 8004846:	bf04      	itt	eq
 8004848:	6811      	ldreq	r1, [r2, #0]
 800484a:	6852      	ldreq	r2, [r2, #4]
 800484c:	6062      	str	r2, [r4, #4]
 800484e:	bf04      	itt	eq
 8004850:	1809      	addeq	r1, r1, r0
 8004852:	6021      	streq	r1, [r4, #0]
 8004854:	605c      	str	r4, [r3, #4]
 8004856:	e7c7      	b.n	80047e8 <_free_r+0x24>
 8004858:	bd38      	pop	{r3, r4, r5, pc}
 800485a:	bf00      	nop
 800485c:	200000a0 	.word	0x200000a0

08004860 <_read_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4c07      	ldr	r4, [pc, #28]	; (8004880 <_read_r+0x20>)
 8004864:	4605      	mov	r5, r0
 8004866:	4608      	mov	r0, r1
 8004868:	4611      	mov	r1, r2
 800486a:	2200      	movs	r2, #0
 800486c:	6022      	str	r2, [r4, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	f7fc f958 	bl	8000b24 <_read>
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d102      	bne.n	800487e <_read_r+0x1e>
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	b103      	cbz	r3, 800487e <_read_r+0x1e>
 800487c:	602b      	str	r3, [r5, #0]
 800487e:	bd38      	pop	{r3, r4, r5, pc}
 8004880:	200001b8 	.word	0x200001b8

08004884 <_fstat_r>:
 8004884:	b538      	push	{r3, r4, r5, lr}
 8004886:	4c07      	ldr	r4, [pc, #28]	; (80048a4 <_fstat_r+0x20>)
 8004888:	2300      	movs	r3, #0
 800488a:	4605      	mov	r5, r0
 800488c:	4608      	mov	r0, r1
 800488e:	4611      	mov	r1, r2
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	f7fc f98c 	bl	8000bae <_fstat>
 8004896:	1c43      	adds	r3, r0, #1
 8004898:	d102      	bne.n	80048a0 <_fstat_r+0x1c>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	b103      	cbz	r3, 80048a0 <_fstat_r+0x1c>
 800489e:	602b      	str	r3, [r5, #0]
 80048a0:	bd38      	pop	{r3, r4, r5, pc}
 80048a2:	bf00      	nop
 80048a4:	200001b8 	.word	0x200001b8

080048a8 <_isatty_r>:
 80048a8:	b538      	push	{r3, r4, r5, lr}
 80048aa:	4c06      	ldr	r4, [pc, #24]	; (80048c4 <_isatty_r+0x1c>)
 80048ac:	2300      	movs	r3, #0
 80048ae:	4605      	mov	r5, r0
 80048b0:	4608      	mov	r0, r1
 80048b2:	6023      	str	r3, [r4, #0]
 80048b4:	f7fc f98b 	bl	8000bce <_isatty>
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	d102      	bne.n	80048c2 <_isatty_r+0x1a>
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	b103      	cbz	r3, 80048c2 <_isatty_r+0x1a>
 80048c0:	602b      	str	r3, [r5, #0]
 80048c2:	bd38      	pop	{r3, r4, r5, pc}
 80048c4:	200001b8 	.word	0x200001b8

080048c8 <_init>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	bf00      	nop
 80048cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ce:	bc08      	pop	{r3}
 80048d0:	469e      	mov	lr, r3
 80048d2:	4770      	bx	lr

080048d4 <_fini>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	bf00      	nop
 80048d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048da:	bc08      	pop	{r3}
 80048dc:	469e      	mov	lr, r3
 80048de:	4770      	bx	lr
